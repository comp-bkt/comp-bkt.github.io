(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))s(n);new MutationObserver(n=>{for(const d of n)if(d.type==="childList")for(const o of d.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&s(o)}).observe(document,{childList:!0,subtree:!0});function t(n){const d={};return n.integrity&&(d.integrity=n.integrity),n.referrerpolicy&&(d.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?d.credentials="include":n.crossorigin==="anonymous"?d.credentials="omit":d.credentials="same-origin",d}function s(n){if(n.ep)return;n.ep=!0;const d=t(n);fetch(n.href,d)}})();function Dt(a,e){const t=Object.create(null),s=a.split(",");for(let n=0;n<s.length;n++)t[s[n]]=!0;return e?n=>!!t[n.toLowerCase()]:n=>!!t[n]}function $t(a){if(O(a)){const e={};for(let t=0;t<a.length;t++){const s=a[t],n=da(s)?dd(s):$t(s);if(n)for(const d in n)e[d]=n[d]}return e}else{if(da(a))return a;if(ea(a))return a}}const td=/;(?![^(]*\))/g,sd=/:([^]+)/,nd=/\/\*.*?\*\//gs;function dd(a){const e={};return a.replace(nd,"").split(td).forEach(t=>{if(t){const s=t.split(sd);s.length>1&&(e[s[0].trim()]=s[1].trim())}}),e}function Ze(a){let e="";if(da(a))e=a;else if(O(a))for(let t=0;t<a.length;t++){const s=Ze(a[t]);s&&(e+=s+" ")}else if(ea(a))for(const t in a)a[t]&&(e+=t+" ");return e.trim()}const od="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ld=Dt(od);function Bs(a){return!!a||a===""}const cd=a=>da(a)?a:a==null?"":O(a)||ea(a)&&(a.toString===Ks||!D(a.toString))?JSON.stringify(a,Hs,2):String(a),Hs=(a,e)=>e&&e.__v_isRef?Hs(a,e.value):pe(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((t,[s,n])=>(t[`${s} =>`]=n,t),{})}:Us(e)?{[`Set(${e.size})`]:[...e.values()]}:ea(e)&&!O(e)&&!Js(e)?String(e):e,z={},re=[],Ma=()=>{},id=()=>!1,rd=/^on[^a-z]/,at=a=>rd.test(a),jt=a=>a.startsWith("onUpdate:"),pa=Object.assign,Nt=(a,e)=>{const t=a.indexOf(e);t>-1&&a.splice(t,1)},pd=Object.prototype.hasOwnProperty,B=(a,e)=>pd.call(a,e),O=Array.isArray,pe=a=>et(a)==="[object Map]",Us=a=>et(a)==="[object Set]",D=a=>typeof a=="function",da=a=>typeof a=="string",Bt=a=>typeof a=="symbol",ea=a=>a!==null&&typeof a=="object",Ws=a=>ea(a)&&D(a.then)&&D(a.catch),Ks=Object.prototype.toString,et=a=>Ks.call(a),ud=a=>et(a).slice(8,-1),Js=a=>et(a)==="[object Object]",Ht=a=>da(a)&&a!=="NaN"&&a[0]!=="-"&&""+parseInt(a,10)===a,We=Dt(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),tt=a=>{const e=Object.create(null);return t=>e[t]||(e[t]=a(t))},fd=/-(\w)/g,Va=tt(a=>a.replace(fd,(e,t)=>t?t.toUpperCase():"")),vd=/\B([A-Z])/g,he=tt(a=>a.replace(vd,"-$1").toLowerCase()),st=tt(a=>a.charAt(0).toUpperCase()+a.slice(1)),mt=tt(a=>a?`on${st(a)}`:""),Se=(a,e)=>!Object.is(a,e),xe=(a,e)=>{for(let t=0;t<a.length;t++)a[t](e)},Qe=(a,e,t)=>{Object.defineProperty(a,e,{configurable:!0,enumerable:!1,value:t})},Qs=a=>{const e=parseFloat(a);return isNaN(e)?a:e};let ps;const md=()=>ps||(ps=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});let ya;class Xs{constructor(e=!1){this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=ya,!e&&ya&&(this.index=(ya.scopes||(ya.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ya;try{return ya=this,e()}finally{ya=t}}}on(){ya=this}off(){ya=this.parent}stop(e){if(this.active){let t,s;for(t=0,s=this.effects.length;t<s;t++)this.effects[t].stop();for(t=0,s=this.cleanups.length;t<s;t++)this.cleanups[t]();if(this.scopes)for(t=0,s=this.scopes.length;t<s;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const n=this.parent.scopes.pop();n&&n!==this&&(this.parent.scopes[this.index]=n,n.index=this.index)}this.parent=void 0,this.active=!1}}}function zs(a){return new Xs(a)}function hd(a,e=ya){e&&e.active&&e.effects.push(a)}function yd(){return ya}function _d(a){ya&&ya.cleanups.push(a)}const Ut=a=>{const e=new Set(a);return e.w=0,e.n=0,e},Gs=a=>(a.w&Qa)>0,Ys=a=>(a.n&Qa)>0,bd=({deps:a})=>{if(a.length)for(let e=0;e<a.length;e++)a[e].w|=Qa},gd=a=>{const{deps:e}=a;if(e.length){let t=0;for(let s=0;s<e.length;s++){const n=e[s];Gs(n)&&!Ys(n)?n.delete(a):e[t++]=n,n.w&=~Qa,n.n&=~Qa}e.length=t}},kt=new WeakMap;let ge=0,Qa=1;const Tt=30;let Ia;const ne=Symbol(""),At=Symbol("");class Wt{constructor(e,t=null,s){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,hd(this,s)}run(){if(!this.active)return this.fn();let e=Ia,t=Wa;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ia,Ia=this,Wa=!0,Qa=1<<++ge,ge<=Tt?bd(this):us(this),this.fn()}finally{ge<=Tt&&gd(this),Qa=1<<--ge,Ia=this.parent,Wa=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ia===this?this.deferStop=!0:this.active&&(us(this),this.onStop&&this.onStop(),this.active=!1)}}function us(a){const{deps:e}=a;if(e.length){for(let t=0;t<e.length;t++)e[t].delete(a);e.length=0}}let Wa=!0;const Zs=[];function ye(){Zs.push(Wa),Wa=!1}function _e(){const a=Zs.pop();Wa=a===void 0?!0:a}function _a(a,e,t){if(Wa&&Ia){let s=kt.get(a);s||kt.set(a,s=new Map);let n=s.get(t);n||s.set(t,n=Ut()),an(n)}}function an(a,e){let t=!1;ge<=Tt?Ys(a)||(a.n|=Qa,t=!Gs(a)):t=!a.has(Ia),t&&(a.add(Ia),Ia.deps.push(a))}function $a(a,e,t,s,n,d){const o=kt.get(a);if(!o)return;let l=[];if(e==="clear")l=[...o.values()];else if(t==="length"&&O(a)){const r=Qs(s);o.forEach((p,f)=>{(f==="length"||f>=r)&&l.push(p)})}else switch(t!==void 0&&l.push(o.get(t)),e){case"add":O(a)?Ht(t)&&l.push(o.get("length")):(l.push(o.get(ne)),pe(a)&&l.push(o.get(At)));break;case"delete":O(a)||(l.push(o.get(ne)),pe(a)&&l.push(o.get(At)));break;case"set":pe(a)&&l.push(o.get(ne));break}if(l.length===1)l[0]&&Ct(l[0]);else{const r=[];for(const p of l)p&&r.push(...p);Ct(Ut(r))}}function Ct(a,e){const t=O(a)?a:[...a];for(const s of t)s.computed&&fs(s);for(const s of t)s.computed||fs(s)}function fs(a,e){(a!==Ia||a.allowRecurse)&&(a.scheduler?a.scheduler():a.run())}const wd=Dt("__proto__,__v_isRef,__isVue"),en=new Set(Object.getOwnPropertyNames(Symbol).filter(a=>a!=="arguments"&&a!=="caller").map(a=>Symbol[a]).filter(Bt)),xd=Kt(),kd=Kt(!1,!0),Td=Kt(!0),vs=Ad();function Ad(){const a={};return["includes","indexOf","lastIndexOf"].forEach(e=>{a[e]=function(...t){const s=H(this);for(let d=0,o=this.length;d<o;d++)_a(s,"get",d+"");const n=s[e](...t);return n===-1||n===!1?s[e](...t.map(H)):n}}),["push","pop","shift","unshift","splice"].forEach(e=>{a[e]=function(...t){ye();const s=H(this)[e].apply(this,t);return _e(),s}}),a}function Kt(a=!1,e=!1){return function(s,n,d){if(n==="__v_isReactive")return!a;if(n==="__v_isReadonly")return a;if(n==="__v_isShallow")return e;if(n==="__v_raw"&&d===(a?e?Nd:on:e?dn:nn).get(s))return s;const o=O(s);if(!a&&o&&B(vs,n))return Reflect.get(vs,n,d);const l=Reflect.get(s,n,d);return(Bt(n)?en.has(n):wd(n))||(a||_a(s,"get",n),e)?l:ta(l)?o&&Ht(n)?l:l.value:ea(l)?a?ln(l):Fe(l):l}}const Cd=tn(),qd=tn(!0);function tn(a=!1){return function(t,s,n,d){let o=t[s];if(fe(o)&&ta(o)&&!ta(n))return!1;if(!a&&(!Xe(n)&&!fe(n)&&(o=H(o),n=H(n)),!O(t)&&ta(o)&&!ta(n)))return o.value=n,!0;const l=O(t)&&Ht(s)?Number(s)<t.length:B(t,s),r=Reflect.set(t,s,n,d);return t===H(d)&&(l?Se(n,o)&&$a(t,"set",s,n):$a(t,"add",s,n)),r}}function Id(a,e){const t=B(a,e);a[e];const s=Reflect.deleteProperty(a,e);return s&&t&&$a(a,"delete",e,void 0),s}function Sd(a,e){const t=Reflect.has(a,e);return(!Bt(e)||!en.has(e))&&_a(a,"has",e),t}function Md(a){return _a(a,"iterate",O(a)?"length":ne),Reflect.ownKeys(a)}const sn={get:xd,set:Cd,deleteProperty:Id,has:Sd,ownKeys:Md},Ld={get:Td,set(a,e){return!0},deleteProperty(a,e){return!0}},Rd=pa({},sn,{get:kd,set:qd}),Jt=a=>a,nt=a=>Reflect.getPrototypeOf(a);function $e(a,e,t=!1,s=!1){a=a.__v_raw;const n=H(a),d=H(e);t||(e!==d&&_a(n,"get",e),_a(n,"get",d));const{has:o}=nt(n),l=s?Jt:t?zt:Me;if(o.call(n,e))return l(a.get(e));if(o.call(n,d))return l(a.get(d));a!==n&&a.get(e)}function je(a,e=!1){const t=this.__v_raw,s=H(t),n=H(a);return e||(a!==n&&_a(s,"has",a),_a(s,"has",n)),a===n?t.has(a):t.has(a)||t.has(n)}function Ne(a,e=!1){return a=a.__v_raw,!e&&_a(H(a),"iterate",ne),Reflect.get(a,"size",a)}function ms(a){a=H(a);const e=H(this);return nt(e).has.call(e,a)||(e.add(a),$a(e,"add",a,a)),this}function hs(a,e){e=H(e);const t=H(this),{has:s,get:n}=nt(t);let d=s.call(t,a);d||(a=H(a),d=s.call(t,a));const o=n.call(t,a);return t.set(a,e),d?Se(e,o)&&$a(t,"set",a,e):$a(t,"add",a,e),this}function ys(a){const e=H(this),{has:t,get:s}=nt(e);let n=t.call(e,a);n||(a=H(a),n=t.call(e,a)),s&&s.call(e,a);const d=e.delete(a);return n&&$a(e,"delete",a,void 0),d}function _s(){const a=H(this),e=a.size!==0,t=a.clear();return e&&$a(a,"clear",void 0,void 0),t}function Be(a,e){return function(s,n){const d=this,o=d.__v_raw,l=H(o),r=e?Jt:a?zt:Me;return!a&&_a(l,"iterate",ne),o.forEach((p,f)=>s.call(n,r(p),r(f),d))}}function He(a,e,t){return function(...s){const n=this.__v_raw,d=H(n),o=pe(d),l=a==="entries"||a===Symbol.iterator&&o,r=a==="keys"&&o,p=n[a](...s),f=t?Jt:e?zt:Me;return!e&&_a(d,"iterate",r?At:ne),{next(){const{value:y,done:g}=p.next();return g?{value:y,done:g}:{value:l?[f(y[0]),f(y[1])]:f(y),done:g}},[Symbol.iterator](){return this}}}}function Ba(a){return function(...e){return a==="delete"?!1:this}}function Ed(){const a={get(d){return $e(this,d)},get size(){return Ne(this)},has:je,add:ms,set:hs,delete:ys,clear:_s,forEach:Be(!1,!1)},e={get(d){return $e(this,d,!1,!0)},get size(){return Ne(this)},has:je,add:ms,set:hs,delete:ys,clear:_s,forEach:Be(!1,!0)},t={get(d){return $e(this,d,!0)},get size(){return Ne(this,!0)},has(d){return je.call(this,d,!0)},add:Ba("add"),set:Ba("set"),delete:Ba("delete"),clear:Ba("clear"),forEach:Be(!0,!1)},s={get(d){return $e(this,d,!0,!0)},get size(){return Ne(this,!0)},has(d){return je.call(this,d,!0)},add:Ba("add"),set:Ba("set"),delete:Ba("delete"),clear:Ba("clear"),forEach:Be(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(d=>{a[d]=He(d,!1,!1),t[d]=He(d,!0,!1),e[d]=He(d,!1,!0),s[d]=He(d,!0,!0)}),[a,t,e,s]}const[Od,Vd,Fd,Pd]=Ed();function Qt(a,e){const t=e?a?Pd:Fd:a?Vd:Od;return(s,n,d)=>n==="__v_isReactive"?!a:n==="__v_isReadonly"?a:n==="__v_raw"?s:Reflect.get(B(t,n)&&n in s?t:s,n,d)}const Dd={get:Qt(!1,!1)},$d={get:Qt(!1,!0)},jd={get:Qt(!0,!1)},nn=new WeakMap,dn=new WeakMap,on=new WeakMap,Nd=new WeakMap;function Bd(a){switch(a){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Hd(a){return a.__v_skip||!Object.isExtensible(a)?0:Bd(ud(a))}function Fe(a){return fe(a)?a:Xt(a,!1,sn,Dd,nn)}function Ud(a){return Xt(a,!1,Rd,$d,dn)}function ln(a){return Xt(a,!0,Ld,jd,on)}function Xt(a,e,t,s,n){if(!ea(a)||a.__v_raw&&!(e&&a.__v_isReactive))return a;const d=n.get(a);if(d)return d;const o=Hd(a);if(o===0)return a;const l=new Proxy(a,o===2?s:t);return n.set(a,l),l}function Ka(a){return fe(a)?Ka(a.__v_raw):!!(a&&a.__v_isReactive)}function fe(a){return!!(a&&a.__v_isReadonly)}function Xe(a){return!!(a&&a.__v_isShallow)}function cn(a){return Ka(a)||fe(a)}function H(a){const e=a&&a.__v_raw;return e?H(e):a}function ve(a){return Qe(a,"__v_skip",!0),a}const Me=a=>ea(a)?Fe(a):a,zt=a=>ea(a)?ln(a):a;function rn(a){Wa&&Ia&&(a=H(a),an(a.dep||(a.dep=Ut())))}function pn(a,e){a=H(a),a.dep&&Ct(a.dep)}function ta(a){return!!(a&&a.__v_isRef===!0)}function un(a){return Wd(a,!1)}function Wd(a,e){return ta(a)?a:new Kd(a,e)}class Kd{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:H(e),this._value=t?e:Me(e)}get value(){return rn(this),this._value}set value(e){const t=this.__v_isShallow||Xe(e)||fe(e);e=t?e:H(e),Se(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:Me(e),pn(this))}}function fn(a){return ta(a)?a.value:a}const Jd={get:(a,e,t)=>fn(Reflect.get(a,e,t)),set:(a,e,t,s)=>{const n=a[e];return ta(n)&&!ta(t)?(n.value=t,!0):Reflect.set(a,e,t,s)}};function vn(a){return Ka(a)?a:new Proxy(a,Jd)}function Qd(a){const e=O(a)?new Array(a.length):{};for(const t in a)e[t]=zd(a,t);return e}class Xd{constructor(e,t,s){this._object=e,this._key=t,this._defaultValue=s,this.__v_isRef=!0}get value(){const e=this._object[this._key];return e===void 0?this._defaultValue:e}set value(e){this._object[this._key]=e}}function zd(a,e,t){const s=a[e];return ta(s)?s:new Xd(a,e,t)}var mn;class Gd{constructor(e,t,s,n){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[mn]=!1,this._dirty=!0,this.effect=new Wt(e,()=>{this._dirty||(this._dirty=!0,pn(this))}),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=s}get value(){const e=H(this);return rn(e),(e._dirty||!e._cacheable)&&(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}mn="__v_isReadonly";function Yd(a,e,t=!1){let s,n;const d=D(a);return d?(s=a,n=Ma):(s=a.get,n=a.set),new Gd(s,n,d||!n,t)}function Ja(a,e,t,s){let n;try{n=s?a(...s):a()}catch(d){dt(d,e,t)}return n}function ka(a,e,t,s){if(D(a)){const d=Ja(a,e,t,s);return d&&Ws(d)&&d.catch(o=>{dt(o,e,t)}),d}const n=[];for(let d=0;d<a.length;d++)n.push(ka(a[d],e,t,s));return n}function dt(a,e,t,s=!0){const n=e?e.vnode:null;if(e){let d=e.parent;const o=e.proxy,l=t;for(;d;){const p=d.ec;if(p){for(let f=0;f<p.length;f++)if(p[f](a,o,l)===!1)return}d=d.parent}const r=e.appContext.config.errorHandler;if(r){Ja(r,null,10,[a,o,l]);return}}Zd(a,t,n,s)}function Zd(a,e,t,s=!0){console.error(a)}let Le=!1,qt=!1;const ra=[];let Oa=0;const ue=[];let Pa=null,ee=0;const hn=Promise.resolve();let Gt=null;function yn(a){const e=Gt||hn;return a?e.then(this?a.bind(this):a):e}function ao(a){let e=Oa+1,t=ra.length;for(;e<t;){const s=e+t>>>1;Re(ra[s])<a?e=s+1:t=s}return e}function Yt(a){(!ra.length||!ra.includes(a,Le&&a.allowRecurse?Oa+1:Oa))&&(a.id==null?ra.push(a):ra.splice(ao(a.id),0,a),_n())}function _n(){!Le&&!qt&&(qt=!0,Gt=hn.then(gn))}function eo(a){const e=ra.indexOf(a);e>Oa&&ra.splice(e,1)}function to(a){O(a)?ue.push(...a):(!Pa||!Pa.includes(a,a.allowRecurse?ee+1:ee))&&ue.push(a),_n()}function bs(a,e=Le?Oa+1:0){for(;e<ra.length;e++){const t=ra[e];t&&t.pre&&(ra.splice(e,1),e--,t())}}function bn(a){if(ue.length){const e=[...new Set(ue)];if(ue.length=0,Pa){Pa.push(...e);return}for(Pa=e,Pa.sort((t,s)=>Re(t)-Re(s)),ee=0;ee<Pa.length;ee++)Pa[ee]();Pa=null,ee=0}}const Re=a=>a.id==null?1/0:a.id,so=(a,e)=>{const t=Re(a)-Re(e);if(t===0){if(a.pre&&!e.pre)return-1;if(e.pre&&!a.pre)return 1}return t};function gn(a){qt=!1,Le=!0,ra.sort(so);const e=Ma;try{for(Oa=0;Oa<ra.length;Oa++){const t=ra[Oa];t&&t.active!==!1&&Ja(t,null,14)}}finally{Oa=0,ra.length=0,bn(),Le=!1,Gt=null,(ra.length||ue.length)&&gn()}}function no(a,e,...t){if(a.isUnmounted)return;const s=a.vnode.props||z;let n=t;const d=e.startsWith("update:"),o=d&&e.slice(7);if(o&&o in s){const f=`${o==="modelValue"?"model":o}Modifiers`,{number:y,trim:g}=s[f]||z;g&&(n=t.map(q=>da(q)?q.trim():q)),y&&(n=t.map(Qs))}let l,r=s[l=mt(e)]||s[l=mt(Va(e))];!r&&d&&(r=s[l=mt(he(e))]),r&&ka(r,a,6,n);const p=s[l+"Once"];if(p){if(!a.emitted)a.emitted={};else if(a.emitted[l])return;a.emitted[l]=!0,ka(p,a,6,n)}}function wn(a,e,t=!1){const s=e.emitsCache,n=s.get(a);if(n!==void 0)return n;const d=a.emits;let o={},l=!1;if(!D(a)){const r=p=>{const f=wn(p,e,!0);f&&(l=!0,pa(o,f))};!t&&e.mixins.length&&e.mixins.forEach(r),a.extends&&r(a.extends),a.mixins&&a.mixins.forEach(r)}return!d&&!l?(ea(a)&&s.set(a,null),null):(O(d)?d.forEach(r=>o[r]=null):pa(o,d),ea(a)&&s.set(a,o),o)}function ot(a,e){return!a||!at(e)?!1:(e=e.slice(2).replace(/Once$/,""),B(a,e[0].toLowerCase()+e.slice(1))||B(a,he(e))||B(a,e))}let xa=null,lt=null;function ze(a){const e=xa;return xa=a,lt=a&&a.type.__scopeId||null,e}function oo(a){lt=a}function lo(){lt=null}function co(a,e=xa,t){if(!e||a._n)return a;const s=(...n)=>{s._d&&Ss(-1);const d=ze(e);let o;try{o=a(...n)}finally{ze(d),s._d&&Ss(1)}return o};return s._n=!0,s._c=!0,s._d=!0,s}function ht(a){const{type:e,vnode:t,proxy:s,withProxy:n,props:d,propsOptions:[o],slots:l,attrs:r,emit:p,render:f,renderCache:y,data:g,setupState:q,ctx:F,inheritAttrs:L}=a;let K,U;const I=ze(a);try{if(t.shapeFlag&4){const C=n||s;K=Ea(f.call(C,C,y,d,q,g,F)),U=r}else{const C=e;K=Ea(C.length>1?C(d,{attrs:r,slots:l,emit:p}):C(d,null)),U=e.props?r:io(r)}}catch(C){qe.length=0,dt(C,a,1),K=N(Da)}let x=K;if(U&&L!==!1){const C=Object.keys(U),{shapeFlag:P}=x;C.length&&P&7&&(o&&C.some(jt)&&(U=ro(U,o)),x=ja(x,U))}return t.dirs&&(x=ja(x),x.dirs=x.dirs?x.dirs.concat(t.dirs):t.dirs),t.transition&&(x.transition=t.transition),K=x,ze(I),K}const io=a=>{let e;for(const t in a)(t==="class"||t==="style"||at(t))&&((e||(e={}))[t]=a[t]);return e},ro=(a,e)=>{const t={};for(const s in a)(!jt(s)||!(s.slice(9)in e))&&(t[s]=a[s]);return t};function po(a,e,t){const{props:s,children:n,component:d}=a,{props:o,children:l,patchFlag:r}=e,p=d.emitsOptions;if(e.dirs||e.transition)return!0;if(t&&r>=0){if(r&1024)return!0;if(r&16)return s?gs(s,o,p):!!o;if(r&8){const f=e.dynamicProps;for(let y=0;y<f.length;y++){const g=f[y];if(o[g]!==s[g]&&!ot(p,g))return!0}}}else return(n||l)&&(!l||!l.$stable)?!0:s===o?!1:s?o?gs(s,o,p):!0:!!o;return!1}function gs(a,e,t){const s=Object.keys(e);if(s.length!==Object.keys(a).length)return!0;for(let n=0;n<s.length;n++){const d=s[n];if(e[d]!==a[d]&&!ot(t,d))return!0}return!1}function uo({vnode:a,parent:e},t){for(;e&&e.subTree===a;)(a=e.vnode).el=t,e=e.parent}const xn=a=>a.__isSuspense;function fo(a,e){e&&e.pendingBranch?O(a)?e.effects.push(...a):e.effects.push(a):to(a)}function vo(a,e){if(ca){let t=ca.provides;const s=ca.parent&&ca.parent.provides;s===t&&(t=ca.provides=Object.create(s)),t[a]=e}}function ke(a,e,t=!1){const s=ca||xa;if(s){const n=s.parent==null?s.vnode.appContext&&s.vnode.appContext.provides:s.parent.provides;if(n&&a in n)return n[a];if(arguments.length>1)return t&&D(e)?e.call(s.proxy):e}}const Ue={};function Te(a,e,t){return kn(a,e,t)}function kn(a,e,{immediate:t,deep:s,flush:n,onTrack:d,onTrigger:o}=z){const l=ca;let r,p=!1,f=!1;if(ta(a)?(r=()=>a.value,p=Xe(a)):Ka(a)?(r=()=>a,s=!0):O(a)?(f=!0,p=a.some(x=>Ka(x)||Xe(x)),r=()=>a.map(x=>{if(ta(x))return x.value;if(Ka(x))return ie(x);if(D(x))return Ja(x,l,2)})):D(a)?e?r=()=>Ja(a,l,2):r=()=>{if(!(l&&l.isUnmounted))return y&&y(),ka(a,l,3,[g])}:r=Ma,e&&s){const x=r;r=()=>ie(x())}let y,g=x=>{y=U.onStop=()=>{Ja(x,l,4)}},q;if(Oe)if(g=Ma,e?t&&ka(e,l,3,[r(),f?[]:void 0,g]):r(),n==="sync"){const x=cl();q=x.__watcherHandles||(x.__watcherHandles=[])}else return Ma;let F=f?new Array(a.length).fill(Ue):Ue;const L=()=>{if(U.active)if(e){const x=U.run();(s||p||(f?x.some((C,P)=>Se(C,F[P])):Se(x,F)))&&(y&&y(),ka(e,l,3,[x,F===Ue?void 0:f&&F[0]===Ue?[]:F,g]),F=x)}else U.run()};L.allowRecurse=!!e;let K;n==="sync"?K=L:n==="post"?K=()=>ia(L,l&&l.suspense):(L.pre=!0,l&&(L.id=l.uid),K=()=>Yt(L));const U=new Wt(r,K);e?t?L():F=U.run():n==="post"?ia(U.run.bind(U),l&&l.suspense):U.run();const I=()=>{U.stop(),l&&l.scope&&Nt(l.scope.effects,U)};return q&&q.push(I),I}function mo(a,e,t){const s=this.proxy,n=da(a)?a.includes(".")?Tn(s,a):()=>s[a]:a.bind(s,s);let d;D(e)?d=e:(d=e.handler,t=e);const o=ca;me(this);const l=kn(n,d.bind(s),t);return o?me(o):de(),l}function Tn(a,e){const t=e.split(".");return()=>{let s=a;for(let n=0;n<t.length&&s;n++)s=s[t[n]];return s}}function ie(a,e){if(!ea(a)||a.__v_skip||(e=e||new Set,e.has(a)))return a;if(e.add(a),ta(a))ie(a.value,e);else if(O(a))for(let t=0;t<a.length;t++)ie(a[t],e);else if(Us(a)||pe(a))a.forEach(t=>{ie(t,e)});else if(Js(a))for(const t in a)ie(a[t],e);return a}function ho(){const a={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Zt(()=>{a.isMounted=!0}),as(()=>{a.isUnmounting=!0}),a}const ga=[Function,Array],yo={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:ga,onEnter:ga,onAfterEnter:ga,onEnterCancelled:ga,onBeforeLeave:ga,onLeave:ga,onAfterLeave:ga,onLeaveCancelled:ga,onBeforeAppear:ga,onAppear:ga,onAfterAppear:ga,onAppearCancelled:ga},setup(a,{slots:e}){const t=ns(),s=ho();let n;return()=>{const d=e.default&&Cn(e.default(),!0);if(!d||!d.length)return;let o=d[0];if(d.length>1){for(const L of d)if(L.type!==Da){o=L;break}}const l=H(a),{mode:r}=l;if(s.isLeaving)return yt(o);const p=ws(o);if(!p)return yt(o);const f=It(p,l,s,t);Ge(p,f);const y=t.subTree,g=y&&ws(y);let q=!1;const{getTransitionKey:F}=p.type;if(F){const L=F();n===void 0?n=L:L!==n&&(n=L,q=!0)}if(g&&g.type!==Da&&(!te(p,g)||q)){const L=It(g,l,s,t);if(Ge(g,L),r==="out-in")return s.isLeaving=!0,L.afterLeave=()=>{s.isLeaving=!1,t.update.active!==!1&&t.update()},yt(o);r==="in-out"&&p.type!==Da&&(L.delayLeave=(K,U,I)=>{const x=An(s,g);x[String(g.key)]=g,K._leaveCb=()=>{U(),K._leaveCb=void 0,delete f.delayedLeave},f.delayedLeave=I})}return o}}},_o=yo;function An(a,e){const{leavingVNodes:t}=a;let s=t.get(e.type);return s||(s=Object.create(null),t.set(e.type,s)),s}function It(a,e,t,s){const{appear:n,mode:d,persisted:o=!1,onBeforeEnter:l,onEnter:r,onAfterEnter:p,onEnterCancelled:f,onBeforeLeave:y,onLeave:g,onAfterLeave:q,onLeaveCancelled:F,onBeforeAppear:L,onAppear:K,onAfterAppear:U,onAppearCancelled:I}=e,x=String(a.key),C=An(t,a),P=(T,W)=>{T&&ka(T,s,9,W)},Z=(T,W)=>{const j=W[1];P(T,W),O(T)?T.every(G=>G.length<=1)&&j():T.length<=1&&j()},V={mode:d,persisted:o,beforeEnter(T){let W=l;if(!t.isMounted)if(n)W=L||l;else return;T._leaveCb&&T._leaveCb(!0);const j=C[x];j&&te(a,j)&&j.el._leaveCb&&j.el._leaveCb(),P(W,[T])},enter(T){let W=r,j=p,G=f;if(!t.isMounted)if(n)W=K||r,j=U||p,G=I||f;else return;let ba=!1;const Ta=T._enterCb=Aa=>{ba||(ba=!0,Aa?P(G,[T]):P(j,[T]),V.delayedLeave&&V.delayedLeave(),T._enterCb=void 0)};W?Z(W,[T,Ta]):Ta()},leave(T,W){const j=String(a.key);if(T._enterCb&&T._enterCb(!0),t.isUnmounting)return W();P(y,[T]);let G=!1;const ba=T._leaveCb=Ta=>{G||(G=!0,W(),Ta?P(F,[T]):P(q,[T]),T._leaveCb=void 0,C[j]===a&&delete C[j])};C[j]=a,g?Z(g,[T,ba]):ba()},clone(T){return It(T,e,t,s)}};return V}function yt(a){if(ct(a))return a=ja(a),a.children=null,a}function ws(a){return ct(a)?a.children?a.children[0]:void 0:a}function Ge(a,e){a.shapeFlag&6&&a.component?Ge(a.component.subTree,e):a.shapeFlag&128?(a.ssContent.transition=e.clone(a.ssContent),a.ssFallback.transition=e.clone(a.ssFallback)):a.transition=e}function Cn(a,e=!1,t){let s=[],n=0;for(let d=0;d<a.length;d++){let o=a[d];const l=t==null?o.key:String(t)+String(o.key!=null?o.key:d);o.type===qa?(o.patchFlag&128&&n++,s=s.concat(Cn(o.children,e,l))):(e||o.type!==Da)&&s.push(l!=null?ja(o,{key:l}):o)}if(n>1)for(let d=0;d<s.length;d++)s[d].patchFlag=-2;return s}const Ae=a=>!!a.type.__asyncLoader,ct=a=>a.type.__isKeepAlive,bo={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(a,{slots:e}){const t=ns(),s=t.ctx;if(!s.renderer)return()=>{const I=e.default&&e.default();return I&&I.length===1?I[0]:I};const n=new Map,d=new Set;let o=null;const l=t.suspense,{renderer:{p:r,m:p,um:f,o:{createElement:y}}}=s,g=y("div");s.activate=(I,x,C,P,Z)=>{const V=I.component;p(I,x,C,0,l),r(V.vnode,I,x,C,V,l,P,I.slotScopeIds,Z),ia(()=>{V.isDeactivated=!1,V.a&&xe(V.a);const T=I.props&&I.props.onVnodeMounted;T&&wa(T,V.parent,I)},l)},s.deactivate=I=>{const x=I.component;p(I,g,null,1,l),ia(()=>{x.da&&xe(x.da);const C=I.props&&I.props.onVnodeUnmounted;C&&wa(C,x.parent,I),x.isDeactivated=!0},l)};function q(I){_t(I),f(I,t,l,!0)}function F(I){n.forEach((x,C)=>{const P=Ot(x.type);P&&(!I||!I(P))&&L(C)})}function L(I){const x=n.get(I);!o||x.type!==o.type?q(x):o&&_t(o),n.delete(I),d.delete(I)}Te(()=>[a.include,a.exclude],([I,x])=>{I&&F(C=>we(I,C)),x&&F(C=>!we(x,C))},{flush:"post",deep:!0});let K=null;const U=()=>{K!=null&&n.set(K,bt(t.subTree))};return Zt(U),In(U),as(()=>{n.forEach(I=>{const{subTree:x,suspense:C}=t,P=bt(x);if(I.type===P.type){_t(P);const Z=P.component.da;Z&&ia(Z,C);return}q(I)})}),()=>{if(K=null,!e.default)return null;const I=e.default(),x=I[0];if(I.length>1)return o=null,I;if(!Nn(x)||!(x.shapeFlag&4)&&!(x.shapeFlag&128))return o=null,x;let C=bt(x);const P=C.type,Z=Ot(Ae(C)?C.type.__asyncResolved||{}:P),{include:V,exclude:T,max:W}=a;if(V&&(!Z||!we(V,Z))||T&&Z&&we(T,Z))return o=C,x;const j=C.key==null?P:C.key,G=n.get(j);return C.el&&(C=ja(C),x.shapeFlag&128&&(x.ssContent=C)),K=j,G?(C.el=G.el,C.component=G.component,C.transition&&Ge(C,C.transition),C.shapeFlag|=512,d.delete(j),d.add(j)):(d.add(j),W&&d.size>parseInt(W,10)&&L(d.values().next().value)),C.shapeFlag|=256,o=C,xn(x.type)?x:C}}},go=bo;function we(a,e){return O(a)?a.some(t=>we(t,e)):da(a)?a.split(",").includes(e):a.test?a.test(e):!1}function wo(a,e){qn(a,"a",e)}function xo(a,e){qn(a,"da",e)}function qn(a,e,t=ca){const s=a.__wdc||(a.__wdc=()=>{let n=t;for(;n;){if(n.isDeactivated)return;n=n.parent}return a()});if(it(e,s,t),t){let n=t.parent;for(;n&&n.parent;)ct(n.parent.vnode)&&ko(s,e,t,n),n=n.parent}}function ko(a,e,t,s){const n=it(e,a,s,!0);Sn(()=>{Nt(s[e],n)},t)}function _t(a){a.shapeFlag&=-257,a.shapeFlag&=-513}function bt(a){return a.shapeFlag&128?a.ssContent:a}function it(a,e,t=ca,s=!1){if(t){const n=t[a]||(t[a]=[]),d=e.__weh||(e.__weh=(...o)=>{if(t.isUnmounted)return;ye(),me(t);const l=ka(e,t,a,o);return de(),_e(),l});return s?n.unshift(d):n.push(d),d}}const Na=a=>(e,t=ca)=>(!Oe||a==="sp")&&it(a,(...s)=>e(...s),t),To=Na("bm"),Zt=Na("m"),Ao=Na("bu"),In=Na("u"),as=Na("bum"),Sn=Na("um"),Co=Na("sp"),qo=Na("rtg"),Io=Na("rtc");function So(a,e=ca){it("ec",a,e)}function Ya(a,e,t,s){const n=a.dirs,d=e&&e.dirs;for(let o=0;o<n.length;o++){const l=n[o];d&&(l.oldValue=d[o].value);let r=l.dir[s];r&&(ye(),ka(r,t,8,[a.el,l,a,e]),_e())}}const Mn="components",Ln=Symbol();function Mo(a){return da(a)?Lo(Mn,a,!1)||a:a||Ln}function Lo(a,e,t=!0,s=!1){const n=xa||ca;if(n){const d=n.type;if(a===Mn){const l=Ot(d,!1);if(l&&(l===e||l===Va(e)||l===st(Va(e))))return d}const o=xs(n[a]||d[a],e)||xs(n.appContext[a],e);return!o&&s?d:o}}function xs(a,e){return a&&(a[e]||a[Va(e)]||a[st(Va(e))])}const St=a=>a?Un(a)?ds(a)||a.proxy:St(a.parent):null,Ce=pa(Object.create(null),{$:a=>a,$el:a=>a.vnode.el,$data:a=>a.data,$props:a=>a.props,$attrs:a=>a.attrs,$slots:a=>a.slots,$refs:a=>a.refs,$parent:a=>St(a.parent),$root:a=>St(a.root),$emit:a=>a.emit,$options:a=>es(a),$forceUpdate:a=>a.f||(a.f=()=>Yt(a.update)),$nextTick:a=>a.n||(a.n=yn.bind(a.proxy)),$watch:a=>mo.bind(a)}),gt=(a,e)=>a!==z&&!a.__isScriptSetup&&B(a,e),Ro={get({_:a},e){const{ctx:t,setupState:s,data:n,props:d,accessCache:o,type:l,appContext:r}=a;let p;if(e[0]!=="$"){const q=o[e];if(q!==void 0)switch(q){case 1:return s[e];case 2:return n[e];case 4:return t[e];case 3:return d[e]}else{if(gt(s,e))return o[e]=1,s[e];if(n!==z&&B(n,e))return o[e]=2,n[e];if((p=a.propsOptions[0])&&B(p,e))return o[e]=3,d[e];if(t!==z&&B(t,e))return o[e]=4,t[e];Mt&&(o[e]=0)}}const f=Ce[e];let y,g;if(f)return e==="$attrs"&&_a(a,"get",e),f(a);if((y=l.__cssModules)&&(y=y[e]))return y;if(t!==z&&B(t,e))return o[e]=4,t[e];if(g=r.config.globalProperties,B(g,e))return g[e]},set({_:a},e,t){const{data:s,setupState:n,ctx:d}=a;return gt(n,e)?(n[e]=t,!0):s!==z&&B(s,e)?(s[e]=t,!0):B(a.props,e)||e[0]==="$"&&e.slice(1)in a?!1:(d[e]=t,!0)},has({_:{data:a,setupState:e,accessCache:t,ctx:s,appContext:n,propsOptions:d}},o){let l;return!!t[o]||a!==z&&B(a,o)||gt(e,o)||(l=d[0])&&B(l,o)||B(s,o)||B(Ce,o)||B(n.config.globalProperties,o)},defineProperty(a,e,t){return t.get!=null?a._.accessCache[e]=0:B(t,"value")&&this.set(a,e,t.value,null),Reflect.defineProperty(a,e,t)}};let Mt=!0;function Eo(a){const e=es(a),t=a.proxy,s=a.ctx;Mt=!1,e.beforeCreate&&ks(e.beforeCreate,a,"bc");const{data:n,computed:d,methods:o,watch:l,provide:r,inject:p,created:f,beforeMount:y,mounted:g,beforeUpdate:q,updated:F,activated:L,deactivated:K,beforeDestroy:U,beforeUnmount:I,destroyed:x,unmounted:C,render:P,renderTracked:Z,renderTriggered:V,errorCaptured:T,serverPrefetch:W,expose:j,inheritAttrs:G,components:ba,directives:Ta,filters:Aa}=e;if(p&&Oo(p,s,null,a.appContext.config.unwrapInjectedRef),o)for(const aa in o){const Q=o[aa];D(Q)&&(s[aa]=Q.bind(t))}if(n){const aa=n.call(t,t);ea(aa)&&(a.data=Fe(aa))}if(Mt=!0,d)for(const aa in d){const Q=d[aa],za=D(Q)?Q.bind(t,t):D(Q.get)?Q.get.bind(t,t):Ma,Pe=!D(Q)&&D(Q.set)?Q.set.bind(t):Ma,Ga=Kn({get:za,set:Pe});Object.defineProperty(s,aa,{enumerable:!0,configurable:!0,get:()=>Ga.value,set:La=>Ga.value=La})}if(l)for(const aa in l)Rn(l[aa],s,t,aa);if(r){const aa=D(r)?r.call(t):r;Reflect.ownKeys(aa).forEach(Q=>{vo(Q,aa[Q])})}f&&ks(f,a,"c");function fa(aa,Q){O(Q)?Q.forEach(za=>aa(za.bind(t))):Q&&aa(Q.bind(t))}if(fa(To,y),fa(Zt,g),fa(Ao,q),fa(In,F),fa(wo,L),fa(xo,K),fa(So,T),fa(Io,Z),fa(qo,V),fa(as,I),fa(Sn,C),fa(Co,W),O(j))if(j.length){const aa=a.exposed||(a.exposed={});j.forEach(Q=>{Object.defineProperty(aa,Q,{get:()=>t[Q],set:za=>t[Q]=za})})}else a.exposed||(a.exposed={});P&&a.render===Ma&&(a.render=P),G!=null&&(a.inheritAttrs=G),ba&&(a.components=ba),Ta&&(a.directives=Ta)}function Oo(a,e,t=Ma,s=!1){O(a)&&(a=Lt(a));for(const n in a){const d=a[n];let o;ea(d)?"default"in d?o=ke(d.from||n,d.default,!0):o=ke(d.from||n):o=ke(d),ta(o)&&s?Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:()=>o.value,set:l=>o.value=l}):e[n]=o}}function ks(a,e,t){ka(O(a)?a.map(s=>s.bind(e.proxy)):a.bind(e.proxy),e,t)}function Rn(a,e,t,s){const n=s.includes(".")?Tn(t,s):()=>t[s];if(da(a)){const d=e[a];D(d)&&Te(n,d)}else if(D(a))Te(n,a.bind(t));else if(ea(a))if(O(a))a.forEach(d=>Rn(d,e,t,s));else{const d=D(a.handler)?a.handler.bind(t):e[a.handler];D(d)&&Te(n,d,a)}}function es(a){const e=a.type,{mixins:t,extends:s}=e,{mixins:n,optionsCache:d,config:{optionMergeStrategies:o}}=a.appContext,l=d.get(e);let r;return l?r=l:!n.length&&!t&&!s?r=e:(r={},n.length&&n.forEach(p=>Ye(r,p,o,!0)),Ye(r,e,o)),ea(e)&&d.set(e,r),r}function Ye(a,e,t,s=!1){const{mixins:n,extends:d}=e;d&&Ye(a,d,t,!0),n&&n.forEach(o=>Ye(a,o,t,!0));for(const o in e)if(!(s&&o==="expose")){const l=Vo[o]||t&&t[o];a[o]=l?l(a[o],e[o]):e[o]}return a}const Vo={data:Ts,props:ae,emits:ae,methods:ae,computed:ae,beforeCreate:va,created:va,beforeMount:va,mounted:va,beforeUpdate:va,updated:va,beforeDestroy:va,beforeUnmount:va,destroyed:va,unmounted:va,activated:va,deactivated:va,errorCaptured:va,serverPrefetch:va,components:ae,directives:ae,watch:Po,provide:Ts,inject:Fo};function Ts(a,e){return e?a?function(){return pa(D(a)?a.call(this,this):a,D(e)?e.call(this,this):e)}:e:a}function Fo(a,e){return ae(Lt(a),Lt(e))}function Lt(a){if(O(a)){const e={};for(let t=0;t<a.length;t++)e[a[t]]=a[t];return e}return a}function va(a,e){return a?[...new Set([].concat(a,e))]:e}function ae(a,e){return a?pa(pa(Object.create(null),a),e):e}function Po(a,e){if(!a)return e;if(!e)return a;const t=pa(Object.create(null),a);for(const s in e)t[s]=va(a[s],e[s]);return t}function Do(a,e,t,s=!1){const n={},d={};Qe(d,pt,1),a.propsDefaults=Object.create(null),En(a,e,n,d);for(const o in a.propsOptions[0])o in n||(n[o]=void 0);t?a.props=s?n:Ud(n):a.type.props?a.props=n:a.props=d,a.attrs=d}function $o(a,e,t,s){const{props:n,attrs:d,vnode:{patchFlag:o}}=a,l=H(n),[r]=a.propsOptions;let p=!1;if((s||o>0)&&!(o&16)){if(o&8){const f=a.vnode.dynamicProps;for(let y=0;y<f.length;y++){let g=f[y];if(ot(a.emitsOptions,g))continue;const q=e[g];if(r)if(B(d,g))q!==d[g]&&(d[g]=q,p=!0);else{const F=Va(g);n[F]=Rt(r,l,F,q,a,!1)}else q!==d[g]&&(d[g]=q,p=!0)}}}else{En(a,e,n,d)&&(p=!0);let f;for(const y in l)(!e||!B(e,y)&&((f=he(y))===y||!B(e,f)))&&(r?t&&(t[y]!==void 0||t[f]!==void 0)&&(n[y]=Rt(r,l,y,void 0,a,!0)):delete n[y]);if(d!==l)for(const y in d)(!e||!B(e,y))&&(delete d[y],p=!0)}p&&$a(a,"set","$attrs")}function En(a,e,t,s){const[n,d]=a.propsOptions;let o=!1,l;if(e)for(let r in e){if(We(r))continue;const p=e[r];let f;n&&B(n,f=Va(r))?!d||!d.includes(f)?t[f]=p:(l||(l={}))[f]=p:ot(a.emitsOptions,r)||(!(r in s)||p!==s[r])&&(s[r]=p,o=!0)}if(d){const r=H(t),p=l||z;for(let f=0;f<d.length;f++){const y=d[f];t[y]=Rt(n,r,y,p[y],a,!B(p,y))}}return o}function Rt(a,e,t,s,n,d){const o=a[t];if(o!=null){const l=B(o,"default");if(l&&s===void 0){const r=o.default;if(o.type!==Function&&D(r)){const{propsDefaults:p}=n;t in p?s=p[t]:(me(n),s=p[t]=r.call(null,e),de())}else s=r}o[0]&&(d&&!l?s=!1:o[1]&&(s===""||s===he(t))&&(s=!0))}return s}function On(a,e,t=!1){const s=e.propsCache,n=s.get(a);if(n)return n;const d=a.props,o={},l=[];let r=!1;if(!D(a)){const f=y=>{r=!0;const[g,q]=On(y,e,!0);pa(o,g),q&&l.push(...q)};!t&&e.mixins.length&&e.mixins.forEach(f),a.extends&&f(a.extends),a.mixins&&a.mixins.forEach(f)}if(!d&&!r)return ea(a)&&s.set(a,re),re;if(O(d))for(let f=0;f<d.length;f++){const y=Va(d[f]);As(y)&&(o[y]=z)}else if(d)for(const f in d){const y=Va(f);if(As(y)){const g=d[f],q=o[y]=O(g)||D(g)?{type:g}:Object.assign({},g);if(q){const F=Is(Boolean,q.type),L=Is(String,q.type);q[0]=F>-1,q[1]=L<0||F<L,(F>-1||B(q,"default"))&&l.push(y)}}}const p=[o,l];return ea(a)&&s.set(a,p),p}function As(a){return a[0]!=="$"}function Cs(a){const e=a&&a.toString().match(/^\s*function (\w+)/);return e?e[1]:a===null?"null":""}function qs(a,e){return Cs(a)===Cs(e)}function Is(a,e){return O(e)?e.findIndex(t=>qs(t,a)):D(e)&&qs(e,a)?0:-1}const Vn=a=>a[0]==="_"||a==="$stable",ts=a=>O(a)?a.map(Ea):[Ea(a)],jo=(a,e,t)=>{if(e._n)return e;const s=co((...n)=>ts(e(...n)),t);return s._c=!1,s},Fn=(a,e,t)=>{const s=a._ctx;for(const n in a){if(Vn(n))continue;const d=a[n];if(D(d))e[n]=jo(n,d,s);else if(d!=null){const o=ts(d);e[n]=()=>o}}},Pn=(a,e)=>{const t=ts(e);a.slots.default=()=>t},No=(a,e)=>{if(a.vnode.shapeFlag&32){const t=e._;t?(a.slots=H(e),Qe(e,"_",t)):Fn(e,a.slots={})}else a.slots={},e&&Pn(a,e);Qe(a.slots,pt,1)},Bo=(a,e,t)=>{const{vnode:s,slots:n}=a;let d=!0,o=z;if(s.shapeFlag&32){const l=e._;l?t&&l===1?d=!1:(pa(n,e),!t&&l===1&&delete n._):(d=!e.$stable,Fn(e,n)),o=e}else e&&(Pn(a,e),o={default:1});if(d)for(const l in n)!Vn(l)&&!(l in o)&&delete n[l]};function Dn(){return{app:null,config:{isNativeTag:id,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Ho=0;function Uo(a,e){return function(s,n=null){D(s)||(s=Object.assign({},s)),n!=null&&!ea(n)&&(n=null);const d=Dn(),o=new Set;let l=!1;const r=d.app={_uid:Ho++,_component:s,_props:n,_container:null,_context:d,_instance:null,version:il,get config(){return d.config},set config(p){},use(p,...f){return o.has(p)||(p&&D(p.install)?(o.add(p),p.install(r,...f)):D(p)&&(o.add(p),p(r,...f))),r},mixin(p){return d.mixins.includes(p)||d.mixins.push(p),r},component(p,f){return f?(d.components[p]=f,r):d.components[p]},directive(p,f){return f?(d.directives[p]=f,r):d.directives[p]},mount(p,f,y){if(!l){const g=N(s,n);return g.appContext=d,f&&e?e(g,p):a(g,p,y),l=!0,r._container=p,p.__vue_app__=r,ds(g.component)||g.component.proxy}},unmount(){l&&(a(null,r._container),delete r._container.__vue_app__)},provide(p,f){return d.provides[p]=f,r}};return r}}function Et(a,e,t,s,n=!1){if(O(a)){a.forEach((g,q)=>Et(g,e&&(O(e)?e[q]:e),t,s,n));return}if(Ae(s)&&!n)return;const d=s.shapeFlag&4?ds(s.component)||s.component.proxy:s.el,o=n?null:d,{i:l,r}=a,p=e&&e.r,f=l.refs===z?l.refs={}:l.refs,y=l.setupState;if(p!=null&&p!==r&&(da(p)?(f[p]=null,B(y,p)&&(y[p]=null)):ta(p)&&(p.value=null)),D(r))Ja(r,l,12,[o,f]);else{const g=da(r),q=ta(r);if(g||q){const F=()=>{if(a.f){const L=g?B(y,r)?y[r]:f[r]:r.value;n?O(L)&&Nt(L,d):O(L)?L.includes(d)||L.push(d):g?(f[r]=[d],B(y,r)&&(y[r]=f[r])):(r.value=[d],a.k&&(f[a.k]=r.value))}else g?(f[r]=o,B(y,r)&&(y[r]=o)):q&&(r.value=o,a.k&&(f[a.k]=o))};o?(F.id=-1,ia(F,t)):F()}}}const ia=fo;function Wo(a){return Ko(a)}function Ko(a,e){const t=md();t.__VUE__=!0;const{insert:s,remove:n,patchProp:d,createElement:o,createText:l,createComment:r,setText:p,setElementText:f,parentNode:y,nextSibling:g,setScopeId:q=Ma,insertStaticContent:F}=a,L=(c,i,u,m=null,v=null,b=null,k=!1,_=null,w=!!i.dynamicChildren)=>{if(c===i)return;c&&!te(c,i)&&(m=De(c),La(c,v,b,!0),c=null),i.patchFlag===-2&&(w=!1,i.dynamicChildren=null);const{type:h,ref:S,shapeFlag:A}=i;switch(h){case rt:K(c,i,u,m);break;case Da:U(c,i,u,m);break;case Ke:c==null&&I(i,u,m,k);break;case qa:ba(c,i,u,m,v,b,k,_,w);break;default:A&1?P(c,i,u,m,v,b,k,_,w):A&6?Ta(c,i,u,m,v,b,k,_,w):(A&64||A&128)&&h.process(c,i,u,m,v,b,k,_,w,oe)}S!=null&&v&&Et(S,c&&c.ref,b,i||c,!i)},K=(c,i,u,m)=>{if(c==null)s(i.el=l(i.children),u,m);else{const v=i.el=c.el;i.children!==c.children&&p(v,i.children)}},U=(c,i,u,m)=>{c==null?s(i.el=r(i.children||""),u,m):i.el=c.el},I=(c,i,u,m)=>{[c.el,c.anchor]=F(c.children,i,u,m,c.el,c.anchor)},x=({el:c,anchor:i},u,m)=>{let v;for(;c&&c!==i;)v=g(c),s(c,u,m),c=v;s(i,u,m)},C=({el:c,anchor:i})=>{let u;for(;c&&c!==i;)u=g(c),n(c),c=u;n(i)},P=(c,i,u,m,v,b,k,_,w)=>{k=k||i.type==="svg",c==null?Z(i,u,m,v,b,k,_,w):W(c,i,v,b,k,_,w)},Z=(c,i,u,m,v,b,k,_)=>{let w,h;const{type:S,props:A,shapeFlag:M,transition:E,dirs:$}=c;if(w=c.el=o(c.type,b,A&&A.is,A),M&8?f(w,c.children):M&16&&T(c.children,w,null,m,v,b&&S!=="foreignObject",k,_),$&&Ya(c,null,m,"created"),A){for(const J in A)J!=="value"&&!We(J)&&d(w,J,null,A[J],b,c.children,m,v,Fa);"value"in A&&d(w,"value",null,A.value),(h=A.onVnodeBeforeMount)&&wa(h,m,c)}V(w,c,c.scopeId,k,m),$&&Ya(c,null,m,"beforeMount");const X=(!v||v&&!v.pendingBranch)&&E&&!E.persisted;X&&E.beforeEnter(w),s(w,i,u),((h=A&&A.onVnodeMounted)||X||$)&&ia(()=>{h&&wa(h,m,c),X&&E.enter(w),$&&Ya(c,null,m,"mounted")},v)},V=(c,i,u,m,v)=>{if(u&&q(c,u),m)for(let b=0;b<m.length;b++)q(c,m[b]);if(v){let b=v.subTree;if(i===b){const k=v.vnode;V(c,k,k.scopeId,k.slotScopeIds,v.parent)}}},T=(c,i,u,m,v,b,k,_,w=0)=>{for(let h=w;h<c.length;h++){const S=c[h]=_?Ha(c[h]):Ea(c[h]);L(null,S,i,u,m,v,b,k,_)}},W=(c,i,u,m,v,b,k)=>{const _=i.el=c.el;let{patchFlag:w,dynamicChildren:h,dirs:S}=i;w|=c.patchFlag&16;const A=c.props||z,M=i.props||z;let E;u&&Za(u,!1),(E=M.onVnodeBeforeUpdate)&&wa(E,u,i,c),S&&Ya(i,c,u,"beforeUpdate"),u&&Za(u,!0);const $=v&&i.type!=="foreignObject";if(h?j(c.dynamicChildren,h,_,u,m,$,b):k||Q(c,i,_,null,u,m,$,b,!1),w>0){if(w&16)G(_,i,A,M,u,m,v);else if(w&2&&A.class!==M.class&&d(_,"class",null,M.class,v),w&4&&d(_,"style",A.style,M.style,v),w&8){const X=i.dynamicProps;for(let J=0;J<X.length;J++){const na=X[J],Ca=A[na],le=M[na];(le!==Ca||na==="value")&&d(_,na,Ca,le,v,c.children,u,m,Fa)}}w&1&&c.children!==i.children&&f(_,i.children)}else!k&&h==null&&G(_,i,A,M,u,m,v);((E=M.onVnodeUpdated)||S)&&ia(()=>{E&&wa(E,u,i,c),S&&Ya(i,c,u,"updated")},m)},j=(c,i,u,m,v,b,k)=>{for(let _=0;_<i.length;_++){const w=c[_],h=i[_],S=w.el&&(w.type===qa||!te(w,h)||w.shapeFlag&70)?y(w.el):u;L(w,h,S,null,m,v,b,k,!0)}},G=(c,i,u,m,v,b,k)=>{if(u!==m){if(u!==z)for(const _ in u)!We(_)&&!(_ in m)&&d(c,_,u[_],null,k,i.children,v,b,Fa);for(const _ in m){if(We(_))continue;const w=m[_],h=u[_];w!==h&&_!=="value"&&d(c,_,h,w,k,i.children,v,b,Fa)}"value"in m&&d(c,"value",u.value,m.value)}},ba=(c,i,u,m,v,b,k,_,w)=>{const h=i.el=c?c.el:l(""),S=i.anchor=c?c.anchor:l("");let{patchFlag:A,dynamicChildren:M,slotScopeIds:E}=i;E&&(_=_?_.concat(E):E),c==null?(s(h,u,m),s(S,u,m),T(i.children,u,S,v,b,k,_,w)):A>0&&A&64&&M&&c.dynamicChildren?(j(c.dynamicChildren,M,u,v,b,k,_),(i.key!=null||v&&i===v.subTree)&&$n(c,i,!0)):Q(c,i,u,S,v,b,k,_,w)},Ta=(c,i,u,m,v,b,k,_,w)=>{i.slotScopeIds=_,c==null?i.shapeFlag&512?v.ctx.activate(i,u,m,k,w):Aa(i,u,m,v,b,k,w):ua(c,i,w)},Aa=(c,i,u,m,v,b,k)=>{const _=c.component=el(c,m,v);if(ct(c)&&(_.ctx.renderer=oe),tl(_),_.asyncDep){if(v&&v.registerDep(_,fa),!c.el){const w=_.subTree=N(Da);U(null,w,i,u)}return}fa(_,c,i,u,v,b,k)},ua=(c,i,u)=>{const m=i.component=c.component;if(po(c,i,u))if(m.asyncDep&&!m.asyncResolved){aa(m,i,u);return}else m.next=i,eo(m.update),m.update();else i.el=c.el,m.vnode=i},fa=(c,i,u,m,v,b,k)=>{const _=()=>{if(c.isMounted){let{next:S,bu:A,u:M,parent:E,vnode:$}=c,X=S,J;Za(c,!1),S?(S.el=$.el,aa(c,S,k)):S=$,A&&xe(A),(J=S.props&&S.props.onVnodeBeforeUpdate)&&wa(J,E,S,$),Za(c,!0);const na=ht(c),Ca=c.subTree;c.subTree=na,L(Ca,na,y(Ca.el),De(Ca),c,v,b),S.el=na.el,X===null&&uo(c,na.el),M&&ia(M,v),(J=S.props&&S.props.onVnodeUpdated)&&ia(()=>wa(J,E,S,$),v)}else{let S;const{el:A,props:M}=i,{bm:E,m:$,parent:X}=c,J=Ae(i);if(Za(c,!1),E&&xe(E),!J&&(S=M&&M.onVnodeBeforeMount)&&wa(S,X,i),Za(c,!0),A&&vt){const na=()=>{c.subTree=ht(c),vt(A,c.subTree,c,v,null)};J?i.type.__asyncLoader().then(()=>!c.isUnmounted&&na()):na()}else{const na=c.subTree=ht(c);L(null,na,u,m,c,v,b),i.el=na.el}if($&&ia($,v),!J&&(S=M&&M.onVnodeMounted)){const na=i;ia(()=>wa(S,X,na),v)}(i.shapeFlag&256||X&&Ae(X.vnode)&&X.vnode.shapeFlag&256)&&c.a&&ia(c.a,v),c.isMounted=!0,i=u=m=null}},w=c.effect=new Wt(_,()=>Yt(h),c.scope),h=c.update=()=>w.run();h.id=c.uid,Za(c,!0),h()},aa=(c,i,u)=>{i.component=c;const m=c.vnode.props;c.vnode=i,c.next=null,$o(c,i.props,m,u),Bo(c,i.children,u),ye(),bs(),_e()},Q=(c,i,u,m,v,b,k,_,w=!1)=>{const h=c&&c.children,S=c?c.shapeFlag:0,A=i.children,{patchFlag:M,shapeFlag:E}=i;if(M>0){if(M&128){Pe(h,A,u,m,v,b,k,_,w);return}else if(M&256){za(h,A,u,m,v,b,k,_,w);return}}E&8?(S&16&&Fa(h,v,b),A!==h&&f(u,A)):S&16?E&16?Pe(h,A,u,m,v,b,k,_,w):Fa(h,v,b,!0):(S&8&&f(u,""),E&16&&T(A,u,m,v,b,k,_,w))},za=(c,i,u,m,v,b,k,_,w)=>{c=c||re,i=i||re;const h=c.length,S=i.length,A=Math.min(h,S);let M;for(M=0;M<A;M++){const E=i[M]=w?Ha(i[M]):Ea(i[M]);L(c[M],E,u,null,v,b,k,_,w)}h>S?Fa(c,v,b,!0,!1,A):T(i,u,m,v,b,k,_,w,A)},Pe=(c,i,u,m,v,b,k,_,w)=>{let h=0;const S=i.length;let A=c.length-1,M=S-1;for(;h<=A&&h<=M;){const E=c[h],$=i[h]=w?Ha(i[h]):Ea(i[h]);if(te(E,$))L(E,$,u,null,v,b,k,_,w);else break;h++}for(;h<=A&&h<=M;){const E=c[A],$=i[M]=w?Ha(i[M]):Ea(i[M]);if(te(E,$))L(E,$,u,null,v,b,k,_,w);else break;A--,M--}if(h>A){if(h<=M){const E=M+1,$=E<S?i[E].el:m;for(;h<=M;)L(null,i[h]=w?Ha(i[h]):Ea(i[h]),u,$,v,b,k,_,w),h++}}else if(h>M)for(;h<=A;)La(c[h],v,b,!0),h++;else{const E=h,$=h,X=new Map;for(h=$;h<=M;h++){const ha=i[h]=w?Ha(i[h]):Ea(i[h]);ha.key!=null&&X.set(ha.key,h)}let J,na=0;const Ca=M-$+1;let le=!1,cs=0;const be=new Array(Ca);for(h=0;h<Ca;h++)be[h]=0;for(h=E;h<=A;h++){const ha=c[h];if(na>=Ca){La(ha,v,b,!0);continue}let Ra;if(ha.key!=null)Ra=X.get(ha.key);else for(J=$;J<=M;J++)if(be[J-$]===0&&te(ha,i[J])){Ra=J;break}Ra===void 0?La(ha,v,b,!0):(be[Ra-$]=h+1,Ra>=cs?cs=Ra:le=!0,L(ha,i[Ra],u,null,v,b,k,_,w),na++)}const is=le?Jo(be):re;for(J=is.length-1,h=Ca-1;h>=0;h--){const ha=$+h,Ra=i[ha],rs=ha+1<S?i[ha+1].el:m;be[h]===0?L(null,Ra,u,rs,v,b,k,_,w):le&&(J<0||h!==is[J]?Ga(Ra,u,rs,2):J--)}}},Ga=(c,i,u,m,v=null)=>{const{el:b,type:k,transition:_,children:w,shapeFlag:h}=c;if(h&6){Ga(c.component.subTree,i,u,m);return}if(h&128){c.suspense.move(i,u,m);return}if(h&64){k.move(c,i,u,oe);return}if(k===qa){s(b,i,u);for(let A=0;A<w.length;A++)Ga(w[A],i,u,m);s(c.anchor,i,u);return}if(k===Ke){x(c,i,u);return}if(m!==2&&h&1&&_)if(m===0)_.beforeEnter(b),s(b,i,u),ia(()=>_.enter(b),v);else{const{leave:A,delayLeave:M,afterLeave:E}=_,$=()=>s(b,i,u),X=()=>{A(b,()=>{$(),E&&E()})};M?M(b,$,X):X()}else s(b,i,u)},La=(c,i,u,m=!1,v=!1)=>{const{type:b,props:k,ref:_,children:w,dynamicChildren:h,shapeFlag:S,patchFlag:A,dirs:M}=c;if(_!=null&&Et(_,null,u,c,!0),S&256){i.ctx.deactivate(c);return}const E=S&1&&M,$=!Ae(c);let X;if($&&(X=k&&k.onVnodeBeforeUnmount)&&wa(X,i,c),S&6)ed(c.component,u,m);else{if(S&128){c.suspense.unmount(u,m);return}E&&Ya(c,null,i,"beforeUnmount"),S&64?c.type.remove(c,i,u,v,oe,m):h&&(b!==qa||A>0&&A&64)?Fa(h,i,u,!1,!0):(b===qa&&A&384||!v&&S&16)&&Fa(w,i,u),m&&os(c)}($&&(X=k&&k.onVnodeUnmounted)||E)&&ia(()=>{X&&wa(X,i,c),E&&Ya(c,null,i,"unmounted")},u)},os=c=>{const{type:i,el:u,anchor:m,transition:v}=c;if(i===qa){ad(u,m);return}if(i===Ke){C(c);return}const b=()=>{n(u),v&&!v.persisted&&v.afterLeave&&v.afterLeave()};if(c.shapeFlag&1&&v&&!v.persisted){const{leave:k,delayLeave:_}=v,w=()=>k(u,b);_?_(c.el,b,w):w()}else b()},ad=(c,i)=>{let u;for(;c!==i;)u=g(c),n(c),c=u;n(i)},ed=(c,i,u)=>{const{bum:m,scope:v,update:b,subTree:k,um:_}=c;m&&xe(m),v.stop(),b&&(b.active=!1,La(k,c,i,u)),_&&ia(_,i),ia(()=>{c.isUnmounted=!0},i),i&&i.pendingBranch&&!i.isUnmounted&&c.asyncDep&&!c.asyncResolved&&c.suspenseId===i.pendingId&&(i.deps--,i.deps===0&&i.resolve())},Fa=(c,i,u,m=!1,v=!1,b=0)=>{for(let k=b;k<c.length;k++)La(c[k],i,u,m,v)},De=c=>c.shapeFlag&6?De(c.component.subTree):c.shapeFlag&128?c.suspense.next():g(c.anchor||c.el),ls=(c,i,u)=>{c==null?i._vnode&&La(i._vnode,null,null,!0):L(i._vnode||null,c,i,null,null,null,u),bs(),bn(),i._vnode=c},oe={p:L,um:La,m:Ga,r:os,mt:Aa,mc:T,pc:Q,pbc:j,n:De,o:a};let ft,vt;return e&&([ft,vt]=e(oe)),{render:ls,hydrate:ft,createApp:Uo(ls,ft)}}function Za({effect:a,update:e},t){a.allowRecurse=e.allowRecurse=t}function $n(a,e,t=!1){const s=a.children,n=e.children;if(O(s)&&O(n))for(let d=0;d<s.length;d++){const o=s[d];let l=n[d];l.shapeFlag&1&&!l.dynamicChildren&&((l.patchFlag<=0||l.patchFlag===32)&&(l=n[d]=Ha(n[d]),l.el=o.el),t||$n(o,l)),l.type===rt&&(l.el=o.el)}}function Jo(a){const e=a.slice(),t=[0];let s,n,d,o,l;const r=a.length;for(s=0;s<r;s++){const p=a[s];if(p!==0){if(n=t[t.length-1],a[n]<p){e[s]=n,t.push(s);continue}for(d=0,o=t.length-1;d<o;)l=d+o>>1,a[t[l]]<p?d=l+1:o=l;p<a[t[d]]&&(d>0&&(e[s]=t[d-1]),t[d]=s)}}for(d=t.length,o=t[d-1];d-- >0;)t[d]=o,o=e[o];return t}const Qo=a=>a.__isTeleport,qa=Symbol(void 0),rt=Symbol(void 0),Da=Symbol(void 0),Ke=Symbol(void 0),qe=[];let Sa=null;function sa(a=!1){qe.push(Sa=a?null:[])}function Xo(){qe.pop(),Sa=qe[qe.length-1]||null}let Ee=1;function Ss(a){Ee+=a}function jn(a){return a.dynamicChildren=Ee>0?Sa||re:null,Xo(),Ee>0&&Sa&&Sa.push(a),a}function oa(a,e,t,s,n,d){return jn(R(a,e,t,s,n,d,!0))}function Ms(a,e,t,s,n){return jn(N(a,e,t,s,n,!0))}function Nn(a){return a?a.__v_isVNode===!0:!1}function te(a,e){return a.type===e.type&&a.key===e.key}const pt="__vInternal",Bn=({key:a})=>a??null,Je=({ref:a,ref_key:e,ref_for:t})=>a!=null?da(a)||ta(a)||D(a)?{i:xa,r:a,k:e,f:!!t}:a:null;function R(a,e=null,t=null,s=0,n=null,d=a===qa?0:1,o=!1,l=!1){const r={__v_isVNode:!0,__v_skip:!0,type:a,props:e,key:e&&Bn(e),ref:e&&Je(e),scopeId:lt,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:d,patchFlag:s,dynamicProps:n,dynamicChildren:null,appContext:null,ctx:xa};return l?(ss(r,t),d&128&&a.normalize(r)):t&&(r.shapeFlag|=da(t)?8:16),Ee>0&&!o&&Sa&&(r.patchFlag>0||d&6)&&r.patchFlag!==32&&Sa.push(r),r}const N=zo;function zo(a,e=null,t=null,s=0,n=null,d=!1){if((!a||a===Ln)&&(a=Da),Nn(a)){const l=ja(a,e,!0);return t&&ss(l,t),Ee>0&&!d&&Sa&&(l.shapeFlag&6?Sa[Sa.indexOf(a)]=l:Sa.push(l)),l.patchFlag|=-2,l}if(ol(a)&&(a=a.__vccOpts),e){e=Go(e);let{class:l,style:r}=e;l&&!da(l)&&(e.class=Ze(l)),ea(r)&&(cn(r)&&!O(r)&&(r=pa({},r)),e.style=$t(r))}const o=da(a)?1:xn(a)?128:Qo(a)?64:ea(a)?4:D(a)?2:0;return R(a,e,t,s,n,o,d,!0)}function Go(a){return a?cn(a)||pt in a?pa({},a):a:null}function ja(a,e,t=!1){const{props:s,ref:n,patchFlag:d,children:o}=a,l=e?Yo(s||{},e):s;return{__v_isVNode:!0,__v_skip:!0,type:a.type,props:l,key:l&&Bn(l),ref:e&&e.ref?t&&n?O(n)?n.concat(Je(e)):[n,Je(e)]:Je(e):n,scopeId:a.scopeId,slotScopeIds:a.slotScopeIds,children:o,target:a.target,targetAnchor:a.targetAnchor,staticCount:a.staticCount,shapeFlag:a.shapeFlag,patchFlag:e&&a.type!==qa?d===-1?16:d|16:d,dynamicProps:a.dynamicProps,dynamicChildren:a.dynamicChildren,appContext:a.appContext,dirs:a.dirs,transition:a.transition,component:a.component,suspense:a.suspense,ssContent:a.ssContent&&ja(a.ssContent),ssFallback:a.ssFallback&&ja(a.ssFallback),el:a.el,anchor:a.anchor,ctx:a.ctx}}function Hn(a=" ",e=0){return N(rt,null,a,e)}function ma(a,e){const t=N(Ke,null,a);return t.staticCount=e,t}function Ea(a){return a==null||typeof a=="boolean"?N(Da):O(a)?N(qa,null,a.slice()):typeof a=="object"?Ha(a):N(rt,null,String(a))}function Ha(a){return a.el===null&&a.patchFlag!==-1||a.memo?a:ja(a)}function ss(a,e){let t=0;const{shapeFlag:s}=a;if(e==null)e=null;else if(O(e))t=16;else if(typeof e=="object")if(s&65){const n=e.default;n&&(n._c&&(n._d=!1),ss(a,n()),n._c&&(n._d=!0));return}else{t=32;const n=e._;!n&&!(pt in e)?e._ctx=xa:n===3&&xa&&(xa.slots._===1?e._=1:(e._=2,a.patchFlag|=1024))}else D(e)?(e={default:e,_ctx:xa},t=32):(e=String(e),s&64?(t=16,e=[Hn(e)]):t=8);a.children=e,a.shapeFlag|=t}function Yo(...a){const e={};for(let t=0;t<a.length;t++){const s=a[t];for(const n in s)if(n==="class")e.class!==s.class&&(e.class=Ze([e.class,s.class]));else if(n==="style")e.style=$t([e.style,s.style]);else if(at(n)){const d=e[n],o=s[n];o&&d!==o&&!(O(d)&&d.includes(o))&&(e[n]=d?[].concat(d,o):o)}else n!==""&&(e[n]=s[n])}return e}function wa(a,e,t,s=null){ka(a,e,7,[t,s])}const Zo=Dn();let al=0;function el(a,e,t){const s=a.type,n=(e?e.appContext:a.appContext)||Zo,d={uid:al++,vnode:a,type:s,parent:e,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new Xs(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:On(s,n),emitsOptions:wn(s,n),emit:null,emitted:null,propsDefaults:z,inheritAttrs:s.inheritAttrs,ctx:z,data:z,props:z,attrs:z,slots:z,refs:z,setupState:z,setupContext:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return d.ctx={_:d},d.root=e?e.root:d,d.emit=no.bind(null,d),a.ce&&a.ce(d),d}let ca=null;const ns=()=>ca||xa,me=a=>{ca=a,a.scope.on()},de=()=>{ca&&ca.scope.off(),ca=null};function Un(a){return a.vnode.shapeFlag&4}let Oe=!1;function tl(a,e=!1){Oe=e;const{props:t,children:s}=a.vnode,n=Un(a);Do(a,t,n,e),No(a,s);const d=n?sl(a,e):void 0;return Oe=!1,d}function sl(a,e){const t=a.type;a.accessCache=Object.create(null),a.proxy=ve(new Proxy(a.ctx,Ro));const{setup:s}=t;if(s){const n=a.setupContext=s.length>1?dl(a):null;me(a),ye();const d=Ja(s,a,0,[a.props,n]);if(_e(),de(),Ws(d)){if(d.then(de,de),e)return d.then(o=>{Ls(a,o,e)}).catch(o=>{dt(o,a,0)});a.asyncDep=d}else Ls(a,d,e)}else Wn(a,e)}function Ls(a,e,t){D(e)?a.type.__ssrInlineRender?a.ssrRender=e:a.render=e:ea(e)&&(a.setupState=vn(e)),Wn(a,t)}let Rs;function Wn(a,e,t){const s=a.type;if(!a.render){if(!e&&Rs&&!s.render){const n=s.template||es(a).template;if(n){const{isCustomElement:d,compilerOptions:o}=a.appContext.config,{delimiters:l,compilerOptions:r}=s,p=pa(pa({isCustomElement:d,delimiters:l},o),r);s.render=Rs(n,p)}}a.render=s.render||Ma}me(a),ye(),Eo(a),_e(),de()}function nl(a){return new Proxy(a.attrs,{get(e,t){return _a(a,"get","$attrs"),e[t]}})}function dl(a){const e=s=>{a.exposed=s||{}};let t;return{get attrs(){return t||(t=nl(a))},slots:a.slots,emit:a.emit,expose:e}}function ds(a){if(a.exposed)return a.exposeProxy||(a.exposeProxy=new Proxy(vn(ve(a.exposed)),{get(e,t){if(t in e)return e[t];if(t in Ce)return Ce[t](a)},has(e,t){return t in e||t in Ce}}))}function Ot(a,e=!0){return D(a)?a.displayName||a.name:a.name||e&&a.__name}function ol(a){return D(a)&&"__vccOpts"in a}const Kn=(a,e)=>Yd(a,e,Oe),ll=Symbol(""),cl=()=>ke(ll),il="3.2.45",rl="http://www.w3.org/2000/svg",se=typeof document<"u"?document:null,Es=se&&se.createElement("template"),pl={insert:(a,e,t)=>{e.insertBefore(a,t||null)},remove:a=>{const e=a.parentNode;e&&e.removeChild(a)},createElement:(a,e,t,s)=>{const n=e?se.createElementNS(rl,a):se.createElement(a,t?{is:t}:void 0);return a==="select"&&s&&s.multiple!=null&&n.setAttribute("multiple",s.multiple),n},createText:a=>se.createTextNode(a),createComment:a=>se.createComment(a),setText:(a,e)=>{a.nodeValue=e},setElementText:(a,e)=>{a.textContent=e},parentNode:a=>a.parentNode,nextSibling:a=>a.nextSibling,querySelector:a=>se.querySelector(a),setScopeId(a,e){a.setAttribute(e,"")},insertStaticContent(a,e,t,s,n,d){const o=t?t.previousSibling:e.lastChild;if(n&&(n===d||n.nextSibling))for(;e.insertBefore(n.cloneNode(!0),t),!(n===d||!(n=n.nextSibling)););else{Es.innerHTML=s?`<svg>${a}</svg>`:a;const l=Es.content;if(s){const r=l.firstChild;for(;r.firstChild;)l.appendChild(r.firstChild);l.removeChild(r)}e.insertBefore(l,t)}return[o?o.nextSibling:e.firstChild,t?t.previousSibling:e.lastChild]}};function ul(a,e,t){const s=a._vtc;s&&(e=(e?[e,...s]:[...s]).join(" ")),e==null?a.removeAttribute("class"):t?a.setAttribute("class",e):a.className=e}function fl(a,e,t){const s=a.style,n=da(t);if(t&&!n){for(const d in t)Vt(s,d,t[d]);if(e&&!da(e))for(const d in e)t[d]==null&&Vt(s,d,"")}else{const d=s.display;n?e!==t&&(s.cssText=t):e&&a.removeAttribute("style"),"_vod"in a&&(s.display=d)}}const Os=/\s*!important$/;function Vt(a,e,t){if(O(t))t.forEach(s=>Vt(a,e,s));else if(t==null&&(t=""),e.startsWith("--"))a.setProperty(e,t);else{const s=vl(a,e);Os.test(t)?a.setProperty(he(s),t.replace(Os,""),"important"):a[s]=t}}const Vs=["Webkit","Moz","ms"],wt={};function vl(a,e){const t=wt[e];if(t)return t;let s=Va(e);if(s!=="filter"&&s in a)return wt[e]=s;s=st(s);for(let n=0;n<Vs.length;n++){const d=Vs[n]+s;if(d in a)return wt[e]=d}return e}const Fs="http://www.w3.org/1999/xlink";function ml(a,e,t,s,n){if(s&&e.startsWith("xlink:"))t==null?a.removeAttributeNS(Fs,e.slice(6,e.length)):a.setAttributeNS(Fs,e,t);else{const d=ld(e);t==null||d&&!Bs(t)?a.removeAttribute(e):a.setAttribute(e,d?"":t)}}function hl(a,e,t,s,n,d,o){if(e==="innerHTML"||e==="textContent"){s&&o(s,n,d),a[e]=t??"";return}if(e==="value"&&a.tagName!=="PROGRESS"&&!a.tagName.includes("-")){a._value=t;const r=t??"";(a.value!==r||a.tagName==="OPTION")&&(a.value=r),t==null&&a.removeAttribute(e);return}let l=!1;if(t===""||t==null){const r=typeof a[e];r==="boolean"?t=Bs(t):t==null&&r==="string"?(t="",l=!0):r==="number"&&(t=0,l=!0)}try{a[e]=t}catch{}l&&a.removeAttribute(e)}function yl(a,e,t,s){a.addEventListener(e,t,s)}function _l(a,e,t,s){a.removeEventListener(e,t,s)}function bl(a,e,t,s,n=null){const d=a._vei||(a._vei={}),o=d[e];if(s&&o)o.value=s;else{const[l,r]=gl(e);if(s){const p=d[e]=kl(s,n);yl(a,l,p,r)}else o&&(_l(a,l,o,r),d[e]=void 0)}}const Ps=/(?:Once|Passive|Capture)$/;function gl(a){let e;if(Ps.test(a)){e={};let s;for(;s=a.match(Ps);)a=a.slice(0,a.length-s[0].length),e[s[0].toLowerCase()]=!0}return[a[2]===":"?a.slice(3):he(a.slice(2)),e]}let xt=0;const wl=Promise.resolve(),xl=()=>xt||(wl.then(()=>xt=0),xt=Date.now());function kl(a,e){const t=s=>{if(!s._vts)s._vts=Date.now();else if(s._vts<=t.attached)return;ka(Tl(s,t.value),e,5,[s])};return t.value=a,t.attached=xl(),t}function Tl(a,e){if(O(e)){const t=a.stopImmediatePropagation;return a.stopImmediatePropagation=()=>{t.call(a),a._stopped=!0},e.map(s=>n=>!n._stopped&&s&&s(n))}else return e}const Ds=/^on[a-z]/,Al=(a,e,t,s,n=!1,d,o,l,r)=>{e==="class"?ul(a,s,n):e==="style"?fl(a,t,s):at(e)?jt(e)||bl(a,e,t,s,o):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):Cl(a,e,s,n))?hl(a,e,s,d,o,l,r):(e==="true-value"?a._trueValue=s:e==="false-value"&&(a._falseValue=s),ml(a,e,s,n))};function Cl(a,e,t,s){return s?!!(e==="innerHTML"||e==="textContent"||e in a&&Ds.test(e)&&D(t)):e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&a.tagName==="INPUT"||e==="type"&&a.tagName==="TEXTAREA"||Ds.test(e)&&da(t)?!1:e in a}const ql={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String};_o.props;const Il=pa({patchProp:Al},pl);let $s;function Sl(){return $s||($s=Wo(Il))}const Ml=(...a)=>{const e=Sl().createApp(...a),{mount:t}=e;return e.mount=s=>{const n=Ll(s);if(!n)return;const d=e._component;!D(d)&&!d.render&&!d.template&&(d.template=n.innerHTML),n.innerHTML="";const o=t(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),o},e};function Ll(a){return da(a)?document.querySelector(a):a}var Rl=!1;/*!
 * pinia v2.0.28
 * (c) 2022 Eduardo San Martin Morote
 * @license MIT
 */let Jn;const ut=a=>Jn=a,Qn=Symbol();function Ft(a){return a&&typeof a=="object"&&Object.prototype.toString.call(a)==="[object Object]"&&typeof a.toJSON!="function"}var Ie;(function(a){a.direct="direct",a.patchObject="patch object",a.patchFunction="patch function"})(Ie||(Ie={}));function El(){const a=zs(!0),e=a.run(()=>un({}));let t=[],s=[];const n=ve({install(d){ut(n),n._a=d,d.provide(Qn,n),d.config.globalProperties.$pinia=n,s.forEach(o=>t.push(o)),s=[]},use(d){return!this._a&&!Rl?s.push(d):t.push(d),this},_p:t,_a:null,_e:a,_s:new Map,state:e});return n}const Xn=()=>{};function js(a,e,t,s=Xn){a.push(e);const n=()=>{const d=a.indexOf(e);d>-1&&(a.splice(d,1),s())};return!t&&yd()&&_d(n),n}function ce(a,...e){a.slice().forEach(t=>{t(...e)})}function Pt(a,e){a instanceof Map&&e instanceof Map&&e.forEach((t,s)=>a.set(s,t)),a instanceof Set&&e instanceof Set&&e.forEach(a.add,a);for(const t in e){if(!e.hasOwnProperty(t))continue;const s=e[t],n=a[t];Ft(n)&&Ft(s)&&a.hasOwnProperty(t)&&!ta(s)&&!Ka(s)?a[t]=Pt(n,s):a[t]=s}return a}const Ol=Symbol();function Vl(a){return!Ft(a)||!a.hasOwnProperty(Ol)}const{assign:Ua}=Object;function Fl(a){return!!(ta(a)&&a.effect)}function Pl(a,e,t,s){const{state:n,actions:d,getters:o}=e,l=t.state.value[a];let r;function p(){l||(t.state.value[a]=n?n():{});const f=Qd(t.state.value[a]);return Ua(f,d,Object.keys(o||{}).reduce((y,g)=>(y[g]=ve(Kn(()=>{ut(t);const q=t._s.get(a);return o[g].call(q,q)})),y),{}))}return r=zn(a,p,e,t,s,!0),r.$reset=function(){const y=n?n():{};this.$patch(g=>{Ua(g,y)})},r}function zn(a,e,t={},s,n,d){let o;const l=Ua({actions:{}},t),r={deep:!0};let p,f,y=ve([]),g=ve([]),q;const F=s.state.value[a];!d&&!F&&(s.state.value[a]={}),un({});let L;function K(V){let T;p=f=!1,typeof V=="function"?(V(s.state.value[a]),T={type:Ie.patchFunction,storeId:a,events:q}):(Pt(s.state.value[a],V),T={type:Ie.patchObject,payload:V,storeId:a,events:q});const W=L=Symbol();yn().then(()=>{L===W&&(p=!0)}),f=!0,ce(y,T,s.state.value[a])}const U=Xn;function I(){o.stop(),y=[],g=[],s._s.delete(a)}function x(V,T){return function(){ut(s);const W=Array.from(arguments),j=[],G=[];function ba(ua){j.push(ua)}function Ta(ua){G.push(ua)}ce(g,{args:W,name:V,store:P,after:ba,onError:Ta});let Aa;try{Aa=T.apply(this&&this.$id===a?this:P,W)}catch(ua){throw ce(G,ua),ua}return Aa instanceof Promise?Aa.then(ua=>(ce(j,ua),ua)).catch(ua=>(ce(G,ua),Promise.reject(ua))):(ce(j,Aa),Aa)}}const C={_p:s,$id:a,$onAction:js.bind(null,g),$patch:K,$reset:U,$subscribe(V,T={}){const W=js(y,V,T.detached,()=>j()),j=o.run(()=>Te(()=>s.state.value[a],G=>{(T.flush==="sync"?f:p)&&V({storeId:a,type:Ie.direct,events:q},G)},Ua({},r,T)));return W},$dispose:I},P=Fe(C);s._s.set(a,P);const Z=s._e.run(()=>(o=zs(),o.run(()=>e())));for(const V in Z){const T=Z[V];if(ta(T)&&!Fl(T)||Ka(T))d||(F&&Vl(T)&&(ta(T)?T.value=F[V]:Pt(T,F[V])),s.state.value[a][V]=T);else if(typeof T=="function"){const W=x(V,T);Z[V]=W,l.actions[V]=T}}return Ua(P,Z),Ua(H(P),Z),Object.defineProperty(P,"$state",{get:()=>s.state.value[a],set:V=>{K(T=>{Ua(T,V)})}}),s._p.forEach(V=>{Ua(P,o.run(()=>V({store:P,app:s._a,pinia:s,options:l})))}),F&&d&&t.hydrate&&t.hydrate(P.$state,F),p=!0,f=!0,P}function Dl(a,e,t){let s,n;const d=typeof e=="function";typeof a=="string"?(s=a,n=d?t:e):(n=a,s=a.id);function o(l,r){const p=ns();return l=l||p&&ke(Qn,null),l&&ut(l),l=Jn,l._s.has(s)||(d?zn(s,e,n,l):Pl(s,n,l)),l._s.get(s)}return o.$id=s,o}const Ve=Fe({currentPanel:"Lecture_And_Labs",setPanel(a){this.currentPanel=a,console.log(a+" store")}});const la=(a,e)=>{const t=a.__vccOpts||a;for(const[s,n]of e)t[s]=n;return t},$l={props:{label:{required:!0,type:String},data_article:{type:String},web_link:{type:String},isLink:{default:!1,type:Boolean}},data(){return{store:Ve}},methods:{redirect:function(){this.web_link&&(console.log(this.web_link),window.open(this.web_link,"_blank")),this.data_article&&(console.log(this.data_article),this.store.setPanel(this.data_article))}}},jl=["web_link","data_article"];function Nl(a,e,t,s,n,d){return sa(),oa("li",{onClick:e[0]||(e[0]=o=>d.redirect()),web_link:t.web_link,data_article:t.data_article,class:Ze(["",{isLink:t.isLink}])},cd(t.label),11,jl)}const Y=la($l,[["render",Nl],["__scopeId","data-v-ef0e0c4a"]]);const Xa=a=>(oo("data-v-5afec25c"),a=a(),lo(),a),Bl={id:"nav-panel",class:"flexbox-item nav-panel",style:{display:"block"}},Hl={id:"nav-android",class:"nav-section-end"},Ul={class:"nav-section-end"},Wl=Xa(()=>R("summary",null,"Practical Work",-1)),Kl={class:"nav-section-end left-margin-none"},Jl=Xa(()=>R("summary",null,"Lab Exercises (Component 1)",-1)),Ql={class:"external-link"},Xl={class:"nav-section-end left-margin-none"},zl=Xa(()=>R("summary",null,"Todo App",-1)),Gl={class:"nav-section-end left-margin-none"},Yl=Xa(()=>R("summary",null,"Navigation",-1)),Zl={class:"external-link"},ac={class:"nav-section-end left-margin-none"},ec=Xa(()=>R("summary",null,"Fragments",-1)),tc={class:"external-link"},sc={class:"nav-section-end left-margin-none"},nc=Xa(()=>R("summary",null,"Todo App — revisited",-1)),dc={class:"left-margin-none"},oc=Xa(()=>R("summary",null,"Android Developer",-1)),lc={class:"nav-section-end"},cc=Xa(()=>R("summary",null,"Lecture Notes",-1)),ic={name:"Menu",data(){return{store:Ve}},methods:{openAndroidOverview:function(){this.store.setPanel("AndroidOverview")}}},rc=Object.assign(ic,{setup(a){return(e,t)=>(sa(),oa("nav",Bl,[R("details",Hl,[R("summary",{"data-article":"android-overview",onClick:t[0]||(t[0]=s=>e.openAndroidOverview())},"Android - 2022/23"),R("details",Ul,[Wl,R("ul",null,[R("li",Kl,[R("details",null,[Jl,R("ul",Ql,[N(Y,{label:"Your first interactive UI - Dice Roller",web_link:"https://developer.android.com/codelabs/basic-android-kotlin-training-create-dice-roller-app-with-button",isLink:"true"}),N(Y,{label:"XML Layouts for Android",web_link:"https://developer.android.com/codelabs/basic-android-kotlin-training-xml-layouts",isLink:"true"}),N(Y,{label:"Activities and intents",web_link:"https://developer.android.com/codelabs/basic-android-kotlin-training-activities-intents",isLink:"true"}),N(Y,{label:"Activity lifecycle and state",web_link:"https://developer.android.com/codelabs/basic-android-kotlin-training-activity-lifecycle",isLink:"true"})])])]),R("li",Xl,[R("details",null,[zl,R("ul",null,[N(Y,{label:"First todo app",data_article:"TodoFirst"}),N(Y,{label:"Todo detail app",data_article:"TodoDetail"})])])]),R("li",Gl,[R("details",null,[Yl,R("ul",Zl,[N(Y,{label:"Clickable images (Java)",web_link:"https://codelabs.developers.google.com/codelabs/android-training-clickable-images/index.html?index=..%2F..android-training#0",isLink:"true"}),N(Y,{label:"User navigation (Java)",web_link:"https://codelabs.developers.google.com/codelabs/android-training-provide-user-navigation/#0",isLink:"true"}),N(Y,{label:"RecyclerView (Java)",web_link:"https://codelabs.developers.google.com/codelabs/android-training-create-recycler-view/#0",isLink:"true"})])])]),R("li",ac,[R("details",null,[ec,R("ul",tc,[N(Y,{label:"Fragments (Java)",web_link:"https://developer.android.com/codelabs/advanced-android-training-fragments#0",isLink:"true"})])])]),R("li",sc,[R("details",null,[nc,R("ul",null,[N(Y,{label:"Todo Fragment App",data_article:"TodoFragment"}),N(Y,{label:"Todo Component App",data_article:"TodoComponent"}),N(Y,{label:"Todo Persistence App",data_article:"TodoPersistence"}),N(Y,{label:"Todo MVVM App",data_article:"TodoMVVM"})])])]),R("li",dc,[R("details",null,[oc,R("ul",null,[N(Y,{label:"Google blueprint Todo App",web_link:"https://github.com/android/architecture-samples/tree/todo-mvvm-live-kotlin",isLink:"true"}),N(Y,{label:"Fundamentals Course (Java 2018)",web_link:"https://codelabs.developers.google.com/android-training/",isLink:"true"})])])])])]),R("details",lc,[cc,R("ul",null,[N(Y,{label:"Code Review (Java & Kotlin)",data_article:"JavaReview"}),N(Y,{label:"Android Platform",data_article:"AndroidPlatform"}),N(Y,{label:"Activity & Intent",data_article:"ActivityIntent"}),N(Y,{label:"Events & Listeners",data_article:"EventsListeners"}),N(Y,{label:"Fragments",data_article:"Fragments"}),N(Y,{label:"Threads",data_article:"Threads",hidden:""}),N(Y,{label:"Architecture",data_article:"Architecture"})])])])]))}}),pc=la(rc,[["__scopeId","data-v-5afec25c"]]),uc={name:"Lecture_And_Labs"},fc={id:"home-page"},vc=R("div",{class:"panel"},[R("details",{class:"panel",open:""},[R("summary",null,"Lectures and Labs"),R("nav",null,[R("ul",null,[R("li",{class:"panel","data-article":"android-overview"}," Developing Mobile Apps — Android 2022/23 - Please use the menu on the left to navigate through labs and lecture material "),R("li",null,[Hn("For the earlier JAVA delivery - "),R("a",{href:"/old-index.html"},"please follow this link")])])])])],-1),mc=[vc];function hc(a,e,t,s,n,d){return sa(),oa("article",fc,mc)}const yc=la(uc,[["render",hc]]),_c={name:"JavaReview"},bc={id:"java-review-slide",class:"slide panel"},gc=ma('<h2>Prerequisites for Mobile Apps</h2><details><summary>Java Language and Memory Management</summary><ul><li><a target="_blank" href="https://www.youtube.com/watch?v=ckYwv4_Qtmo">practical look at the stack and heap</a></li><li><a target="_blank" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/lecture-notes/">Introduction to Programming in Java ‐ from MIT</a></li></ul></details><details><summary>Introduction to Kotlin</summary><ul><li><a target="_blank" href="https://developer.android.com/courses/kotlin-bootcamp/overview">Kotlin Bootcamp</a></li><li><a target="_blank" href="https://play.kotlinlang.org/byExample/overview">Learn Kotlin by Example</a></li></ul></details><details><summary>Android&#39;s Kotlin First Approach</summary><ul><li><a target="_blank" href="https://developer.android.com/kotlin/first">Kotlin First Android Development</a></li></ul></details>',4),wc=[gc];function xc(a,e,t,s,n,d){return sa(),oa("article",bc,wc)}const kc=la(_c,[["render",xc]]);const Tc={name:"AndroidPlatform"},Ac={id:"android-platform-slide",class:"slide panel"},Cc=ma(`<h2 data-v-329f95e3>Android Platform</h2><ul data-v-329f95e3><li data-v-329f95e3>Where is the <code class="prettyprint" data-v-329f95e3>main</code> thread?</li><li data-v-329f95e3><code class="prettyprint" data-v-329f95e3>ActivityManager</code> in the OS is in charge, not You! </li><li data-v-329f95e3><code class="prettyprint" data-v-329f95e3>Activity</code> class is the entry point for UI </li><li class="list-style-none" data-v-329f95e3><details data-v-329f95e3><summary class="left-margin-none" data-v-329f95e3> A walk-through <code class="prettyprint" data-v-329f95e3>hello world</code></summary><ul class="list-style-none left-margin-none" data-v-329f95e3><li data-v-329f95e3><details data-v-329f95e3><summary data-v-329f95e3><code class="prettyprint" data-v-329f95e3>manifest</code> file </summary><pre class="slide-small" data-v-329f95e3><code class="prettyprint" data-v-329f95e3><span class="xml_element" data-v-329f95e3>&lt;activity</span>
    <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:name</span><span class="xml_value" data-v-329f95e3>=&quot;.MainActivity&quot;</span>
    <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:exported</span><span class="xml_value" data-v-329f95e3>=&quot;true&quot;</span>&gt;
            <span class="xml_element" data-v-329f95e3>&lt;intent-filter&gt;</span>
                <span class="xml_element" data-v-329f95e3>&lt;action</span> <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:name</span><span class="xml_value" data-v-329f95e3>=&quot;android.intent.action.MAIN&quot; /&gt;</span>
                <span class="xml_element" data-v-329f95e3>&lt;category</span> <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:name</span><span class="xml_value" data-v-329f95e3>=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span>
            <span class="xml_element" data-v-329f95e3>&lt;/intent-filter&gt;</span>
<span class="xml_element" data-v-329f95e3>&lt;/activity&gt;</span></code></pre></details></li><li data-v-329f95e3><details data-v-329f95e3><summary data-v-329f95e3><code class="prettyprint" data-v-329f95e3>HelloWorldActivity</code></summary><pre class="slide-small" data-v-329f95e3><code class="prettyprint" data-v-329f95e3><span class="code_keyword" data-v-329f95e3>class</span> HelloWorldActivity : <span class="code_data_type" data-v-329f95e3>AppCompatActivity()</span> {
    <span class="code_keyword" data-v-329f95e3>override fun onCreate</span>(savedInstanceState: <span class="code_data_type" data-v-329f95e3>Bundle?</span>) {
        <span class="code_keyword" data-v-329f95e3>super</span>.onCreate(savedInstanceState)
        setContentView(R.layout.<span class="code_property" data-v-329f95e3>activity_helloworld</span>)
    }
}</code></pre></details></li><li data-v-329f95e3><details data-v-329f95e3><summary data-v-329f95e3>Resources, layout &amp; string definitions</summary><pre class="slide-small" data-v-329f95e3><code class="prettyprint" data-v-329f95e3><span class="xml_element" data-v-329f95e3>&lt;?xml version</span><span class="xml_value" data-v-329f95e3>=&quot;1.0&quot;</span> <span class="xml_element" data-v-329f95e3>encoding</span><span class="xml_value" data-v-329f95e3>=&quot;utf-8&quot;</span>?&gt;
<span class="xml_element" data-v-329f95e3>&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:</span> <span class="xml_attribute" data-v-329f95e3>:android</span><span class="xml_value" data-v-329f95e3>=&quot;http://schemas.android.com/apk/res/android&quot;</span>
      <span class="xml_element" data-v-329f95e3>xmlns:</span><span class="xml_namespace" data-v-329f95e3>app</span><span class="xml_value" data-v-329f95e3>=&quot;http://schemas.android.com/apk/res-auto&quot;</span>
      <span class="xml_element" data-v-329f95e3>xmlns:</span><span class="xml_namespace" data-v-329f95e3>tools</span><span class="xml_value" data-v-329f95e3>=&quot;http://schemas.android.com/tools&quot;</span>
      <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:layout_width</span><span class="xml_value" data-v-329f95e3>=&quot;match_parent&quot;</span>
      <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:layout_height</span><span class="xml_value" data-v-329f95e3>=&quot;match_parent&quot;</span>
      <span class="xml_namespace" data-v-329f95e3>tools</span><span class="xml_attribute" data-v-329f95e3>:context</span><span class="xml_value" data-v-329f95e3>=&quot;.HelloWorldActivity&quot;</span>&gt;

    <span class="xml_element" data-v-329f95e3>&lt;TextView</span>
        <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:layout_width</span><span class="xml_value" data-v-329f95e3>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:layout_height</span><span class="xml_value" data-v-329f95e3>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>android</span><span class="xml_attribute" data-v-329f95e3>:text</span><span class="xml_value" data-v-329f95e3>=&quot;Hello World!&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>app</span><span class="xml_attribute" data-v-329f95e3>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-329f95e3>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>app</span><span class="xml_attribute" data-v-329f95e3>:layout_constraintEnd_toEndOf</span><span class="xml_value" data-v-329f95e3>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>app</span><span class="xml_attribute" data-v-329f95e3>:layout_constraintStart_toStartOf</span><span class="xml_value" data-v-329f95e3>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-329f95e3>app</span><span class="xml_attribute" data-v-329f95e3>:layout_constraintTop_toTopOf</span><span class="xml_value" data-v-329f95e3>=&quot;parent&quot;</span> /&gt;

<span class="xml_element" data-v-329f95e3>&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span>
</code></pre><pre class="slide-small" data-v-329f95e3><code class="prettyprint" data-v-329f95e3><span class="xml_element" data-v-329f95e3>&lt;resources&gt;</span>
  <span class="xml_element" data-v-329f95e3>&lt;string</span> <span class="xml_attribute" data-v-329f95e3>name</span><span class="xml_value" data-v-329f95e3>=&quot;app_name&quot;</span>&gt;HelloWorld<span class="xml_element" data-v-329f95e3>&lt;/string&gt;</span>
<span class="xml_element" data-v-329f95e3>&lt;/resources&gt;</span>
</code></pre></details></li></ul></details></li></ul><details data-v-329f95e3><summary data-v-329f95e3>Questions &amp; Discussion</summary><ol data-v-329f95e3><li data-v-329f95e3> How many steps are there in the <code class="prettyprint" data-v-329f95e3>Hello World</code> walk-through? </li><li data-v-329f95e3>Where is the main thread defined?</li><li data-v-329f95e3>How are views defined?</li><li data-v-329f95e3> What is <code class="code_keyword" data-v-329f95e3>override</code> and <code class="code_keyword" data-v-329f95e3>callback</code> function? </li></ol></details>`,3),qc=[Cc];function Ic(a,e,t,s,n,d){return sa(),oa("article",Ac,qc)}const Sc=la(Tc,[["render",Ic],["__scopeId","data-v-329f95e3"]]),Mc="/assets/activity_lifecycle-193f49b9.png",Lc="/assets/basic-lifecycle-0d711ac4.png",Rc="/assets/lifecycle-states-f00188dd.png",Gn="/assets/todo_uml_sequence-0c1ca92a.png";const Ec={name:"ActivityIntent"},Oc={id:"activity-intent-slide",class:"slide panel"},Vc=ma(`<h2 data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> and <code class="prettyprint" data-v-21f4d920>Intent</code></h2><details class="panel" data-v-21f4d920><summary data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> and <code class="prettyprint" data-v-21f4d920>Intent</code></summary><div class="slide-article panel" data-v-21f4d920><ul data-v-21f4d920><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> — a single screen in an app </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent</code> — a message object to start an <code class="prettyprint" data-v-21f4d920>activity</code></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> and <code class="prettyprint" data-v-21f4d920>Intent</code> communicate via the OS <code class="prettyprint" data-v-21f4d920>ActivityManager</code></li><li data-v-21f4d920> Pattern allows for <code class="prettyprint" data-v-21f4d920>Activity</code> in one App to use <code class="prettyprint" data-v-21f4d920>Activity</code> in another App </li></ul></div></details><details class="panel" data-v-21f4d920><summary data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code></summary><div class="slide-article panel" data-v-21f4d920><details data-v-21f4d920><summary data-v-21f4d920> Creating an <code class="prettyprint" data-v-21f4d920>Activity</code></summary><ul data-v-21f4d920><li data-v-21f4d920> initialise <code class="prettyprint" data-v-21f4d920>Activity</code> in <code class="prettyprint" data-v-21f4d920>onCreate()</code> callback <pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_method" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-21f4d920>Bundle?</span>) {
    setContentView</span>(R.layout.<span class="code_property" data-v-21f4d920>YOUR_VIEW_DEFINITION_XML</span>)
}</code></pre></li><li data-v-21f4d920> Declare the <code class="prettyprint" data-v-21f4d920>Activity</code> in <code class="prettyprint" data-v-21f4d920>AndroidManifest.xml</code><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="xml_element" data-v-21f4d920>&lt;activity</span>
    <span class="xml_namespace" data-v-21f4d920>android</span><span class="xml_attribute" data-v-21f4d920>:name</span><span class="xml_value" data-v-21f4d920>=&quot;.MainActivity&quot;</span>
    <span class="xml_namespace" data-v-21f4d920>android</span><span class="xml_attribute" data-v-21f4d920>:exported</span><span class="xml_value" data-v-21f4d920>=&quot;true&quot;</span>&gt;
            <span class="xml_element" data-v-21f4d920>&lt;intent-filter&gt;</span>
                <span class="xml_element" data-v-21f4d920>&lt;action</span> <span class="xml_namespace" data-v-21f4d920>android</span><span class="xml_attribute" data-v-21f4d920>:name</span><span class="xml_value" data-v-21f4d920>=&quot;android.intent.action.MAIN&quot; /&gt;</span>
                <span class="xml_element" data-v-21f4d920>&lt;category</span> <span class="xml_namespace" data-v-21f4d920>android</span><span class="xml_attribute" data-v-21f4d920>:name</span><span class="xml_value" data-v-21f4d920>=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span>
            <span class="xml_element" data-v-21f4d920>&lt;/intent-filter&gt;</span>
<span class="xml_element" data-v-21f4d920>&lt;/activity&gt;</span></code></pre></li></ul></details><details data-v-21f4d920><summary data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> state, persistence, &amp; lifecycle </summary><ul data-v-21f4d920><li class="list-style-none" data-v-21f4d920><details data-v-21f4d920><summary class="left-margin-none" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> has four states </summary><ul data-v-21f4d920><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>active</code> (or <em data-v-21f4d920>running</em> at the top of the activity stack) </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>paused</code> — alive in memory, visible, lost focus </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>stopped</code> — obscured by another activity, alive im memory, not visible </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>destroyed</code> - memory cleared </li></ul><div class="asset" data-v-21f4d920><img src="`+Mc+'" data-v-21f4d920></div><ul data-v-21f4d920></ul></details><details data-v-21f4d920><summary class="left-margin-none" data-v-21f4d920> Monitoring <code class="prettyprint" data-v-21f4d920>Activity</code> ‐ three key loops </summary><ul data-v-21f4d920><li data-v-21f4d920><em data-v-21f4d920>entire lifetime</em> between <code class="prettyprint" data-v-21f4d920>onCreate</code> to <code class="prettyprint" data-v-21f4d920>onDestroy</code></li><li data-v-21f4d920><em data-v-21f4d920>visible lifetime</em> between <code class="prettyprint" data-v-21f4d920>onStart</code> to <code class="prettyprint" data-v-21f4d920>onStop</code></li><li data-v-21f4d920><em data-v-21f4d920>foreground lifetime</em> between <code class="prettyprint" data-v-21f4d920>onResume</code> to <code class="prettyprint" data-v-21f4d920>onPause</code></li></ul><div class="asset" data-v-21f4d920><img src="'+Lc+`" data-v-21f4d920></div><details data-v-21f4d920><summary data-v-21f4d920>Example Callbacks</summary><p data-v-21f4d920> Source code: <a target="_blank" href="https://github.com/comp-bkt/helloToast/tree/kotlin" data-v-21f4d920>https://github.com/comp-bkt/helloToast</a></p><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-21f4d920>Bundle?</span>) {
...
  Log.d(LOG_TAG, &quot;-------&quot;);
  Log.d(LOG_TAG, &quot;onCreate&quot;);
...
}

<span class="code_keyword" data-v-21f4d920>public override fun</span> onSaveInstanceState(outState: <span class="code_data_type" data-v-21f4d920>Bundle</span>) {
  Log.d(LOG_TAG, &quot;onSaveInstanceState&quot;);
...
}

<span class="code_keyword" data-v-21f4d920>public override fun</span> onStart() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onStart();
  Log.d(LOG_TAG, &quot;onStart&quot;);
}

<span class="code_keyword" data-v-21f4d920>override fun</span> onPause() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onPause();
  Log.d(LOG_TAG, &quot;onPause&quot;);
}

<span class="code_keyword" data-v-21f4d920>override fun</span> onRestart() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onRestart();
  Log.d(LOG_TAG, &quot;onRestart&quot;);
}

<span class="code_keyword" data-v-21f4d920>override fun</span> onResume() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onResume();
  Log.d(LOG_TAG, &quot;onResume&quot;);
}

<span class="code_keyword" data-v-21f4d920>override fun</span> onStop() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onStop();
  Log.d(LOG_TAG, &quot;onStop&quot;);
}

<span class="code_keyword" data-v-21f4d920>override fun</span> onDestroy() {
  <span class="code_keyword" data-v-21f4d920>super</span>.onDestroy();
  Log.d(LOG_TAG, &quot;onDestroy&quot;);
}</code></pre></details></details><details data-v-21f4d920><summary class="left-margin-none" data-v-21f4d920> lifecycle &amp; Saving Persistent State </summary><ul data-v-21f4d920><li data-v-21f4d920>Document type data (typically in SQLite)</li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Bundle</code><em data-v-21f4d920>key, value</em> pairs </li></ul><details data-v-21f4d920><summary data-v-21f4d920>Example Persistence</summary><p data-v-21f4d920> Source code: <a target="_blank" href="https://github.com/comp-bkt/helloToast" data-v-21f4d920>https://github.com/comp-bkt/helloToast</a></p><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-21f4d920>Bundle?</span>) {
  <span class="code_keyword" data-v-21f4d920>super</span>.onCreate(savedInstanceState)

  <span class="code_comments" data-v-21f4d920>// Restore the state.</span>
  <span class="code_keyword" data-v-21f4d920>if</span> (savedInstanceState != <span class="code_keyword" data-v-21f4d920>null</span>) {
    mCount = savedInstanceState.<span class="code_method" data-v-21f4d920>getInt</span>(&quot;count&quot;)
    mShowCount!!.<span class="code_property" data-v-21f4d920>text</span> = mCount.<span class="code_method" data-v-21f4d920>toString()</span>
  }
}

<span class="code_keyword" data-v-21f4d920>public override fun</span> onSaveInstanceState(outState: <span class="code_data_type" data-v-21f4d920>Bundle</span>) {
  <span class="code_keyword" data-v-21f4d920>super</span>.onSaveInstanceState(outState);
  outState.<span class="code_method" data-v-21f4d920>putInt</span>(&quot;count&quot;, mCount);
}</code></pre></details></details><details data-v-21f4d920><summary class="left-margin-none" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Lifecycle</code> class &amp; observer pattern </summary><ul data-v-21f4d920><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>events</code> — enumeration from framework and <code class="prettyprint" data-v-21f4d920>lifecycle</code> class </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>lifecycle</code> class events map to <code class="prettyprint" data-v-21f4d920>callback</code> methods </li><li data-v-21f4d920> Current state tracked by <code class="prettyprint" data-v-21f4d920>lifecycle</code> object </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>LifecycleObserver</code> allows for <em data-v-21f4d920>lifecycle-aware</em> components (<em data-v-21f4d920>observer</em> pattern to monitor lifecycle status) </li></ul><div class="asset" data-v-21f4d920><img src="`+Rc+`" data-v-21f4d920></div></details></li></ul></details></div></details><details class="panel" data-v-21f4d920><summary data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent</code></summary><div class="slide-article panel" data-v-21f4d920><ul data-v-21f4d920><li data-v-21f4d920><a target="_blank" href="https://developer.android.com/reference/android/content/Intent.html" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent</code></a> — messaging object to request an action from another <a target="_blank" href="https://developer.android.com/guide/components/fundamentals.html#Components" data-v-21f4d920>app component</a></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent</code> — a passive data structure that holds an abstract description of an operation to be performed </li><li data-v-21f4d920> late runtime binding between the code in different applications, i.e. it is only at runtime that it will be known whether the message can execute successfully </li></ul><details data-v-21f4d920><summary data-v-21f4d920> How? <code class="prettyprint" data-v-21f4d920>Intent</code> constructors </summary><ul data-v-21f4d920><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent()</code></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent( action:<span class="code_data_type" data-v-21f4d920>String!</span> )</code></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent( action:<span class="code_data_type" data-v-21f4d920>String!</span>, uri:<span class="code_data_type" data-v-21f4d920>Uri!</span> )</code></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent( packageContext: <span class="code_data_type" data-v-21f4d920>Context!</span>, cls:<span class="code_data_type" data-v-21f4d920>Class&lt;*&gt;!</span> )</code></li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Intent( action:<span class="code_data_type" data-v-21f4d920>String!</span>, uri:<span class="code_data_type" data-v-21f4d920>Uri!</span>, packageContext:<span class="code_data_type" data-v-21f4d920>Context!</span>,cls:<span class="code_data_type" data-v-21f4d920>Class&lt;*&gt;!</span> )</code></li></ul></details><details data-v-21f4d920><summary data-v-21f4d920><em data-v-21f4d920>Explicit</em> &amp; <em data-v-21f4d920>Implicit</em><code class="prettyprint" data-v-21f4d920>Intent</code> examples </summary><ul data-v-21f4d920><li data-v-21f4d920><a target="_blank" href="https://developer.android.com/reference/android/content/Intent" data-v-21f4d920>Android predefined actions</a></li><li data-v-21f4d920> helper methods: <code class="prettyprint" data-v-21f4d920>setAction(), putExtra, addCategory(), … </code></li></ul><details data-v-21f4d920><summary data-v-21f4d920> Implicit <code class="prettyprint" data-v-21f4d920>Intent</code> — action is defined, target component is unkown </summary><a target="_blank" href="https://codelabs.developers.google.com/codelabs/android-training-activity-with-implicit-intent/#2" data-v-21f4d920>See Code &amp; Demo</a> (This links to a JAVA Example) <pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> intent = <span class="code_data_type" data-v-21f4d920>Intent()</span>
intent.<span class="code_property" data-v-21f4d920>action</span> = <span class="code_data_type" data-v-21f4d920>Intent</span>.<span class="code_property" data-v-21f4d920>ACTION_WEB_SEARCH</span>
intent.<span class="code_method" data-v-21f4d920>putExtra</span>(SearchManager.QUERY, &quot;search text&quot;)</code></pre><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> browserIntent = <span class="code_data_type" data-v-21f4d920>Intent</span>(<span class="code_property" data-v-21f4d920>ACTION_WEB_SEARCH</span>, <span class="code_data_type" data-v-21f4d920>Uri</span>.<span class="code_method" data-v-21f4d920>parse</span>(&quot;http://www.ecosia.com&quot;));
browserIntent.<span class="code_method" data-v-21f4d920>addCategory</span>(CATEGORY_BROWSABLE)</code></pre></details><details data-v-21f4d920><summary data-v-21f4d920> Explicit <code class="prettyprint" data-v-21f4d920>Intent</code> — target component is known, <span data-v-21f4d920>late runtime binding between the code in different applications</span></summary><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> intent = <span class="code_data_type" data-v-21f4d920>Intent</span>(packageContext, ExampleActivity.class)
intent.<span class="code_data_type" data-v-21f4d920>putExtra</span>( &quot;EX1&quot;,&quot;example value&quot; );
intent.<span class="code_data_type" data-v-21f4d920>putExtra</span>( &quot;EX2&quot;,&quot;example value&quot; );</code></pre></details><details data-v-21f4d920><summary data-v-21f4d920> Code Examples </summary><ul class="list-style-none" data-v-21f4d920><li data-v-21f4d920><a href="https://github.com/comp-bkt/implicit-intents" target="_blank" data-v-21f4d920>Implicit Intent</a></li><li data-v-21f4d920><a href="https://github.com/comp-bkt/explicit-intents" target="_blank" data-v-21f4d920>Explicit Intent (Deprecated StartActivityForResult)</a></li><li data-v-21f4d920><a href="https://github.com/comp-bkt/todo-detail-app/tree/kotlin" target="_blank" data-v-21f4d920>Explicit Intent (ActivityResultContracts)</a></li></ul></details></details></div></details><details class="panel" data-v-21f4d920><summary data-v-21f4d920>Sequence Diagram — <em data-v-21f4d920>Todo App</em></summary><div class="slide-article panel" data-v-21f4d920><p data-v-21f4d920> Please note that SDK32 has depreacted startActivityForResult and onActivityResult and replaced it with <a href="https://developer.android.com/training/basics/intents/result#java" target="_blank" data-v-21f4d920>ActivityContracts</a>. The sequence is the same. </p><div class="width-full" data-v-21f4d920><img src="`+Gn+`" data-v-21f4d920></div></div></details><details class="panel" data-v-21f4d920><summary data-v-21f4d920>How to organise intents?</summary><div class="slide-article panel" data-v-21f4d920><details data-v-21f4d920><summary data-v-21f4d920> Where shoud an <code class="prettyprint" data-v-21f4d920>intent</code> be instantiated? </summary><p data-v-21f4d920><em data-v-21f4d920><strong data-v-21f4d920>&quot;from each according to their ability, to each according to their need&quot;</strong></em></p><div class="panel" data-v-21f4d920><ul data-v-21f4d920><li data-v-21f4d920> Calling <code class="prettyprint" data-v-21f4d920>Activity</code> has the <code class="prettyprint" data-v-21f4d920>Intent</code> data </li><li data-v-21f4d920> Called <code class="prettyprint" data-v-21f4d920>Activity</code> uses the <code class="prettyprint" data-v-21f4d920>Intent</code> data </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>static</code> method in called <code class="prettyprint" data-v-21f4d920>Activity</code></li></ul><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_comments" data-v-21f4d920>/*Part of companion object as a static method*/</span>
<span class="code_keyword" data-v-21f4d920>companion object</span> {

    <span class="code_keyword" data-v-21f4d920>private const val</span> TODO_INDEX = &quot;com.example.todoIndex&quot;

    <span class="code_comments" data-v-21f4d920>/* Any calling activity would call this static method and pass the necessary
       key, value data pair in an intent object. */</span>
    <span class="code_keyword" data-v-21f4d920>fun</span> newIntent(packageContext: <span class="code_data_type" data-v-21f4d920>Context?</span>, todoIndex: <span class="code_data_type" data-v-21f4d920>Int</span>): <span class="code_data_type" data-v-21f4d920>Intent</span> {
        <span class="code_keyword" data-v-21f4d920>val</span> intent = Intent(packageContext, <span class="code_data_type" data-v-21f4d920>TodoDetailActivity</span>::class.java)
        intent.putExtra(TODO_INDEX, todoIndex)
        <span class="code_keyword" data-v-21f4d920>return</span> intent
    }
}</code></pre><p data-v-21f4d920>The calling activity:</p><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> intent: <span class="code_data_type" data-v-21f4d920>Intent</span> = <span class="code_data_type" data-v-21f4d920>TodoDetailActivity</span>.<span class="code_keyword" data-v-21f4d920>Companion</span>.newIntent(<span class="code_keyword" data-v-21f4d920>this</span>@<span class="code_data_type" data-v-21f4d920>TodoActivity</span>, mTodoIndex)
todoDetailActivityResultLauncher.launch(intent)</code></pre></div></details><details data-v-21f4d920><summary data-v-21f4d920> Registering the <code class="prettyprint" data-v-21f4d920>Intent</code> for a callback </summary><div class="panel" data-v-21f4d920><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> todoDetailActivityResultLauncher = registerForActivityResult&lt;<span class="code_data_type" data-v-21f4d920>Intent</span>, <span class="code_data_type" data-v-21f4d920>ActivityResult</span>&gt;(
    ActivityResultContracts.StartActivityForResult()
    ) { <span class="code_keyword" data-v-21f4d920>result</span>: <span class="code_data_type" data-v-21f4d920>ActivityResult</span> -&gt;
        /*code to insert here for when returned back to Activity*/
    }</code></pre><details class="nav-section-end" data-v-21f4d920><summary data-v-21f4d920>Typical usage:</summary><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>buttonTodoDetail.setOnClickListener {
    <span class="code_keyword" data-v-21f4d920>val</span> intent: <span class="code_data_type" data-v-21f4d920>Intent</span> = <span class="code_data_type" data-v-21f4d920>TodoDetailActivity</span>.<span class="code_keyword" data-v-21f4d920>Companion</span>.newIntent(<span class="code_keyword" data-v-21f4d920>this</span>@<span class="code_data_type" data-v-21f4d920>TodoActivity</span>, mTodoIndex)
    todoDetailActivityResultLauncher.launch(intent)
}</code></pre></details></div></details><details data-v-21f4d920><summary data-v-21f4d920>Setting a result</summary><p data-v-21f4d920><code class="prettyprint" data-v-21f4d920>Activity</code> implement two method for setting results </p><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>setResult(resultCode:<span class="code_data_type" data-v-21f4d920>int</span>);</code></pre><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920>setResult(resultCode:<span class="code_data_type" data-v-21f4d920>int</span>, intent<span class="code_data_type" data-v-21f4d920>Intent</span>);</code></pre><ul data-v-21f4d920><li data-v-21f4d920> navigation logic — <code class="prettyprint" data-v-21f4d920>resultCode</code>, is <code class="prettyprint" data-v-21f4d920>Activity.RESULT_OK</code> or <code class="prettyprint" data-v-21f4d920>Activity.RESULT_CANCELED</code>, or UserDefined </li><li data-v-21f4d920><code class="prettyprint" data-v-21f4d920>extras</code> in <code class="prettyprint" data-v-21f4d920>intent</code> for more data </li></ul><details class="nav-section-end" data-v-21f4d920><summary data-v-21f4d920>Typical usage:</summary><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>val</span> intent = <span class="code_data_type" data-v-21f4d920>Intent()</span>
intent.putExtra(IS_TODO_COMPLETE, isChecked)
setResult(RESULT_OK, intent)</code></pre></details></details><details data-v-21f4d920><summary data-v-21f4d920>Handling the result</summary><p data-v-21f4d920> Callback - see registering the Intent Callback above - <code class="prettyprint" data-v-21f4d920>registerForActivityResult</code></p><details class="nav-section-end" data-v-21f4d920><summary data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>result</span>: <span class="code_data_type" data-v-21f4d920>ActivityResult</span> -&gt;</code></summary><pre class="slide-small" data-v-21f4d920><code class="prettyprint" data-v-21f4d920><span class="code_keyword" data-v-21f4d920>if</span> (result.resultCode == RESULT_OK) {
    <span class="code_keyword" data-v-21f4d920>val</span> intent = result.data
    <span class="code_keyword" data-v-21f4d920>val</span> isTodoComplete = intent!!.getBooleanExtra(IS_TODO_COMPLETE, false)
    updateTodoComplete(isTodoComplete)
} <span class="code_keyword" data-v-21f4d920>else</span> {
    Toast.makeText(<span class="code_keyword" data-v-21f4d920>this</span>, R.string.back_button_pressed, Toast.LENGTH_SHORT).show()
}</code></pre></details></details></div></details><details class="panel" data-v-21f4d920><summary data-v-21f4d920>Useful Android Developer Pages</summary><div class="slide-article panel" data-v-21f4d920><ul data-v-21f4d920><li data-v-21f4d920><a href="https://developer.android.com/reference/android/app/Activity" target="_blank" data-v-21f4d920>Activity | Android Developer Docs</a></li><li data-v-21f4d920><a href="https://developer.android.com/guide/components/activities/tasks-and-back-stack" target="_blank" data-v-21f4d920>Tasks and the backstack</a></li><li data-v-21f4d920><a href="https://developer.android.com/reference/android/content/Intent" target="_blank" data-v-21f4d920>Intent | Android Developer Docs</a></li><li data-v-21f4d920><a href="https://developer.android.com/training/basics/intents/result" target="_blank" data-v-21f4d920>Getting a result from an activity</a></li></ul></div></details>`,7),Fc=[Vc];function Pc(a,e,t,s,n,d){return sa(),oa("article",Oc,Fc)}const Dc=la(Ec,[["render",Pc],["__scopeId","data-v-21f4d920"]]);const $c={name:"EventsListeners"},jc={id:"events-listeners-slide",class:"slide panel"},Nc=ma(`<h2 data-v-d8a268d5>Events and Listeners</h2><ul data-v-d8a268d5><li class="list-style-none left-margin-none" data-v-d8a268d5><details class="panel" data-v-d8a268d5><summary data-v-d8a268d5>Events, Listeners &amp; Callbacks</summary><ul data-v-d8a268d5><li data-v-d8a268d5> An event listener is an <code class="prettyprint" data-v-d8a268d5>interface</code> in the <code class="prettyprint" data-v-d8a268d5>View</code> class that contains a single callback method </li><li data-v-d8a268d5> Android maintains and even queue and implements <a target="_blank" href="https://developer.android.com/guide/topics/ui/ui-events" data-v-d8a268d5>event listeners</a></li><li data-v-d8a268d5> Event listener / Callback method: <pre class="slide-small" data-v-d8a268d5><code class="prettyprint" data-v-d8a268d5><span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnClickListener</span>             <span class="code_method" data-v-d8a268d5>onClick()</span>
<span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnLongClickListener</span>         <span class="code_method" data-v-d8a268d5>onLongClick()</span>
<span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnFocusChangeListener</span>       <span class="code_method" data-v-d8a268d5>OnFocusChangeListener</span>
<span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnKeyListener</span>               <span class="code_method" data-v-d8a268d5>OnKeyListener()</span>
<span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnTouchListener</span>             <span class="code_method" data-v-d8a268d5>OnTouchListener()</span>
<span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnCreateContextMenuListener</span> <span class="code_method" data-v-d8a268d5>OnCreateContextMenuListener()</span></code></pre></li><li data-v-d8a268d5> UI <em data-v-d8a268d5>click</em> event, the listener, <code class="prettyprint" data-v-d8a268d5>View.onClickListener</code> fires an event that results in the corresponding event handler, <code class="prettyprint" data-v-d8a268d5>onClick</code> call back method being called. </li></ul></details></li><li class="list-style-none left-margin-none" data-v-d8a268d5><details class="panel" data-v-d8a268d5><summary data-v-d8a268d5>Register event listeners with event handlers</summary><details data-v-d8a268d5><summary data-v-d8a268d5>Listener defined as an anonymous inner class</summary><ul data-v-d8a268d5><li data-v-d8a268d5> Activity <code class="prettyprint" data-v-d8a268d5>private</code> data conveniently available to <em data-v-d8a268d5>anonymous</em> inner class </li><li data-v-d8a268d5> Separate <code class="prettyprint" data-v-d8a268d5>listener</code> for each <code class="prettyprint" data-v-d8a268d5>view</code> object </li></ul><pre class="slide-small" data-v-d8a268d5><code class="prettyprint prettyprinted" style="" data-v-d8a268d5><span class="code_comments" data-v-d8a268d5>/*These 2 are the same code - it is just that button1 is written as
a Lamda expression. button2 as OOP implemtation of the OnClickListener
*/</span>
button1.<span class="code_method" data-v-d8a268d5>setOnClickListener</span>{
    <span class="code_comments" data-v-d8a268d5>//code to go here</span>
}

button2.<span class="code_method" data-v-d8a268d5>setOnClickListener</span>(<span class="code_keyword" data-v-d8a268d5>object</span>: <span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnClickListener</span> {
    <span class="code_keyword" data-v-d8a268d5>override fun</span> <span class="code_method" data-v-d8a268d5>onClick</span>(view: <span class="code_data_type" data-v-d8a268d5>View</span>) {
        <span class="code_comments" data-v-d8a268d5>//code to go here</span>
    }
})</code></pre></details><details data-v-d8a268d5><summary data-v-d8a268d5> Implement the <code class="prettyprint" data-v-d8a268d5>interface</code> in the class definition </summary><pre class="slide-small" data-v-d8a268d5><code class="prettyprint prettyprinted" style="" data-v-d8a268d5><span class="code_keyword" data-v-d8a268d5>class</span> MainActivity : <span class="code_data_type" data-v-d8a268d5>AppCompatActivity()</span>, <span class="code_data_type" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnClickListener</span> {
    <span class="code_keyword" data-v-d8a268d5>override fun</span> <span class="code_method" data-v-d8a268d5>onCreate</span>(savedInstanceState: <span class="code_data_type" data-v-d8a268d5>Bundle?</span>) {
        <span class="code_keyword" data-v-d8a268d5>super</span>.<span class="code_method" data-v-d8a268d5>onCreate</span>(savedInstanceState)
        <span class="code_method" data-v-d8a268d5>setContentView</span>(R.layout.activity_main)

        <span class="code_keyword" data-v-d8a268d5>val</span> button1: <span class="code_data_type" data-v-d8a268d5>Button</span> = <span class="code_method" data-v-d8a268d5>findViewById</span>(R.id.button1)
        button1.<span class="code_method" data-v-d8a268d5>setOnClickListener</span>(<span class="code_keywords" data-v-d8a268d5>this</span>)
    }

    <span class="code_keyword" data-v-d8a268d5>override fun</span> <span class="code_method" data-v-d8a268d5>onClick</span>(v: <span class="code_data_type" data-v-d8a268d5>View?</span>) {
        <span class="code_keyword" data-v-d8a268d5>if</span>(v!!.id == R.id.button1) {
            <span class="code_comments" data-v-d8a268d5>//code to go here</span>
        }
    }
}</code></pre></details><details data-v-d8a268d5><summary data-v-d8a268d5> Anonymous implementation of the <code class="prettyprint" data-v-d8a268d5>interface</code> for any view objects </summary><pre class="slide-small" data-v-d8a268d5><code class="prettyprint prettyprinted" style="" data-v-d8a268d5><span class="code_keyword" data-v-d8a268d5>private val</span> mButtonListener = <span class="code_keyword" data-v-d8a268d5>View</span>.<span class="code_method" data-v-d8a268d5>OnClickListener</span> {
        <span class="code_comments" data-v-d8a268d5>/*use &#39;it&#39; for the View object*/</span>

}</code></pre><p data-v-d8a268d5>And the usage would be:</p><pre class="slide-small" data-v-d8a268d5><code class="prettyprint prettyprinted" style="" data-v-d8a268d5><span class="code_keyword" data-v-d8a268d5>val</span> button1: <span class="code_data_type" data-v-d8a268d5>Button</span> = <span class="code_method" data-v-d8a268d5>findViewById</span>(R.id.button1)
button1.<span class="code_method" data-v-d8a268d5>setOnClickListener</span>(mButtonListener)
</code></pre></details><details data-v-d8a268d5><summary data-v-d8a268d5>Define the listener in the XML view definition.</summary><ul data-v-d8a268d5><li data-v-d8a268d5>MVC &amp; SoC — avoid</li></ul><pre class="slide-small" data-v-d8a268d5><code class="prettyprint" data-v-d8a268d5><span class="code_comments" data-v-d8a268d5>/*
listener implementation with the method name
defined in the view definition
*/</span>
<span class="xml_namespace" data-v-d8a268d5>android</span><span class="xml_attribute" data-v-d8a268d5>:onClick</span> = <span class="xml_value" data-v-d8a268d5>&quot;onCheckboxIsCompleteClick&quot;</span></code></pre> with Activity method: <pre class="slide-small" data-v-d8a268d5><code class="prettyprint" data-v-d8a268d5><span class="code_keyword" data-v-d8a268d5>fun</span> <span class="code_method" data-v-d8a268d5>onCheckboxIsCompleteClick</span>(view: <span class="code_data_type" data-v-d8a268d5>View</span>) {
    <span class="code_comments" data-v-d8a268d5>/* code to go here */</span>
}</code></pre></details></details></li><li class="list-style-none left-margin-none" data-v-d8a268d5><details class="panel" data-v-d8a268d5><summary data-v-d8a268d5>Example Code</summary><p data-v-d8a268d5>Examples of all of the above methods of implementing a ClickListener is available on Github. Please see the separate branches for each type of implementation</p><ul data-v-d8a268d5><li data-v-d8a268d5><a href="https://github.com/comp-bkt/dma-events-listeners" data-v-d8a268d5>https://github.com/comp-bkt/dma-events-listeners</a></li></ul></details></li></ul>`,2),Bc=[Nc];function Hc(a,e,t,s,n,d){return sa(),oa("article",jc,Bc)}const Uc=la($c,[["render",Hc],["__scopeId","data-v-d8a268d5"]]),Ns="/assets/fragment_lifecycle-dbbde721.png",Yn="/assets/todo_uml_object_mvc-c31e65a6.png",Wc="/assets/frag_args-b16022e1.png";const Kc={name:"Fragments"},Jc={id:"fragments-slide",class:"slide panel"},Qc=ma('<h2 data-v-2ce8d8be>Fragments</h2><details class="panel" data-v-2ce8d8be><summary data-v-2ce8d8be>Fragment and Lifecycle</summary><div class="slide-article" data-v-2ce8d8be><ul data-v-2ce8d8be><li class="list-style-none left-margin-none panel" data-v-2ce8d8be><details data-v-2ce8d8be><summary data-v-2ce8d8be> Fragments &amp; MVC — Decoupling &amp; Cohesion </summary><ul data-v-2ce8d8be><li data-v-2ce8d8be> Original architecture <em data-v-2ce8d8be>coupled</em><code class="prettyprint" data-v-2ce8d8be> Activity</code> &amp; <code class="prettyprint" data-v-2ce8d8be>View</code></li><li data-v-2ce8d8be>Tablets and future Wearables</li><li data-v-2ce8d8be> A <code class="prettyprint" data-v-2ce8d8be>Fragment</code> represents a behavior or a portion of user interface, has its own lifecycle, receives its own input events, and can be added or removed while the activity is running </li><li class="panel list-style-none" data-v-2ce8d8be><details data-v-2ce8d8be><summary class="" data-v-2ce8d8be> AndroidX or Support Libraries? </summary><ul data-v-2ce8d8be><li data-v-2ce8d8be> Older android versions provided a group of libraries: <code class="prettyprint" data-v-2ce8d8be>support-v7, appcompat-v7, recyclerview-v7</code> etc. for backwards compatibility </li><li data-v-2ce8d8be> These have been replaced with <code class="prettyprint" data-v-2ce8d8be>androidx.</code> libraries which include support for backward compatibility and fragments. </li><li data-v-2ce8d8be><em data-v-2ce8d8be>Please make sure when looking at older examples that androidx libraries are being used</em></li></ul></details></li><li class="panel list-style-none" data-v-2ce8d8be><details data-v-2ce8d8be><summary class="" data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>FragmentManager</code></summary><ul data-v-2ce8d8be><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>View</code> <em data-v-2ce8d8be>decoupled</em> by delegating UI to <code class="prettyprint" data-v-2ce8d8be>Fragment</code></li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>Activity</code> uses <em data-v-2ce8d8be>placeholder</em> views for <code class="prettyprint" data-v-2ce8d8be>fragments</code></li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>Activity</code> uses a <code class="prettyprint" data-v-2ce8d8be>FragmentManager</code> to dynamically add and remove <code class="prettyprint" data-v-2ce8d8be>Fragments</code> from <code class="prettyprint" data-v-2ce8d8be>Views</code> in a fragmentManager <code class="prettyprint" data-v-2ce8d8be>transaction</code>. </li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>FragmentManager</code> transactions can change fragment combinations for different screen sizes </li><li data-v-2ce8d8be> Once added, a <code class="prettyprint" data-v-2ce8d8be>fragment</code> lives in a ViewGroup inside the activity&#39;s view hierarchy and affected by the <code class="prettyprint" data-v-2ce8d8be>Activity</code> lifecycle </li></ul></details></li><li class="panel list-style-none" data-v-2ce8d8be><details data-v-2ce8d8be><summary class="" data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>Fragment</code> Lifecycle </summary><ul data-v-2ce8d8be><img class="float-right width-third" src="'+Ns+'" alt="Android Fragment Lifecycle" data-v-2ce8d8be> Commonlifecycle methods implemented: <ul data-v-2ce8d8be><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>onCreate()</code> initialize components of the fragment to retain when the fragment is paused or stopped, then resumed </li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>onCreateView()</code> called for fragment to draw its user interface and return a <code class="prettyprint" data-v-2ce8d8be>view</code></li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>onPause()</code> first indication user is leaving the fragment; persist session data </li></ul></ul></details></li><li class="panel list-style-none" data-v-2ce8d8be><details data-v-2ce8d8be><summary data-v-2ce8d8be>Getting results with fragments</summary><ul data-v-2ce8d8be><li data-v-2ce8d8be> Fragments equivalent to <code class="prettyprint" data-v-2ce8d8be>startActivityForResult()</code> is <code class="prettyprint" data-v-2ce8d8be>Fragment.startActivityForResult()</code></li><li data-v-2ce8d8be> Instead of overriding <code class="prettyprint" data-v-2ce8d8be>Activity.onActivityResult()</code> override <code class="prettyprint" data-v-2ce8d8be>Fragment.Activity.onActivityResult()</code></li><li data-v-2ce8d8be> Fragments do not have results, there is no <code class="prettyprint" data-v-2ce8d8be>Fragment</code> setResult, only Activity has <code class="prettyprint" data-v-2ce8d8be>Activity.setResult()</code></li><li data-v-2ce8d8be> Simple code with <code class="prettyprint" data-v-2ce8d8be>getActivity</code> method to access the parent Activity&#39;s intent data directly leads to coupling. <br data-v-2ce8d8be>Avoid: <pre class="slide-small" data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be><span class="code_method" data-v-2ce8d8be>getActivity()</span>.<span class="code_method" data-v-2ce8d8be>setResult</span>(Activity.RESULT_OK,<span class="code_keyword" data-v-2ce8d8be>null</span>);</code></pre></li><li data-v-2ce8d8be> Instead, <code class="prettyprint" data-v-2ce8d8be>Activity</code> Static method to bundle any arguments and return the fragment<br data-v-2ce8d8be><pre class="slide-small" data-v-2ce8d8be>(leads to decoupling as any activity can pass its data and receive the fragment)</pre></li></ul></details></li></ul></details></li><li class="list-style-none left-margin-none panel" data-v-2ce8d8be><details data-v-2ce8d8be><summary data-v-2ce8d8be>Todo Controller &amp; Views with fragments</summary><p class="center" data-v-2ce8d8be><img src="'+Yn+`" alt="Todo mvc object diagram" class="width-full" data-v-2ce8d8be></p><ul data-v-2ce8d8be><li data-v-2ce8d8be> An Activity&#39;s view is a container <code class="prettyprint" data-v-2ce8d8be>FrameLayout</code> and remains the same throughout the lifecycle <details data-v-2ce8d8be><summary class="" data-v-2ce8d8be>TodoActivity layout</summary><pre class="slide-small" data-v-2ce8d8be><code class="prettyprint prettyprinted" style="" data-v-2ce8d8be><span class="xml_namespace" data-v-2ce8d8be>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="xml_element" data-v-2ce8d8be>&lt;FrameLayout</span>
    <span class="xml_namespace" data-v-2ce8d8be>xmlns:android</span>=<span class="xml_value" data-v-2ce8d8be>&quot;http://schemas.android.com/apk/res/android&quot;</span>
    <span class="xml_namespace" data-v-2ce8d8be>android</span>:<span class="xml_attribute" data-v-2ce8d8be>id</span>=<span class="xml_value" data-v-2ce8d8be>&quot;@+id/fragment_container&quot;</span>
    <span class="xml_namespace" data-v-2ce8d8be>android</span>:<span class="xml_attribute" data-v-2ce8d8be>layout_width</span>=<span class="xml_value" data-v-2ce8d8be>&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-2ce8d8be>android</span>:<span class="xml_attribute" data-v-2ce8d8be>layout_height</span>=<span class="xml_value" data-v-2ce8d8be>&quot;match_parent&quot;</span>&gt;
<span class="xml_element" data-v-2ce8d8be>&lt;/FrameLayout&gt;</span>
          </code></pre></details></li><li data-v-2ce8d8be> add the <code class="prettyprint" data-v-2ce8d8be>fragments</code> to the activity&#39;s <em data-v-2ce8d8be>layout</em> ‐ <span class="red" data-v-2ce8d8be>avoid coupling!</span></li><li data-v-2ce8d8be> TodoFragment: controller object that interacts with view and model. <details data-v-2ce8d8be><summary class="" data-v-2ce8d8be>TodoFragment</summary><pre class="slide-small" data-v-2ce8d8be><code class="prettyprint prettyprinted" style="" data-v-2ce8d8be><span class="code_keyword" data-v-2ce8d8be>class</span> TodoFragment : <span class="code_data_type" data-v-2ce8d8be>Fragment()</span> {
    <span class="code_keyword" data-v-2ce8d8be>private var</span> mTodo: <span class="code_data_type" data-v-2ce8d8be>Todo?</span> = <span class="code_keyword" data-v-2ce8d8be>null</span>

    <span class="code_keyword" data-v-2ce8d8be>private lateinit var</span> mCheckBoxIsComplete: <span class="code_data_type" data-v-2ce8d8be>CheckBox</span>

    <span class="code_keyword" data-v-2ce8d8be>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-2ce8d8be>Bundle?</span>) {
        <span class="code_keyword" data-v-2ce8d8be>super</span>.onCreate(savedInstanceState)
        mTodo = <span class="code_data_type" data-v-2ce8d8be>Todo()</span>
    }

    <span class="code_keyword" data-v-2ce8d8be>override fun</span> onCreateView(inflater: <span class="code_data_type" data-v-2ce8d8be>LayoutInflater</span>,
                              container: <span class="code_data_type" data-v-2ce8d8be>ViewGroup?</span>,
                              savedInstanceState: <span class="code_data_type" data-v-2ce8d8be>Bundle?</span>): <span class="code_data_type" data-v-2ce8d8be>View?</span> {
        <span class="code_keyword" data-v-2ce8d8be>val</span> view = inflater.inflate(R.layout.<span class="code_property" data-v-2ce8d8be>fragment_todo</span>, container, false)

        mCheckBoxIsComplete = view.findViewById(R.id.<span class="code_property" data-v-2ce8d8be>todo_complete</span>)
        mCheckBoxIsComplete!!.setOnCheckedChangeListener { buttonView, isChecked -&gt;
            Log.d(&quot;DEBUG **** TodoFragment&quot;, &quot;called onCheckedChanged&quot;)
            mTodo!!.<span class="code_property" data-v-2ce8d8be>isComplete</span> = isChecked
        }
        <span class="code_keyword" data-v-2ce8d8be>return</span> view
    }

}</code></pre><ul data-v-2ce8d8be><li data-v-2ce8d8be> Note, <code class="prettyprint" data-v-2ce8d8be>Activity.onCreate</code> had <code class="prettyprint" data-v-2ce8d8be>protected</code> scope, <code class="prettyprint" data-v-2ce8d8be>Fragment.onCreate</code> is <code class="prettyprint" data-v-2ce8d8be>public</code> (reusable by any activity) </li><li data-v-2ce8d8be> Similar to Activity, a Fragment has a Bundle to save state. </li><li data-v-2ce8d8be> The previous Activity <code class="prettyprint" data-v-2ce8d8be>setContentView()</code> is no longer called in the <code class="prettyprint" data-v-2ce8d8be>onCreate</code> method </li><li data-v-2ce8d8be> Instead the <code class="prettyprint" data-v-2ce8d8be>onCreateView()</code> explicitly <em data-v-2ce8d8be>inflates</em> the fragment&#39;s view: <code class="prettyprint" data-v-2ce8d8be>inflater.inflate(R.layout.fragment_todo, container, false)</code><br data-v-2ce8d8be> (the <code class="prettyprint" data-v-2ce8d8be>false</code> parameter indicates the host Activity will add the fragment) </li><li data-v-2ce8d8be> Referencing a view object is now with an <code class="prettyprint" data-v-2ce8d8be>int</code> reference; <code class="prettyprint" data-v-2ce8d8be>view.findViewById(R.id.todo_complete)</code></li></ul></details></li><li data-v-2ce8d8be> reuse <code class="prettyprint" data-v-2ce8d8be>fragment</code> in any <code class="prettyprint" data-v-2ce8d8be>activity</code><details data-v-2ce8d8be><summary class="" data-v-2ce8d8be>TodoActivity</summary><pre class="slide-small" data-v-2ce8d8be><code class="prettyprint prettyprinted" style="" data-v-2ce8d8be><span class="code_keyword" data-v-2ce8d8be>class</span> TodoActivity : <span class="code_data_type" data-v-2ce8d8be>AppCompatActivity()</span> {
    <span class="code_keyword" data-v-2ce8d8be>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-2ce8d8be>Bundle?</span>) {
        <span class="code_keyword" data-v-2ce8d8be>super</span>.onCreate(savedInstanceState)
        setContentView(R.layout.<span class="code_property" data-v-2ce8d8be>activity_todo</span>)
        <span class="code_keyword" data-v-2ce8d8be>val</span> fm = supportFragmentManager
        <span class="code_keyword" data-v-2ce8d8be>val</span> fragment = fm.findFragmentById(R.id.<span class="code_property" data-v-2ce8d8be>fragment_container</span>)
        <span class="code_keyword" data-v-2ce8d8be>if</span> (fragment == <span class="code_keyword" data-v-2ce8d8be>null</span>) {
            <span class="code_keyword" data-v-2ce8d8be>val</span> todoFragment = <span class="code_data_type" data-v-2ce8d8be>TodoFragment()</span>
            fm.beginTransaction()
                    .add(R.id.<span class="code_property" data-v-2ce8d8be>fragment_container</span>, todoFragment)
                    .commit()
        }
    }
}</code></pre><ul data-v-2ce8d8be><li data-v-2ce8d8be> The <code class="prettyprint" data-v-2ce8d8be>FragmentManger</code> keeps a <em data-v-2ce8d8be>Back</em> stack of <code class="prettyprint" data-v-2ce8d8be>FragmentTransactions</code> that can be navigated and a list of <code class="prettyprint" data-v-2ce8d8be>Fragments</code>. </li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>FragmentTransactions</code> are used to <code class="prettyprint" data-v-2ce8d8be>add, remove, attach, detach</code> or <code class="prettyprint" data-v-2ce8d8be>replace</code> fragments. </li><li data-v-2ce8d8be> The <code class="prettyprint" data-v-2ce8d8be>FragmentManager.beginTransaction</code> creates and returns an instance of <code class="prettyprint" data-v-2ce8d8be>FragmentTransaction</code> and not <code class="prettyprint" data-v-2ce8d8be>void</code>, hence it can be chained together. </li><li data-v-2ce8d8be> The <code class="prettyprint" data-v-2ce8d8be>.add</code> method has two parameters, the container view ID and a <code class="prettyprint" data-v-2ce8d8be>fragment</code>. The ID serves two purposes: <ul data-v-2ce8d8be><li data-v-2ce8d8be> it identifies where in the Activity&#39;s view the <code class="prettyprint" data-v-2ce8d8be>fragment</code> should appear. </li><li data-v-2ce8d8be> it is a unique identifier for the <code class="prettyprint" data-v-2ce8d8be>fragment</code> in the <code class="prettyprint" data-v-2ce8d8be>FragmentManager</code> list </li></ul></li></ul><div data-v-2ce8d8be><img class="float-right width-quarter" src="`+Ns+'" alt="Android Fragment Lifecycle" data-v-2ce8d8be><p data-v-2ce8d8be>Why check for <code class="prettyprint" data-v-2ce8d8be>null</code>?</p><ul data-v-2ce8d8be><li data-v-2ce8d8be> The <code class="prettyprint" data-v-2ce8d8be>fragment</code> may already be in the in the <code class="prettyprint" data-v-2ce8d8be>FragmentManager</code> list due to events such as destroyed on rotation or to reclaim memory. </li></ul><p data-v-2ce8d8be> What happens if the <code class="prettyprint" data-v-2ce8d8be>Activity</code> has resumed and a <code class="prettyprint" data-v-2ce8d8be>Fragment</code> is added? </p><ul data-v-2ce8d8be><li data-v-2ce8d8be> The <code class="prettyprint" data-v-2ce8d8be>FragmentManager</code> calls all the necessary methods to synchronise with the <code class="prettyprint" data-v-2ce8d8be>Activity</code> state. </li><li data-v-2ce8d8be> For example, adding a fragment to a resumed activity results in the fragment getting calls to <code class="prettyprint" data-v-2ce8d8be>onAttach(Context), onCreate(Bundle), onCreateView(…), onActivityCreated(Bundle), onStart()</code> and <code class="prettyprint" data-v-2ce8d8be>onResume</code>. </li></ul></div></details></li></ul></details></li><li class="list-style-none left-margin-none panel" data-v-2ce8d8be><details data-v-2ce8d8be><summary data-v-2ce8d8be>Todo Fragment Arguments</summary><div data-v-2ce8d8be><img class="image width-half float-right" src="'+Wc+`" alt="Fragment Arguments" data-v-2ce8d8be><ul data-v-2ce8d8be><li data-v-2ce8d8be> Simple code with <code class="prettyprint" data-v-2ce8d8be>getActivity</code> method to access the parent Activity&#39;s intent data directly leads to <em class="red" data-v-2ce8d8be>coupling</em></li><li data-v-2ce8d8be> Static method to bundle any arguments and return the <code class="prettyprint" data-v-2ce8d8be>fragment</code> leads to <em class="green" data-v-2ce8d8be>decoupling</em> as any activity can pass its data and receive the fragment </li></ul></div><details data-v-2ce8d8be><summary data-v-2ce8d8be>Fragment Arguments example</summary><ul data-v-2ce8d8be><li data-v-2ce8d8be> See <a target="_blank" href="https://github.com/comp-bkt/todo-component-app/tree/kotlin" data-v-2ce8d8be>todo-component-app</a></li></ul> In TodoFragment <pre class="slide-small" data-v-2ce8d8be><code class="prettyprint prettyprinted" style="" data-v-2ce8d8be><span class="code_keyword" data-v-2ce8d8be>companion object</span> {
    <span class="code_keyword" data-v-2ce8d8be>private const val</span> ARG_TODO_ID = &quot;todo_id&quot;

    <span class="code_comments" data-v-2ce8d8be>/*
    Rather than calling the constructor directly, Activity(s) should call newInstance
    and pass required parameters that the fragment needs to create its arguments.
    */</span>

    <span class="code_keyword" data-v-2ce8d8be>fun</span> newInstance(todoId: <span class="code_datatype" data-v-2ce8d8be>UUID?</span>): <span class="code_datatype" data-v-2ce8d8be>TodoFragment</span> {
            <span class="code_keyword" data-v-2ce8d8be>val</span> args = <span class="code_datatype" data-v-2ce8d8be>Bundle()</span>
            args.putSerializable(ARG_TODO_ID, todoId)
            <span class="code_keyword" data-v-2ce8d8be>val</span> fragment = <span class="code_datatype" data-v-2ce8d8be>TodoFragment()</span>
            fragment.arguments = args
            <span class="code_keyword" data-v-2ce8d8be>return</span> fragment
    }
}</code></pre> In TodoActivity (or whichever Activity Class is creating the fragment) <pre class="slide-small" data-v-2ce8d8be><code class="prettyprint prettyprinted" style="" data-v-2ce8d8be><span class="code_comments" data-v-2ce8d8be>/*
Any Activity (such as TodoActivity) can
call the static method and pass it&#39;s intent data
to be bundles and recieve the decoupled fragment
*/</span>
<span class="code_keyword" data-v-2ce8d8be>fun</span> createFragment(todo:<span class="code_data_type" data-v-2ce8d8be>Todo</span>): <span class="code_data_type" data-v-2ce8d8be>Fragment</span> {
    <span class="code_keyword" data-v-2ce8d8be>return</span> <span class="code_data_type" data-v-2ce8d8be>TodoFragment</span>.Companion.newInstance(todo!!.id)
}</code></pre><p data-v-2ce8d8be> The same pattern was applied to decouple intents with data being passed with a static method returning the intent. Revisit the Activity and Intent section for a reminder</p></details></details></li><li class="list-style-none left-margin-none panel" data-v-2ce8d8be><details data-v-2ce8d8be><summary class="" data-v-2ce8d8be>TodoModel for Fragments</summary><ul data-v-2ce8d8be><li data-v-2ce8d8be>The model provides data to the fragment controller</li><li data-v-2ce8d8be><code class="prettyprint" data-v-2ce8d8be>singleton</code> provides a simple implementation </li><li data-v-2ce8d8be><a href="https://github.com/comp-bkt/todo-component-app/blob/kotlin/app/src/main/java/com/example/todolistapp/TodoModel.kt" target="_blank" data-v-2ce8d8be>example code</a></li></ul></details></li></ul></div></details><details class="panel" data-v-2ce8d8be><summary data-v-2ce8d8be>Useful Android Developer Pages</summary><div class="slide-article panel" data-v-2ce8d8be><ul data-v-2ce8d8be><li data-v-2ce8d8be><a href="https://developer.android.com/reference/kotlin/androidx/fragment/app/Fragment" target="_blank" data-v-2ce8d8be>Fragment | Android Developer Docs (AndroidX)</a></li><li data-v-2ce8d8be><a href="https://developer.android.com/guide/fragments" target="_blank" data-v-2ce8d8be>Guide to Fragments</a></li><li data-v-2ce8d8be><a href="https://developer.android.com/guide/fragments/fragmentmanager" target="_blank" data-v-2ce8d8be>Guide to Fragment Manager</a></li></ul></div></details>`,3),Xc=[Qc];function zc(a,e,t,s,n,d){return sa(),oa("article",Jc,Xc)}const Gc=la(Kc,[["render",zc],["__scopeId","data-v-2ce8d8be"]]),Yc={name:"Threads"},Zc={id:"java-review",class:"lab-sheet panel"},ai=ma(`<h2>Java Review</h2><details><summary>Start here!</summary><p> The Introduction to Programming in Java is a good concise reference. See the lecture notes and complete the exercises. This is a minimum needed before attempting to code in any framework such as Android. </p><details><summary> can you explain <code class="prettyprint prettyprinted" style=""><span class="kwd">static</span></code> types and methods? </summary><pre class="slide-small">if (true) {
   continue to lab exercises
} else {
   Read <a target="_blank" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-092-introduction-to-programming-in-java-january-iap-2010/lecture-notes/">Introduction to Programming in Java ‐ from MIT</a>
   Watch <a target="_blank" href="https://www.youtube.com/watch?v=ckYwv4_Qtmo">Java Memory Management</a>, video from Virtual Pair Programmers
   <a target="_blank" href="http://www.greenteapress.com/thinkjava5/index.html">Think Java</a> is a good online reference book
   Use the android &amp; stackoverflow search in the header
}</pre></details></details><details><summary>Threads and Synchronisation</summary><ul><li><code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code> is a sequence of instructions that can be managed <em>independantly</em> by a scheduler </li><li><em>Independently</em> scheduling threads allows for one thread, for example, downloading data while another thread runs the view of an app </li><li><em>Thread safe</em> classes and <em>synchronisation</em> becomes important </li><li><details><summary><code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code>s a Hello World example </summary><details><summary><code class="prettyprint prettyprinted" style=""><span class="typ">Runnable</span><span class="pln"></span><span class="typ">Interface</span></code></summary><ul><li> Single method, <code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"></span><span class="kwd">void</span></code> with no arguments<br><code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"></span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span></code></li></ul></details><details><summary> Hello (on a <code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code>) World (on another <code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code>) </summary><pre><code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ThreadDemo</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">&quot;Hello (on a thread) World (on another thread)!&quot;</span><span class="pun">);</span><span class="pln">

      </span><span class="com">/* anonymous class implementing Runnable interface run()
            method passed to Runnable */</span><span class="pln">
      </span><span class="typ">Runnable</span><span class="pln"> objHello </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
         </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;=</span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
               </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">&quot;Hello &quot;</span><span class="pun">);</span><span class="pln">
               </span><span class="com">/* do some nice processing! */</span><span class="pln">
               </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="lit">1000</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">){}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">};</span><span class="pln">

      </span><span class="typ">Runnable</span><span class="pln"> objWorld </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
         </span><span class="com">/* anonymous class with run() method passed to Runnable */</span><span class="pln">
         </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;=</span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
               </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">&quot;World&quot;</span><span class="pun">);</span><span class="pln">
               </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="lit">3000</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">){}</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">};</span><span class="pln">

      </span><span class="typ">Thread</span><span class="pln"> threadHello </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="pln">objHello</span><span class="pun">);</span><span class="pln">
      </span><span class="typ">Thread</span><span class="pln"> threadWorld </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="pln">objWorld</span><span class="pun">);</span><span class="pln">

      threadHello</span><span class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span class="pln">
      </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">.</span><span class="pln">sleep</span><span class="pun">(</span><span class="lit">1000</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pun">(</span><span class="typ">Exception</span><span class="pln"> e</span><span class="pun">){}</span><span class="pln">
      threadWorld</span><span class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span class="pln">

</span><span class="com">//      System.out.println(threadHello.isAlive());</span><span class="pln">
</span><span class="com">//      try { threadHello.sleep(1000); } catch(Exception e){}</span><span class="pln">

      </span><span class="com">/* .join will force the calling thread to wait until it complete */</span><span class="pln">
</span><span class="com">//      try { threadHello.join(); } catch(Exception e){}</span><span class="pln">
</span><span class="com">//      try { threadWorld.join(); } catch(Exception e){}</span><span class="pln">

      </span><span class="com">/* check if method is alive after join */</span><span class="pln">
      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">threadHello</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; &quot;</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> threadHello</span><span class="pun">.</span><span class="pln">isAlive</span><span class="pun">());</span><span class="pln">
      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">threadWorld</span><span class="pun">.</span><span class="pln">getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; &quot;</span><span class="pln"> </span><span class="pun">+</span><span class="pln">  threadWorld</span><span class="pun">.</span><span class="pln">isAlive</span><span class="pun">());</span><span class="pln">

      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">&quot;Time for poetry&quot;</span><span class="pun">);</span><span class="pln">

   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre></details></details></li><li><details><summary><code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code>s a Hello World Synchronised example </summary><details><summary><code class="prettyprint prettyprinted" style=""><span class="typ">Runnable</span><span class="pln"></span><span class="typ">Interface</span></code></summary><ul><li> Single method, <code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"></span><span class="kwd">void</span></code> with no arguments<br><code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"></span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span></code></li></ul></details><details><summary> DoWork class to simulate load in a <code class="prettyprint prettyprinted" style=""><span class="typ">Thread</span></code></summary><pre><code class="prettyprint prettyprinted" style=""><span class="kwd">class</span><span class="pln"> </span><span class="typ">DoWork</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="com">/* Class to run in a thread
      Simulate the load by the number of calls to increment */</span><span class="pln">
   </span><span class="kwd">int</span><span class="pln"> count</span><span class="pun">;</span><span class="pln">

   </span><span class="com">/* needs to be synchronized and made thread safe */</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">synchronized</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> increment</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      count</span><span class="pun">++;</span><span class="pln">  </span><span class="com">// increment is more than one operation!</span><span class="pln">
   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre></details><details><summary>Synchronised Hello World</summary><pre><code class="prettyprint prettyprinted" style=""><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SyncDemo</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> args</span><span class="pun">[])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">&quot;Synchronised value from both Hello and World threads&quot;</span><span class="pun">);</span><span class="pln">

      </span><span class="typ">DoWork</span><span class="pln"> doWork </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">DoWork</span><span class="pun">();</span><span class="pln">

      </span><span class="com">/* annoymous class implementing Runnable interface run()
         method passed to Runnable */</span><span class="pln">
      </span><span class="typ">Runnable</span><span class="pln"> objHello </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

         </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;=</span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
               doWork</span><span class="pun">.</span><span class="pln">increment</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln"> doWork</span><span class="pun">.</span><span class="pln">count </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; Hello &quot;</span><span class="pun">);</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">};</span><span class="pln">

      </span><span class="typ">Runnable</span><span class="pln"> objWorld </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Runnable</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
         </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> run</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

            </span><span class="kwd">for</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">=</span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">&lt;=</span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
               doWork</span><span class="pun">.</span><span class="pln">increment</span><span class="pun">();</span><span class="pln">
            </span><span class="pun">}</span><span class="pln">

            </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln"> doWork</span><span class="pun">.</span><span class="pln">count </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; World &quot;</span><span class="pun">);</span><span class="pln">
         </span><span class="pun">}</span><span class="pln">
      </span><span class="pun">};</span><span class="pln">

      </span><span class="typ">Thread</span><span class="pln"> threadHello </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="pln">objHello</span><span class="pun">);</span><span class="pln">
      </span><span class="typ">Thread</span><span class="pln"> threadWorld </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Thread</span><span class="pun">(</span><span class="pln">objWorld</span><span class="pun">);</span><span class="pln">

      threadHello</span><span class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span class="pln">
      threadWorld</span><span class="pun">.</span><span class="pln">start</span><span class="pun">();</span><span class="pln">

      </span><span class="com">/* .join will force the calling thread to wait until it complete */</span><span class="pln">
</span><span class="com">//      try { threadHello.join(); } catch(Exception e){}</span><span class="pln">
</span><span class="com">//      try { threadWorld.join(); } catch(Exception e){}</span><span class="pln">

      </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">doWork</span><span class="pun">.</span><span class="pln">count </span><span class="pun">+</span><span class="pln"> </span><span class="str">&quot; reminders for poetry&quot;</span><span class="pun">);</span><span class="pln">

   </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code></pre></details></details></li></ul></details>`,3),ei=[ai];function ti(a,e,t,s,n,d){return sa(),oa("article",Zc,ei)}const si=la(Yc,[["render",ti]]),ni={name:"Architecture"},di={id:"architecture-slide",class:"slide panel"},oi=ma('<h2>Architecture</h2><div class="slide-article"><details><summary>Model‐View‐Controller(MVC)</summary><span data-class="image width-full" data-image="MVC diagram" data-local-src="assets/mvc.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fmvc.png?v=1575411771781"></span><ul class="float-left"><li> View (Layout files), Controllers (Activities/Fragments), Models (data and persistence)? </li><li>Business logic in Activity / Fragment</li><li> Code closely coupled to Android Framework &amp; lifecycle events <em>difficult to test</em></li><li><ul><li>Activities/Fragments and Views should be the View in MVC</li><li> Controllers should be separate classes that do not extend Android classes </li><li><a target="_blank" href="https://medium.com/upday-devs/android-architecture-patterns-part-1-model-view-controller-3baecef5f2b6#f68d">Passive Model</a> and <a target="_blank" href="https://medium.com/upday-devs/android-architecture-patterns-part-1-model-view-controller-3baecef5f2b6#f68d">Active Model (model notifies the view)</a></li></ul></li></ul></details><details><summary>Model‐View‐Presenter(MVP)</summary><span data-class="image width-full" data-image="MVP diagram" data-local-src="assets/mvp.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fmvp.png?v=1575411779112"></span><ul><li>Activities/Fragments are part of the View layer</li><li>Activity has corresponding Presenter for access to Model</li><li> Code example TodoMVP <span data-class="image width-full" data-image="MVP Class Structure" data-local-src="assets/MVPClassStructure.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2FMVPClassStructure.png?v=1575417840916"></span></li><li><a target="_blank" href="https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b">Google case study, upday app</a></li></ul></details><details><summary>Model‐View‐ViewModel</summary><details><summary>Android final architecture, MVx! to MVVM</summary><span data-class="image width-full" data-image="MVVM diagram" data-local-src="assets/android-final-architecture.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fandroid-final-architecture.png?v=1573684803675"></span><ul><li> Android Data Binding Framework ‐ <code class="prettyprint">ViewModel</code> retrieve data from model when requested from the view </li><li> Data binding pattern reduces code and <code class="prettyprint">Activities/Fragments</code> become very light weight </li><li> Unit testing made easier ‐ <code class="prettyprint">ViewModel</code> are decoupled from the view </li><li><code class="prettyprint">ViewModel</code> have process scope </li><li> MVP the <code class="prettyprint">Presenter</code> calls the view to display </li><li> MVVM the <code class="prettyprint">ViewModel</code> exposes stream of events for <code class="prettyprint">Views</code> to bind to. No need for all the MVP interfaces. </li><li> Separation of concerns (MVC, MVP, MVVM), MVVM advantage is data binding making event driven apps easier by delegating to Model and minimizing logic in Views </li><li><a target="_blank" href="https://developer.android.com/jetpack/docs/guide">Google guide to app architecture</a></li></ul></details><details><summary>MVVM Implementation</summary><span data-class="image width-full" data-image="Android MVVM diagram" data-local-src="assets/android-final-architecture.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fandroid-mvvm.png?v=1573685057510"></span><ul><li><a target="_blank" href="https://github.com/comp-bkt/TodoMVVM">https://github.com/comp-bkt/TodoMVVM</a></li><li> Practical: IDE, Gradle plugins, RxJava library <code class="prettyprint">Observable</code> (Java 9 deprecated Observable) </li><li><a target="_blank" href="https://medium.com/upday-devs/android-architecture-patterns-part-3-model-view-viewmodel-e7eeee76b73b">Google case study, upday app</a></li></ul></details></details></div>',2),li=[oi];function ci(a,e,t,s,n,d){return sa(),oa("article",di,li)}const ii=la(ni,[["render",ci]]),ri="/assets/todo_first_setup-433f4f66.png";const pi={name:"TodoDetail"},ui={id:"todo-first",class:"lab-sheet panel"},fi=ma(`<h2 data-v-8e765e54>A first <em data-v-8e765e54>todo</em> app  </h2><p data-v-8e765e54> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-first-app" data-v-8e765e54>https://github.com/comp-bkt/todo-first-app</a></p><p data-v-8e765e54> The repository contains 2 branches - main (JAVA) &amp; kotlin (Kotlin) </p><p data-v-8e765e54><em data-v-8e765e54>First todo app</em><code class="prettyprint" data-article="todo-first" data-v-8e765e54>: MVC, Manifest, Activity, onCreate, View Objects, lifecycle, Listeners, Anonymous functions, event handlers, callbacks, Bundle, Resources </code></p><section data-v-8e765e54><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Overview</summary><h2 data-v-8e765e54>Activity class, XML Layouts and View objects</h2><p data-v-8e765e54> For simplicity, in this TODO app implementation the data is a simple <code class="prettyprint" data-v-8e765e54>static-array</code> defined as a resource; in later exercises, the model logic and data is abstracted into its own model classes. </p><p data-v-8e765e54> Android <code class="prettyprint" data-v-8e765e54>View</code> objects, implement methods to draw themselves on the screen and provide for Events to handle user input. The layout and the View objects hierarchy are defined in XML and are inflated into <code class="prettyprint" data-v-8e765e54>View</code> objects as part of a <code class="prettyprint" data-v-8e765e54>Activity</code> class initialisation. </p><p data-v-8e765e54><code class="prettyprint" data-v-8e765e54>Activity</code> classes in Android, connect the view and the model objects together by responding to events triggered by View objects and manage the flow of data between the model and the view. A <code class="prettyprint" data-v-8e765e54>click</code> on a <code class="prettyprint" data-v-8e765e54>Button</code> View object is a common example of an event handled by a <code class="prettyprint" data-v-8e765e54>Activity</code> class. </p><p data-v-8e765e54> Android framework lends itself to the MVC architecture and it follows naturally particularly with the view objects and layout being abstracted and separately defined in XML and the <code class="prettyprint" data-v-8e765e54>Activity</code> classes controlling the User Interaction(UI) on the view objects. The separation of the Model and the Controller has to follow good programming practice. A controller as its name suggest should only have control logic and delegate all else to model classes. </p></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Create an Android project</summary><pre class="slide-small" data-v-8e765e54>In Android Studio:

<kbd data-v-8e765e54>Start a new Android Studio project</kbd>

Select <code class="prettyprint" data-v-8e765e54> Phone+Tablet and Empty Activity</code>

Application Name: <code class="prettyprint" data-v-8e765e54>todo_first</code>

Package Name: <code class="prettyprint" data-v-8e765e54>example.com.todo_first</code>

Make sure that Kotlin and the latest Android Platform are chosen - currently 33.

<img src="`+ri+`" alt="Settings for New Project" data-v-8e765e54>

<kbd class="ui-button-action" data-v-8e765e54>⇒Finish</kbd>

<em data-v-8e765e54>Android Studio creates all the necessary files and opens the IDE.</em>

<strong data-v-8e765e54>Run ⇒ Run App</strong>

Setup or use an existing virtual device,
choose <strong data-v-8e765e54>Pixel 4a API 33 targeted for Android 13.0 (Google Play)</strong>

(installing the virtual device may take some time.)
Once Android is running, the default &#39;Hello World!&#39; message is displayed.

On the github version of this code the MainActivity class has been refactored to TodoActivity.
</pre></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Model</summary><p data-v-8e765e54> This first <code class="prettyprint" data-v-8e765e54>Todo</code> prototype cycles through a list of Todos without any further complexity or persistent storage. As such all that is needed is a <code class="prettyprint" data-v-8e765e54>todos</code> array which can be stored as a <code class="prettyprint" data-v-8e765e54>string-array</code> resource. </p><details data-v-8e765e54><summary data-v-8e765e54> Add a <code class="prettyprint" data-v-8e765e54>todos</code> string array as a <code class="prettyprint" data-v-8e765e54>resource</code></summary><p data-v-8e765e54> Open the <code class="prettyprint" data-v-8e765e54>res/values/string.xml</code> file and replace the <code class="prettyprint" data-v-8e765e54>resources</code> XML element with the following: </p><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54><span class="xml_element" data-v-8e765e54>&lt;resources&gt;</span>

   <span class="xml_element" data-v-8e765e54>&lt;string</span> <span class="xml_attribute" data-v-8e765e54>name</span><span class="xml_value" data-v-8e765e54>=&quot;app_name&quot;</span>&gt;Android_todo_first<span class="xml_element" data-v-8e765e54>&lt;/string&gt;</span>

      <span class="xml_element" data-v-8e765e54>&lt;string-array</span> <span class="xml_attribute" data-v-8e765e54>name</span><span class="xml_value" data-v-8e765e54>=&quot;todos&quot;</span>&gt;
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Wake up<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Drink Coffee<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Make at least one person laugh<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Plant a tree<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Ponder on duality of existance<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
      <span class="xml_element" data-v-8e765e54>&lt;item&gt;</span>Go to sleep<span class="xml_element" data-v-8e765e54>&lt;/item&gt;</span>
   <span class="xml_element" data-v-8e765e54>&lt;/string-array&gt;</span>

<span class="xml_element" data-v-8e765e54>&lt;/resources&gt;</span></code></pre></details><p data-v-8e765e54><q cite="https://developer.android.com/reference/android/view/View" data-v-8e765e54> As part of the build process, the SDK tools generate symbols for each resource, which you can use in your application code to access the resources. </q></p><p data-v-8e765e54><q cite="https://developer.android.com/guide/topics/resources/providing-resources" data-v-8e765e54> Resources are the additional files and static content that your code uses, such as bitmaps, layout definitions, user interface strings, animation instructions, and more. See: <a target="_blank" href="https://developer.android.com/guide/topics/resources/providing-resources" data-v-8e765e54>App resources overview</a></q></p><p data-v-8e765e54> Symbols, <code class="prettyprint" data-v-8e765e54>app_name</code> and <code class="prettyprint" data-v-8e765e54>todos</code> can now be used as global variables! </p></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>View</summary><p data-v-8e765e54> The Android <code class="prettyprint" data-v-8e765e54>View</code> class represents the basic building block for user interface components. Android provides a set of User Interactive components (button, text fields, etc.) referred to as <em data-v-8e765e54>widgets</em>. <code class="prettyprint" data-v-8e765e54>View</code> is the base class for <em data-v-8e765e54>widgets</em>. The <code class="prettyprint" data-v-8e765e54>View</code> widgets can be grouped together into invisible container classes known as <code class="prettyprint" data-v-8e765e54>layouts</code>. </p><p data-v-8e765e54><q cite="https://developer.android.com/guide/topics/ui/" data-v-8e765e54>Android also provides other UI modules for special interfaces such as dialogs, notifications, and menus.</q>. To get started, read <a target="_blank" href="https://developer.android.com/guide/topics/ui/declaring-layout" data-v-8e765e54>layouts</a> and review <a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-1-build-your-first-app/1-2-c-layouts-and-resources-for-the-ui/1-2-c-layouts-and-resources-for-the-ui.html" data-v-8e765e54>Layouts and resources for the UI</a></p><details data-v-8e765e54><summary data-v-8e765e54><code class="prettyprint" data-v-8e765e54>Todo</code> View</summary><p data-v-8e765e54> The <code class="prettyprint" data-v-8e765e54>Todo</code> view definition below is an XML definition of a <code class="prettyprint" data-v-8e765e54>ConstraintLayout</code> container that contains the definition of a <code class="prettyprint" data-v-8e765e54>TextView</code> widget intended to hold the <code class="prettyprint" data-v-8e765e54>todo</code> text and two <code class="prettyprint" data-v-8e765e54>Button</code> widgets for <em data-v-8e765e54>next</em> and <em data-v-8e765e54>prev</em> cycling through the <code class="prettyprint" data-v-8e765e54>todos</code>. </p><p data-v-8e765e54> Open the <code class="prettyprint" data-v-8e765e54>res/layout/activity_todo.xml</code> file and replace the content with the following view definition. </p><details data-v-8e765e54><summary data-v-8e765e54><code class="prettyprint" data-v-8e765e54>Todo</code> view definition </summary><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
<span class="xml_element" data-v-8e765e54>&lt;androidx.constraintlayout.widget.ConstraintLayout</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:android</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/apk/res/android&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:app</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/apk/res-auto&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:tools</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/tools&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>tools</span><span class="xml_attribute" data-v-8e765e54>:context</span><span class="xml_value" data-v-8e765e54>=&quot;.TodoActivity&quot;</span> &gt;

    <span class="xml_element" data-v-8e765e54>&lt;TextView</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/textViewTodo&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/todos&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintLeft_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toRightOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintTop_toTopOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span> /&gt;

    <span class="xml_element" data-v-8e765e54>&lt;Button</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonPrev&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginStart</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginBottom</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/prev&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintHorizontal_bias</span><span class="xml_value" data-v-8e765e54>=&quot;0&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintLeft_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonNext&quot;</span> /&gt;

    <span class="xml_element" data-v-8e765e54>&lt;Button</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonNext&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginBottom</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginEnd</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/next&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toRightOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span> /&gt;

<span class="xml_element" data-v-8e765e54>&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span></code></pre></details><p data-v-8e765e54> Note, the <span class="error" data-v-8e765e54>errors</span>, <code class="prettyprint" data-v-8e765e54>Cannot resolve symbol</code> for resource names. </p><p data-v-8e765e54> To define these resources (constant strings!), open the <code class="prettyprint" data-v-8e765e54>res/values/string.xml</code> file and insert the following after the <code class="prettyprint" data-v-8e765e54>app_name</code> definition. </p><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54><span class="xml_element" data-v-8e765e54>&lt;string</span> <span class="xml_attribute" data-v-8e765e54>name</span><span class="xml_value" data-v-8e765e54>=&quot;todos&quot;</span>&gt;Todos<span class="xml_element" data-v-8e765e54>&lt;/string&gt;</span>
<span class="xml_element" data-v-8e765e54>&lt;string</span> <span class="xml_attribute" data-v-8e765e54>name</span><span class="xml_value" data-v-8e765e54>=&quot;next&quot;</span>&gt;Next<span class="xml_element" data-v-8e765e54>&lt;/string&gt;</span>
<span class="xml_element" data-v-8e765e54>&lt;string</span> <span class="xml_attribute" data-v-8e765e54>name</span><span class="xml_value" data-v-8e765e54>=&quot;prev&quot;</span>&gt;Prev<span class="xml_element" data-v-8e765e54>&lt;/string&gt;</span></code></pre><p data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the app to see the view.</p></details></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Controller</summary><p data-v-8e765e54> Android <code class="prettyprint" data-v-8e765e54>Activity</code> is the <em data-v-8e765e54>controller</em> class for any view and it&#39;s user interaction. For a brief overview, read <a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-1-c-activities-and-intents/2-1-c-activities-and-intents.html#activitynavigation" data-v-8e765e54>the first section on activities</a>. </p><p data-v-8e765e54> The <code class="prettyprint" data-v-8e765e54>TodoActivity</code> class has the default skeleton of an activity <code class="prettyprint" data-v-8e765e54>controller</code> class with the default <code class="prettyprint" data-v-8e765e54>onCreate</code> method override. </p><p data-v-8e765e54> The first call in <code class="prettyprint" data-v-8e765e54>onCreate</code> is to the parent <code class="prettyprint" data-v-8e765e54>onCreate</code> to complete task such as building the View hierarchy. And second, a call to <code class="prettyprint" data-v-8e765e54>setContentView(R.layout.activity_todo)</code>. If this is not clear, please read <a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-1-c-activities-and-intents/2-1-c-activities-and-intents.html#activitynavigation" data-v-8e765e54>the first section on activities</a>. </p><p data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the app and remind yourself of the view. The User interaction to be coded is with the click events on the <code class="prettyprint" data-v-8e765e54>prev</code> and <code class="prettyprint" data-v-8e765e54>next</code> view buttons. </p><p data-v-8e765e54> A click event on an object requires a click <code class="prettyprint" data-v-8e765e54>listener</code> and a corresponding handler method to respond to the click event. The following implementation reuses the view object <code class="prettyprint" data-v-8e765e54>setOnClickListener</code> and an anonymous function to handle the event. </p><p data-v-8e765e54> Handling the click event is to override the <code class="prettyprint" data-v-8e765e54>onClick</code> event with code to update the <code class="prettyprint" data-v-8e765e54>textView</code> object with the current <code class="prettyprint" data-v-8e765e54>todo</code> data. Before this, the <code class="prettyprint" data-v-8e765e54>todo</code> data has to be retrieved from the <code class="prettyprint" data-v-8e765e54>string-array</code>. </p><p data-v-8e765e54>Overall logic:</p><ol data-v-8e765e54><li data-v-8e765e54> initialise <code class="prettyprint" data-v-8e765e54>TodoTextView</code> object for displaying <code class="prettyprint" data-v-8e765e54>todos</code></li><li data-v-8e765e54> read an array, <code class="prettyprint" data-v-8e765e54>mTodos</code>, from <code class="prettyprint" data-v-8e765e54>res/values/strings.xml</code></li><li data-v-8e765e54> display the first task from <code class="prettyprint" data-v-8e765e54>mTodos</code> array in the <code class="prettyprint" data-v-8e765e54>TodoTextView</code></li><li data-v-8e765e54> initialise <code class="prettyprint" data-v-8e765e54>buttonNext</code> to override its <code class="prettyprint" data-v-8e765e54>setOnClickListener</code></li><li data-v-8e765e54> instantiate a new anonymous <code class="prettyprint" data-v-8e765e54>View.OnClickListener</code> function as a handler for the <code class="prettyprint" data-v-8e765e54>buttonNext.onClickListener</code>. </li><li data-v-8e765e54> override the <code class="prettyprint" data-v-8e765e54>onClick</code> method in the anonymous function to cycle the <code class="prettyprint" data-v-8e765e54>mTodo</code> array (checking for the end of array) and update the <code class="prettyprint" data-v-8e765e54>TodoTextView</code> with the current todo. </li></ol><details data-v-8e765e54><summary data-v-8e765e54><code class="prettyprint" data-v-8e765e54>TodoActivity</code> code</summary><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54>
<span class="code_keyword" data-v-8e765e54>class</span> TodoActivity : AppCompatActivity() {

    <span class="code_keyword" data-v-8e765e54>private lateinit var</span> mTodos: <span class="code_data_type" data-v-8e765e54>Array&lt;String&gt;</span>
    <span class="code_keyword" data-v-8e765e54>private var</span> mTodoIndex = 0

    <span class="code_keyword" data-v-8e765e54>override fun</span> onCreate(savedInstanceState: <span class="code_data_type" data-v-8e765e54>Bundle?</span>) {
        <span class="code_keyword" data-v-8e765e54>super</span>.onCreate(savedInstanceState)
        setContentView(R.layout.activity_todo)

        <span class="code_comments" data-v-8e765e54>// initialize member TextView so we can manipulate it later</span>
        <span class="code_keyword" data-v-8e765e54>val</span> TodoTextView: <span class="code_data_type" data-v-8e765e54>TextView</span> = findViewById(R.id.textViewTodo);

        <span class="code_comments" data-v-8e765e54>// read the todo array from res/values/strings.xml</span>
        <span class="code_keyword" data-v-8e765e54>val</span> res: <span class="code_data_type" data-v-8e765e54>Resources</span> = resources
        mTodos = res.getStringArray(R.array.todos)

        <span class="code_comments" data-v-8e765e54>// display the first task from mTodo array in the TodoTextView</span>
        TodoTextView.setText(mTodos[mTodoIndex]);

        <span class="code_keyword" data-v-8e765e54>val</span> buttonNext: <span class="code_data_type" data-v-8e765e54>Button</span> = findViewById(R.id.buttonNext)

        <span class="code_comments" data-v-8e765e54>// OnClick listener for the  Next button</span>
        buttonNext.setOnClickListener {
            mTodoIndex += 1;
            TodoTextView.setText(mTodos[mTodoIndex]);
        }
    }
}          </code></pre></details><ol data-v-8e765e54><li data-v-8e765e54> Update the <code class="prettyprint" data-v-8e765e54>TodoActivity</code> class with the code above </li><li data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the code</li><li data-v-8e765e54> Note, the <span class="error" data-v-8e765e54>errors</span>, <code class="prettyprint" data-v-8e765e54>Cannot resolve symbol</code>. </li><li data-v-8e765e54> To resolve the <span class="error" data-v-8e765e54>errors</span>, click on each object and press the keys, <kbd data-v-8e765e54>alt return</kbd> to add the import statement for the object referenced. </li><li data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the code again</li><li data-v-8e765e54> the code should compile and run with a logic error. The <code class="prettyprint" data-v-8e765e54>Next</code> button crashes on the last item in the <code class="prettyprint" data-v-8e765e54>Todos</code> array. </li><li data-v-8e765e54>See the Debug section for resolving the error</li></ol></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Debug</summary><p data-v-8e765e54><em data-v-8e765e54>Compile time errors</em> are generally to do with syntactical rules and relatively easy to correct. Read the error message (at least twice!) and if it is not clear, search the error message in known sites such as <a target="_blank" href="https://developer.android.com/guide/index.html" data-v-8e765e54>Android Developer API Guides (note, the site has a powerful search)</a> and <a target="_blank" href="https://stackoverflow.com/questions/tagged/android" data-v-8e765e54>Stack overflow</a>. </p><p data-v-8e765e54><em data-v-8e765e54>Run time errors</em> are due to inconsistency in the program logic or algorithm. For example, the <code class="prettyprint" data-v-8e765e54>TodoActivity</code> runs fine until the index is incremented beyond the last element of the <code class="prettyprint" data-v-8e765e54>todos</code> array. </p><p data-v-8e765e54> If the run time error message was not immediately clear then the next step is to see the stack trace in the Android Monitor tab (bottom tool bar). There is generally a link with the class name and line number that you could click. This is the last statement that could not be executed. </p><p data-v-8e765e54> If examining the stack trace did not resolve the run time error; it is useful to set a debugging break point at the line number the execution stopped. </p><ol data-v-8e765e54><li data-v-8e765e54> Click on the left margin of the line of code, mTodoIndex += 1; and notice the red circle. </li><li data-v-8e765e54><kbd data-v-8e765e54>Run &gt; Debug &#39;app&#39;</kbd></li><li data-v-8e765e54> Click on <kbd data-v-8e765e54>Next</kbd> and note how the program stops at the break point just set. </li><li data-v-8e765e54> Note the values of the variables. Hovering over any object or variable will reveal their current value. </li><li data-v-8e765e54> Try stepping through the code and see the <code class="prettyprint" data-v-8e765e54>mTodoIndex</code> values until it crashes. </li><li data-v-8e765e54> Stepping through the code between break points and examining expected values provide further information for resolving runtime error messages. </li></ol><details data-v-8e765e54><summary data-v-8e765e54> Solution to <code class="prettyprint" data-v-8e765e54>TodoActivity</code> error <span class="error" data-v-8e765e54>ArrayIndexOutOfBoundsException</span></summary><p data-v-8e765e54> There is a failure in the logic in that the index for the array is incremented without checking for the end of the array. This leads to an attempt to access a non-existent element of the array, hence, <span class="error" data-v-8e765e54>ArrayIndexOutOfBoundsException</span></p><p data-v-8e765e54> Correct code that does check for the size of the array:<br data-v-8e765e54><code class="prettyprint&gt;" data-v-8e765e54>mTodoIndex = (mTodoIndex + 1) % mTodos.length;</code><br data-v-8e765e54> (Note, % in Java returns the remainder, hence the index will never exceed the array size an alternative less efficient solution would be to test for the size of the array). </p></details></details><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Activity Life cycle and the &quot;rotation problem&quot;</summary><p data-v-8e765e54>To see the rotation problem:</p><ol data-v-8e765e54><li data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the app and move to the second todo</li><li data-v-8e765e54>rotate the phone and notice the display is the first todo</li></ol><p data-v-8e765e54> Every instance of an <code class="prettyprint" data-v-8e765e54>Activity</code> has a life cycle and transitions between 4 states namely, <em data-v-8e765e54>resumed, paused, stopped</em> and <em data-v-8e765e54>nonexistent</em> with corresponding methods: <code class="prettyprint" data-v-8e765e54>onCreate, onDestroy, onStart, onStop, onResume</code> and <code class="prettyprint" data-v-8e765e54>onPause</code>. These methods are called life cycle callbacks. We override these callbacks and Android calls the <em data-v-8e765e54>life cycle callbacks</em> at the appropriate time such as after rotating the phone. </p><p data-v-8e765e54> Read this overview of <a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-2-c-activity-lifecycle-and-state/2-2-c-activity-lifecycle-and-state.html" data-v-8e765e54>Activity lifecycle and state</a>. </p><p data-v-8e765e54> The solution to <em data-v-8e765e54>rotation problem</em> is to store the <code class="prettyprint" data-v-8e765e54>TODO_INDEX</code> across rotation state changes. On rotating the phone, Android calls the <code class="prettyprint" data-v-8e765e54>Activity</code>&#39;s callback method <code class="prettyprint" data-v-8e765e54>onSaveInstanceState(Bundle)</code>. This method can be overridden and include code to store the <code class="prettyprint" data-v-8e765e54>TODO_INDEX</code>. </p><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54><span class="code_comments" data-v-8e765e54>/* In case of state change, such as rotating the phone, store the mTodoIndex */</span>

<span class="code_comments" data-v-8e765e54>/* override to write the value of mTodoIndex into the Bundle with TODO_INDEX as its key */</span>

<span class="code_keyword" data-v-8e765e54>private val</span> TODO_INDEX = &quot;todoIndex&quot;

<span class="code_keyword" data-v-8e765e54>override fun</span> onSaveInstanceState(savedInstanceState:<span class="code_data_type" data-v-8e765e54>Bundle</span>)
{
  <span class="code_keyword" data-v-8e765e54>super</span>.onSaveInstanceState(savedInstanceState);
  savedInstanceState.putInt(TODO_INDEX, mTodoIndex);
}
</code></pre><p data-v-8e765e54> Once the phone is rotated, Android calls the <code class="prettyprint" data-v-8e765e54>Activity</code>&#39;s <code class="prettyprint" data-v-8e765e54>onCreate(Bundle savedInstanceState)</code> callback method. Note, the <code class="prettyprint" data-v-8e765e54>Bundle</code> object <code class="prettyprint" data-v-8e765e54>savedInstanceState</code> has the <code class="prettyprint" data-v-8e765e54>TODO_INDEX, mTodoIndex)</code><em data-v-8e765e54>key, value</em> pair. The index can be retrieved in the <code class="prettyprint" data-v-8e765e54>onCreate</code> callback method and the correct <code class="prettyprint" data-v-8e765e54>todo</code> displayed. </p><pre class="slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54><span class="code_comments" data-v-8e765e54>/* check for saved state due to changes such as rotation and restore any saved state such as the TODO_INDEX */</span>
<span class="code_keyword" data-v-8e765e54>if</span> (savedInstanceState != <span class="code_keyword" data-v-8e765e54>null</span>){
  mTodoIndex = savedInstanceState.getInt(TODO_INDEX, 0);
}</code></pre><p data-v-8e765e54><kbd data-v-8e765e54>Run</kbd> the app, press <kbd data-v-8e765e54>Next</kbd>, rotate the phone and the same <code class="prettyprint" data-v-8e765e54>todo</code> should display, whereas previously it reset to the first <code class="prettyprint" data-v-8e765e54>todo</code>. </p><h3 data-v-8e765e54>Landscape view</h3><p data-v-8e765e54> Android detects the device configuration change and looks for resources that better match the changed configuration. For views, Android uses a configuration qualifier namely, using <code class="prettyprint" data-v-8e765e54>-land</code> suffix in the directory name. </p><p data-v-8e765e54> Try the following, to create a new landscape <code class="prettyprint" data-v-8e765e54>todo</code> view. </p><ol data-v-8e765e54><li data-v-8e765e54> At the project tab (top right), switch from <kbd data-v-8e765e54><u data-v-8e765e54>Android</u></kbd> to <kbd data-v-8e765e54><u data-v-8e765e54>Project</u></kbd> view </li><li data-v-8e765e54>Open <code class="prettyprint" data-v-8e765e54>app/src/main/res</code></li><li data-v-8e765e54><kbd data-v-8e765e54>Right-mouse click</kbd> on the <code class="prettyprint" data-v-8e765e54>res</code> folder and create a new Directory named, <code class="prettyprint" data-v-8e765e54>layout-land</code></li><li data-v-8e765e54><kbd data-v-8e765e54>Right-mouse click</kbd> on the <code class="prettyprint" data-v-8e765e54>layout-land</code> directory and create a new file named, <code class="prettyprint" data-v-8e765e54>activity_todo.xml</code> (the same filename as the portrait view definition) </li><li data-v-8e765e54><details data-v-8e765e54><summary data-v-8e765e54> Landscape view definition <code class="prettyprint" data-v-8e765e54>activity_todo.xml</code></summary><pre class="pretty slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
<span class="xml_element" data-v-8e765e54>&lt;androidx.constraintlayout.widget.ConstraintLayout</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:android</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/apk/res/android&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:app</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/apk/res-auto&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>xmlns:tools</span><span class="xml_value" data-v-8e765e54>=&quot;http://schemas.android.com/tools&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-8e765e54>tools</span><span class="xml_attribute" data-v-8e765e54>:context</span><span class="xml_value" data-v-8e765e54>=&quot;.TodoActivity&quot;</span> &gt;

    <span class="xml_element" data-v-8e765e54>&lt;TextView</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/textViewTodo&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/todos&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintLeft_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toRightOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintTop_toTopOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:textColor</span><span class="xml_value" data-v-8e765e54>=&quot;@android:color/holo_green_dark&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:textSize</span><span class="xml_value" data-v-8e765e54>=&quot;36sp&quot;</span> /&gt;

    <span class="xml_element" data-v-8e765e54>&lt;Button</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonPrev&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginStart</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginBottom</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/prev&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintHorizontal_bias</span><span class="xml_value" data-v-8e765e54>=&quot;0&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintLeft_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toLeftOf</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonNext&quot;</span> /&gt;

    <span class="xml_element" data-v-8e765e54>&lt;Button</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:id</span><span class="xml_value" data-v-8e765e54>=&quot;@+id/buttonNext&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_width</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_height</span><span class="xml_value" data-v-8e765e54>=&quot;wrap_content&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginBottom</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:layout_marginEnd</span><span class="xml_value" data-v-8e765e54>=&quot;16dp&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>android</span><span class="xml_attribute" data-v-8e765e54>:text</span><span class="xml_value" data-v-8e765e54>=&quot;@string/next&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintBottom_toBottomOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span>
        <span class="xml_namespace" data-v-8e765e54>app</span><span class="xml_attribute" data-v-8e765e54>:layout_constraintRight_toRightOf</span><span class="xml_value" data-v-8e765e54>=&quot;parent&quot;</span> /&gt;

<span class="xml_element" data-v-8e765e54>&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span></code></pre></details></li></ol></details><br data-v-8e765e54><details class="panel" data-v-8e765e54><summary data-v-8e765e54>Tasks</summary><ol data-v-8e765e54><li data-v-8e765e54>Create the <em data-v-8e765e54>first todo app</em></li><li data-v-8e765e54> Fix the runtime bug in the <code class="prettyprint" data-v-8e765e54>TodoActivity</code><code class="prettyprint" data-v-8e765e54>Next</code> button crashing at the end of the <code class="prettyprint" data-v-8e765e54>Todos</code> array. (see the Debug section) </li><li data-v-8e765e54> Similar to <code class="prettyprint" data-v-8e765e54>Next</code>, add the code for the <code class="prettyprint" data-v-8e765e54>Prev</code> button. </li><li data-v-8e765e54>Update the code to solve the &quot;rotation problem&quot;</li><li data-v-8e765e54> Add a landscape view; <kbd data-v-8e765e54>Run</kbd> and check for state changes in both views </li><li data-v-8e765e54> Make notes for the following: <code data-article="todo-first" data-v-8e765e54>: MVC, Manifest, Activity, onCreate, View Objects, lifecycle, Listeners, Anonymous functions, event handlers, callbacks, Bundle, Resources </code></li><li data-v-8e765e54> Starting from the <code class="prettyprint" data-v-8e765e54>manifest</code> main <code class="prettyprint" data-v-8e765e54>activity</code>, walk-through the code showing your understanding of the design and the implementation. How many steps and questions can you write down from the start in <code class="prettyprint" data-v-8e765e54>manifest</code> to the view being displayed? <ul data-v-8e765e54><li data-v-8e765e54> Manifest defines the main activity which has an <code class="prettyprint" data-v-8e765e54>onCreate</code> callback method </li><li data-v-8e765e54><pre class="slide-small" data-v-8e765e54><code class="prettyprint" data-v-8e765e54><span class="code_comments" data-v-8e765e54>/* call the super class onCreate to complete the creation of activity with state changes */</span>
<span class="code_keyword" data-v-8e765e54>super</span>.onCreate(savedInstanceState);

<span class="code_comments" data-v-8e765e54>/* set the user interface layout for this Activity */</span>
setContentView(R.layout.activity_todo);</code></pre></li><li data-v-8e765e54> Questions at this point in the walk-through the code: <ul data-v-8e765e54><li data-v-8e765e54>What is <code class="prettyprint" data-v-8e765e54>R</code>?</li><li data-v-8e765e54> What is <code class="prettyprint" data-v-8e765e54>savedInstanceState</code> and <code class="prettyprint" data-v-8e765e54>Bundle</code>? </li><li data-v-8e765e54> What format is the content of <code class="prettyprint" data-v-8e765e54>activity_todo</code>? </li><li data-v-8e765e54>What attribute defines the view object id?</li></ul></li><li data-v-8e765e54> Next step is an <code class="prettyprint" data-v-8e765e54>event</code> and a similar walk-through the <code class="prettyprint" data-v-8e765e54>event</code> handler </li><li data-v-8e765e54> Complete the walk-through; use breakpoints and comment your code </li></ul></li></ol></details></section>`,5),vi=[fi];function mi(a,e,t,s,n,d){return sa(),oa("article",ui,vi)}const hi=la(pi,[["render",mi],["__scopeId","data-v-8e765e54"]]),yi="/assets/todo_detail_setup-58dfc39b.png";const _i={name:"TodoDetail"},bi={id:"todo-detail",class:"lab-sheet panel"},gi=ma('<h2 data-v-c4a5f04f>A <em data-v-c4a5f04f>todo detail</em> app  </h2><p data-v-c4a5f04f> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app" data-v-c4a5f04f>https://github.com/comp-bkt/todo-detail-app</a></p><p data-v-c4a5f04f> The repository contains 2 branches - main (JAVA) &amp; kotlin (Kotlin) </p><p data-v-c4a5f04f><em data-v-c4a5f04f>Todo detail app</em><code class="prettyprint" data-article="todo-detail" data-v-c4a5f04f>: Intent, Extra, Communicating between activities, Static method, MVC, Activity, Intent, View Objects, Listeners, Anonymous functions, event handlers, callbacks, lifecycle, state instances, Bundle </code></p><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>Activity and Intent</summary><p data-v-c4a5f04f> The MVC implementation of a todo list of todos each with a todo detail. In terms of a class diagram, this could be a <code class="prettyprint" data-v-c4a5f04f>todolist</code> activity class associated with a <code class="prettyprint" data-v-c4a5f04f>todoDetail</code> Activity class. To create these classes an <code class="prettyprint" data-v-c4a5f04f>intent</code> communication object is passed from the <code class="prettyprint" data-v-c4a5f04f>todoList</code> activity to the <code class="prettyprint" data-v-c4a5f04f>ActivityManger</code> in Android which returns the intended <code class="prettyprint" data-v-c4a5f04f>todoDetail</code> object. This is after a user event selecting a todo for its details. Consider the following sequence diagram and follow the steps to create a <code class="prettyprint" data-v-c4a5f04f>todoDetailApp</code>. </p><details data-v-c4a5f04f><summary data-v-c4a5f04f>Sequence diagram — todoDetail app</summary><p data-v-c4a5f04f> Please note that the following image shows <u data-v-c4a5f04f>startActivityForResult</u> and <u data-v-c4a5f04f>onActivityResult()</u>. These are deprecated and replaced with the <u data-v-c4a5f04f>ActivityResultContracts</u></p><img class="full-width" src="'+Gn+`" alt="todoApp sequence diagram" data-v-c4a5f04f></details></details><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>Create an Android project</summary><pre class="slide-small" data-v-c4a5f04f>In Android Studio:

<kbd data-v-c4a5f04f>Start a new Android Studio project</kbd>

Select <code class="prettyprint" data-v-c4a5f04f> Phone+Tablet and Empty Activity</code>

Application Name: <code class="prettyprint" data-v-c4a5f04f>Todo Detail</code>

Package Name: <code class="prettyprint" data-v-c4a5f04f>com.example.todo</code>

Make sure that Kotlin and the latest Android Platform are chosen - currently 33.

<img src="`+yi+`" alt="Settings for New Project" data-v-c4a5f04f>

<kbd class="ui-button-action" data-v-c4a5f04f>⇒Finish</kbd>

<em data-v-c4a5f04f>Android Studio creates all the necessary files and opens the IDE.</em>

<strong data-v-c4a5f04f>Run ⇒ Run App</strong>

Setup or use an existing virtual device,
choose <strong data-v-c4a5f04f>Pixel 4a API 33 targeted for Android 13.0 (Google Play)</strong>

(installing the virtual device may take some time.)
Once Android is running, the default &#39;Hello World!&#39; message is displayed.

On the github version of this code the MainActivity class has been refactored to TodoActivity.
</pre></details><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>Model</summary><p data-v-c4a5f04f> A very basic model for testing is an array of <code class="prettyprint" data-v-c4a5f04f>todos</code> with a corresponding array of <code class="prettyprint" data-v-c4a5f04f>todo_detail</code>. </p><p data-v-c4a5f04f> Open the <code class="prettyprint" data-v-c4a5f04f>res/values/string.xml</code> file and replace the <code class="prettyprint" data-v-c4a5f04f>resources</code> XML element with the corresponding content from the <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app" data-v-c4a5f04f>git repository</a>. </p><p data-v-c4a5f04f><q cite="https://developer.android.com/reference/android/view/View" data-v-c4a5f04f> As part of the build process, the SDK tools generate symbols for each resource, which you can use in your application code to access the resources. </q></p><p data-v-c4a5f04f><q cite="https://developer.android.com/guide/topics/resources/providing-resources" data-v-c4a5f04f> Resources are the additional files and static content that your code uses, such as bitmaps, layout definitions, user interface strings, animation instructions, and more. See: <a target="_blank" href="https://developer.android.com/guide/topics/resources/providing-resources" data-v-c4a5f04f>App resources overview</a></q></p><p data-v-c4a5f04f> Symbols, <code class="prettyprint" data-v-c4a5f04f>app_name</code> and <code class="prettyprint" data-v-c4a5f04f>todos</code> can now be used as global variables! </p></details><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>View</summary><p data-v-c4a5f04f> The Android <code class="prettyprint" data-v-c4a5f04f>View</code> class represents the basic building block for user interface components. Android provides a set of User Interactive components (button, text fields, etc.) referred to as <em data-v-c4a5f04f>widgets</em>. <code class="prettyprint" data-v-c4a5f04f>View</code> is the base class for <em data-v-c4a5f04f>widgets</em>. The <code class="prettyprint" data-v-c4a5f04f>View</code> widgets can be grouped together into invisible container classes known as <code class="prettyprint" data-v-c4a5f04f>layouts</code>. </p><p data-v-c4a5f04f><q cite="https://developer.android.com/guide/topics/ui/" data-v-c4a5f04f>Android also provides other UI modules for special interfaces such as dialogs, notifications, and menus.</q>. To get started, read <a target="_blank" href="https://developer.android.com/guide/topics/ui/declaring-layout" data-v-c4a5f04f>layouts</a> and review <a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-1-build-your-first-app/1-2-c-layouts-and-resources-for-the-ui/1-2-c-layouts-and-resources-for-the-ui.html" data-v-c4a5f04f>Layouts and resources for the UI</a></p><details data-v-c4a5f04f><summary data-v-c4a5f04f><code class="prettyprint" data-v-c4a5f04f>TodoDetail</code> View</summary><p data-v-c4a5f04f> The <code class="prettyprint" data-v-c4a5f04f>TodoDetail</code> view definitions have the <code class="prettyprint" data-v-c4a5f04f>ConstraintLayout</code> container that contains the definition of the remainning widgets intended to hold the todos and their details. </p><p data-v-c4a5f04f> Replace the <code class="prettyprint" data-v-c4a5f04f>res/layout/</code> files with the corresponding content from the <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app" data-v-c4a5f04f>git repository</a></p><p data-v-c4a5f04f> Note, the <span class="error" data-v-c4a5f04f>errors</span>, <code class="prettyprint" data-v-c4a5f04f>Cannot resolve symbol</code> for resource names. </p><p data-v-c4a5f04f> To define these resources, view the corresponding content from the <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app" data-v-c4a5f04f>git repository</a> - <code class="prettyprint" data-v-c4a5f04f>colors.xml, strings.xml and styles.xml</code></p><p data-v-c4a5f04f><kbd data-v-c4a5f04f>Run</kbd> the app to see the view.</p></details></details><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>Controller</summary><ul data-v-c4a5f04f><li data-v-c4a5f04f> Refere to the sequence diagram. The <code class="prettyprint" data-v-c4a5f04f>TodoActivity</code> controller has a Todo details button click event and associated onClick handler. </li><li data-v-c4a5f04f> The button has a <code class="prettyprint" data-v-c4a5f04f>onClickListener</code> handler which calls the <code class="prettyprint" data-v-c4a5f04f>onClick()</code> method. This will call a <code class="prettyprint" data-v-c4a5f04f>static method in the TodoDetailActivity</code> controller, passing it the id of the todo and receiving the intent object. It also launches the activity through an <code class="prettyprint" data-v-c4a5f04f>ActivityResultLauncher</code> object that will have an <code class="prettyprint" data-v-c4a5f04f>ActivityResultContract</code> registered to handle the return event of coming back to the Todo Activity. <pre class="slide-small" data-v-c4a5f04f><code class="prettyprint" data-v-c4a5f04f>
val intent: Intent = TodoDetailActivity.Companion.newIntent(this@TodoActivity, mTodoIndex)
          </code></pre><pre class="slide-small" data-v-c4a5f04f><code class="prettyprint" data-v-c4a5f04f>
todoDetailActivityResultLauncher.launch(intent)
        </code>
                     </pre><pre class="slide-small" data-v-c4a5f04f><code class="prettyprint" data-v-c4a5f04f>
 val todoDetailActivityResultLauncher = registerForActivityResult&lt;Intent, ActivityResult&gt;(
                ActivityResultContracts.StartActivityForResult()
        )
        { result: ActivityResult -&gt;
            /*our code called on returning back to Activity*/
        }
        </code>
        </pre></li><li data-v-c4a5f04f> Refer to the <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app" data-v-c4a5f04f>git repository</a> code and create the <code class="prettyprint" data-v-c4a5f04f>TodoActivity</code> and <code class="prettyprint" data-v-c4a5f04f>TodoDetailActivity</code> classes. </li></ul></details><br data-v-c4a5f04f><details class="panel" data-v-c4a5f04f><summary data-v-c4a5f04f>Tasks</summary><ol data-v-c4a5f04f><li data-v-c4a5f04f>Create the <em data-v-c4a5f04f>todo detail app</em></li><li data-v-c4a5f04f> Similar to <code class="prettyprint" data-v-c4a5f04f>Next</code>, add the code for the <code class="prettyprint" data-v-c4a5f04f>Prev</code> button. </li><li data-v-c4a5f04f>Update the code to solve the &quot;rotation problem&quot;</li><li data-v-c4a5f04f> Add a landscape view; <kbd data-v-c4a5f04f>Run</kbd> and check for state changes in both views </li><li data-v-c4a5f04f> Add a landscape view; <kbd data-v-c4a5f04f>Run</kbd> and check for state changes in both views </li><li data-v-c4a5f04f> Make notes for the following: <code class="prettyprint" data-article="todo-first" data-v-c4a5f04f>: Intent, Extra, Communicating between activities, Static method</code></li><li data-v-c4a5f04f> Starting from the <code class="prettyprint" data-v-c4a5f04f>manifest</code> main <code class="prettyprint" data-v-c4a5f04f>activity</code>, walk-through the code showing your understanding of the design and the implementation of the <em data-v-c4a5f04f>todo detail</em> use case. How many steps and questions can you write down from the start in <code class="prettyprint" data-v-c4a5f04f>manifest</code> to the view being displayed? <ul data-v-c4a5f04f><li data-v-c4a5f04f> Manifest defines the main activity which has an <code class="prettyprint" data-v-c4a5f04f>onCreate</code> callback method </li><li data-v-c4a5f04f> Register an ActivityResultLauncher - see code in Controller section above and refer to github source code. </li><li data-v-c4a5f04f> Anonymous detail <code class="prettyprint" data-v-c4a5f04f>onClick</code> event handler </li><li data-v-c4a5f04f><pre class="slide-small" data-v-c4a5f04f><code class="prettyprint" data-v-c4a5f04f>
 buttonTodoDetail.setOnClickListener {
    /* code to create intent and call ActivityResultLauncher */
 }
 </code></pre></li><li data-v-c4a5f04f> Questions at this point in the walk-through the code: <ul data-v-c4a5f04f><li data-v-c4a5f04f>What is a static method? and why use it here?</li><li data-v-c4a5f04f>What is in <code class="prettyprint" data-v-c4a5f04f>newIntent</code>?</li><li data-v-c4a5f04f> Where is the <code class="prettyprint" data-v-c4a5f04f>todo</code> index stored? </li><li data-v-c4a5f04f>…</li></ul></li><li data-v-c4a5f04f> Next explanation could be an <code class="prettyprint" data-v-c4a5f04f>event</code> and a similar walk-through the <code class="prettyprint" data-v-c4a5f04f>event</code> handler in the <code class="prettyprint" data-v-c4a5f04f>detail</code> view checkbox for completed todos </li><li data-v-c4a5f04f> Complete the walk-through; use breakpoints and comment your code </li><li data-v-c4a5f04f> Add a new use case to indicate a pending incomplete <code class="prettyprint" data-v-c4a5f04f>todo</code> (similar to checkbox for completed todo) </li><li data-v-c4a5f04f> Explain <code class="prettyprint" data-v-c4a5f04f>ActivityResultContracts</code></li></ul></li></ol></details>`,11),wi=[gi];function xi(a,e,t,s,n,d){return sa(),oa("article",bi,wi)}const ki=la(_i,[["render",xi],["__scopeId","data-v-c4a5f04f"]]),Ti="/assets/todo_fragment_setup-eef3e62f.png",Ai={name:"TodoFragment"},Ci={id:"todo-fragment",class:"lab-sheet panel"},qi=ma('<h2>A <em>Todo Fragment</em> App  </h2><p> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app">https://github.com/comp-bkt/todo-fragment-app</a></p><p><em>Todo fragment app</em><code class="prettyprint" data-article="todo-fragment">: MVC, FragmentManager, FragmentTransaction, Fragment, Inflater, View Objects, callbacks</code></p><details class="panel"><summary>Fragments</summary><p> Whilst the Android XML view definition and view objects provide for separation of the V in MVC, the view remains tightly coupled with the Activity class. This is problematic in principle. The V in MVC needs to be more decoupled and further abstracted so that it could be composed and recomposed as necessary at run time. </p><p> It is true that an Activities view may change at run time but the code for the change is inside the activity, hence the tight coupling. To decouple is to abstract the view control code out of the Activity and delegate it to another class. This is achieved in Android with fragments. </p><p> A fragment is a controller object that an activity can delegate view management tasks to. The Activity&#39;s own view can have a placeholder(s) defined to insert any fragment(s) view. This decoupling allows for views to be dynamically recomposed as the result of device or user requirements and events. </p></details><details class="panel"><summary>Class diagram — todoFragment app</summary><p>Note in the following class diagram for an example todo fragment app:</p><ul><li>Activity provides a view container</li><li>Inflating the view is delegated to a Fragment controller</li><li> The data source for the view is with the Fragment controller (not Activity) </li></ul><img class="full-width" src="'+Yn+`" alt="todoApp class diagram"></details><details class="panel"><summary>Create an Android project</summary><pre class="slide-small">In Android Studio:

<kbd>Start a new Android Studio project</kbd>

Select <code class="prettyprint"> Phone+Tablet and Empty Activity</code>

Application Name: <code class="prettyprint">Todo Fragment</code>

Package Name: <code class="prettyprint">com.example.todoapp</code>

Make sure that Kotlin and the latest Android Platform are chosen - currently 33.

<img src="`+Ti+`" alt="Settings for New Project">

<kbd class="ui-button-action">⇒Finish</kbd>

<em>Android Studio creates all the necessary files and opens the IDE.</em>

<strong>Run ⇒ Run App</strong>

Setup or use an existing virtual device,
choose <strong>Pixel 4a API 33 targeted for Android 13.0 (Google Play)</strong>

(installing the virtual device may take some time.)
Once Android is running, the default &#39;Hello World!&#39; message is displayed.

On the github version of this code the MainActivity class has been refactored to TodoActivity.
</pre></details><details class="panel"><summary>AndroidX or Support Libraries?</summary><ul><li><em>AndroidX</em> is a major improvement to the original Android Support Library, which is no longer maintained. AndroidX packages fully replace the Support Library by providing feature parity and new libraries </li><li> While you will see older examples using the Support Libraries, these are not being updated. <em>Switch to use AndroidX</em></li><li> These old Support libraries were created to accommodate for transitioning between older versions of Android. Google provided <code class="prettyprint">support-v4</code> which includes fragment support <code class="prettyprint">android.support.v4.app.Fragment</code>. This single support library was updated to a group of libraries including: <code class="prettyprint">support-v7, appcompat-v7, recyclerview-v7</code> and many more, but have now been surpassed with AndroidX - make sure any examples you look at use these. </li></ul></details><p> The following are brief highlights of the important points (the code can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app/tree/kotlin">https://github.com/comp-bkt/todo-fragment-app/tree/kotlin</a>) </p><details class="panel"><summary>Model</summary><p> Being a controller class, the TodoFragment sits between the model and the view and supports the getter and setter methods for the data in the view. </p><p> The model is currently a Kotin (data) Class of a Plane Old Java Object(POJO) with the getter and setter methods for the data that represents a Todo. See the <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app/blob/kotlin/app/src/main/java/com/example/todoapp/Todo.kt">Todo.kt</a> class </p></details><details class="panel"><summary>View</summary><p>Consider the Class diagram</p><ul><li>Activity has an empty container View layout object</li><li>Fragments can be dynamically loaded into the Activity layout</li></ul> Replicate the <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app/tree/kotlin/app/src/main/res/layout">view defintions</a> and their <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app/blob/kotlin/app/src/main/res/values/strings.xml">associated string constants</a></details><details class="panel"><summary>Controller</summary><ul><li> Activity <code class="prettyprint">onCreate</code> has a <code class="prettyprint">FragmentManager</code></li><li> the <code class="prettyprint">FragmentManager</code> dynamically loads the fragment views within a fragment transaction </li><li> Fragment <code class="prettyprint">onCreateView</code> uses the <code class="prettyprint">inflator</code> class to create the view objects from the XML definitions </li></ul><a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app/tree/kotlin/app/src/main/java/com/example/todoapp">https://github.com/comp-bkt/todo-fragment-app/tree/kotlin/app/src/main/java/com/example/todoapp</a></details><br><details class="panel"><summary>Tasks</summary><ol><li> Create the <em>todo fragment app</em> (see code: <a target="_blank" href="https://github.com/comp-bkt/todo-fragment-app">https://github.com/comp-bkt/todo-fragment-app</a> ) </li><li> Starting from the <code class="prettyprint">manifest</code> main <code class="prettyprint">activity</code>, walk-through the code showing your understanding of the design and the implementation of the <em>todo fragment</em>. How many steps and questions can you write down from the start in <code class="prettyprint">manifest</code> to the view being displayed? <ul><li>Why use fragments?</li><li>Why a fragment transaction?</li><li>What does <code class="prettyprint">inflator</code> do?</li><li> Why <code class="prettyprint">onCreate</code> and <code class="prettyprint">onCreateView</code>? </li><li> Use the code from <a target="_blank" href="https://github.com/comp-bkt/todo-detail-app">todo-detail-app</a> examples; refactor the views to use fragments </li></ul></li></ol></details>`,13),Ii=[qi];function Si(a,e,t,s,n,d){return sa(),oa("article",Ci,Ii)}const Mi=la(Ai,[["render",Si]]);const Li={name:"TodoComponent"},Ri={id:"todo-component",class:"lab-sheet panel"},Ei=ma(`<h2 data-v-7db67d9a>A <em data-v-7db67d9a>Todo Component</em> App  </h2><p data-v-7db67d9a> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-component-app/tree/kotlin" data-v-7db67d9a>https://github.com/comp-bkt/todo-component-app/tree/kotlin</a></p><p data-v-7db67d9a><em data-v-7db67d9a>Todo component app</em><code class="prettyprint" data-article="todo-component" data-v-7db67d9a>: Vertical and horizontal swipes with RecyclerView and ViewPager, Fragments, Toolbar + Create, Read, Update a todo </code></p><details class="panel" data-v-7db67d9a><summary data-v-7db67d9a>RecyclerView</summary><ul data-v-7db67d9a><li data-v-7db67d9a> For scrolling list of elements use <a target="_blank" href="https://developer.android.com/guide/topics/ui/layout/recyclerview" data-v-7db67d9a>RecyclerView</a></li><li data-v-7db67d9a> Recycles (reuses) <code class="prettyprint" data-v-7db67d9a>view</code> objects to fill a screen </li><li data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a>RecyclerView</code> relies on an <code class="prettyprint" data-v-7db67d9a>Adapter</code> with a typical sequence of calls: <ol data-v-7db67d9a><li data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a>getItemCount()</code></li><li data-v-7db67d9a> create a new <code class="prettyprint" data-v-7db67d9a>viewHolder</code> with a call to the adapter&#39;s <code class="prettyprint" data-v-7db67d9a>onCreateViewHolder()</code></li><li data-v-7db67d9a> Adpter looks up model data and fills the list item&#39;s <code class="prettyprint" data-v-7db67d9a>viewHolder view</code></li><li data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a>RecyclerView</code> places the list item on the screen </li><li data-v-7db67d9a> Once enough <code class="prettyprint" data-v-7db67d9a>viewHolder</code>&#39;s have been created to fill the screen, they are reused </li></ol></li></ul><details data-v-7db67d9a><summary data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a>RecyclerView</code> &amp; Todo fragments </summary><details data-v-7db67d9a><summary data-v-7db67d9a> Create a <code class="prettyprint" data-v-7db67d9a>RecyclerView</code> in the <code class="prettyprint" data-v-7db67d9a>onCreateView</code> method </summary> In TodoListFragment: <pre class="pretty slide-small" data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a><span class="code_keyword" data-v-7db67d9a>private var</span> mTodoRecyclerView: <span class="code_data_type" data-v-7db67d9a>RecyclerView?</span> = <span class="code_keyword" data-v-7db67d9a>null</span>

mTodoRecyclerView = view.findViewById&lt;<span class="code_data_type" data-v-7db67d9a>View</span>&gt;(R.id.todo_recycler_view) as <span class="code_data_type" data-v-7db67d9a>RecyclerView</span>
<span class="code_comments" data-v-7db67d9a>// it will crash without a LayoutManager</span>
mTodoRecyclerView!!.layoutManager = <span class="code_data_type" data-v-7db67d9a>LinearLayoutManager</span>(activity)</code>
          </pre></details><details data-v-7db67d9a><summary data-v-7db67d9a> Just like <code class="prettyprint" data-v-7db67d9a>Fragments</code>, <code class="prettyprint" data-v-7db67d9a>RecyclerView</code> has its own <code class="prettyprint" data-v-7db67d9a>view</code> hierarchy </summary><pre class="pretty slide-small" data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a><span class="xml_namespace" data-v-7db67d9a>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>

  <span class="code_comments" data-v-7db67d9a>&lt;!-- A RecyclerView with some commonly used attributes --&gt;</span>

  <span class="xml_element" data-v-7db67d9a>&lt;androidx.recyclerview.widget.RecyclerView</span>
    <span class="xml_namespace" data-v-7db67d9a>xmlns:android</span><span class="xml_value" data-v-7db67d9a>=&quot;http://schemas.android.com/apk/res/android&quot;</span>
    <span class="xml_namespace" data-v-7db67d9a>android</span><span class="xml_attribute" data-v-7db67d9a>:id</span><span class="xml_value" data-v-7db67d9a>=&quot;@+id/todo_recycler_view&quot;</span>
    <span class="xml_namespace" data-v-7db67d9a>android</span><span class="xml_attribute" data-v-7db67d9a>:scrollbars</span><span class="xml_value" data-v-7db67d9a>=&quot;vertical&quot;</span>
    <span class="xml_namespace" data-v-7db67d9a>android</span><span class="xml_attribute" data-v-7db67d9a>:layout_width</span><span class="xml_value" data-v-7db67d9a>=&quot;match_parent&quot;</span>
    <span class="xml_namespace" data-v-7db67d9a>android</span><span class="xml_attribute" data-v-7db67d9a>:layout_height</span><span class="xml_value" data-v-7db67d9a>=&quot;match_parent&quot;</span>
    /&gt;</code>
          </pre></details><details data-v-7db67d9a><summary data-v-7db67d9a> Define the <code class="prettyprint" data-v-7db67d9a>ViewHolder</code> to inflate and fill the layout </summary> In TodoListFragment: <pre class="pretty slide-small" data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a><span class="code_keyword" data-v-7db67d9a>inner class</span> <span class="code_data_type" data-v-7db67d9a>TodoHolder</span>(inflater: <span class="code_data_type" data-v-7db67d9a>LayoutInflater</span>, <span class="code_keyword" data-v-7db67d9a>parent</span>: <span class="code_data_type" data-v-7db67d9a>ViewGroup?</span>) :
            <span class="code_data_type" data-v-7db67d9a>RecyclerView</span>.<span class="code_data_type" data-v-7db67d9a>ViewHolder</span>(inflater.inflate(R.layout.list_item_todo, <span class="code_keyword" data-v-7db67d9a>parent</span>, <span class="code_keyword" data-v-7db67d9a>false</span>)), <span class="code_data_type" data-v-7db67d9a>View</span>.OnClickListener {

    <span class="code_keyword" data-v-7db67d9a>override fun</span> onClick(view: <span class="code_data_type" data-v-7db67d9a>View</span>) {

    }
}</code></pre></details><details data-v-7db67d9a><summary data-v-7db67d9a> Create the <code class="prettyprint" data-v-7db67d9a>Adapter</code> and override three methods </summary> In TodoListFragment: <pre class="pretty slide-small" data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a><span class="code_keyword" data-v-7db67d9a>inner class</span> <span class="code_data_type" data-v-7db67d9a>TodoAdapter</span>(<span class="code_keyword" data-v-7db67d9a>private val</span> mTodos: <span class="code_data_type" data-v-7db67d9a>List&lt;Todo?&gt;?</span>) : <span class="code_data_type" data-v-7db67d9a>RecyclerView</span>.Adapter&lt;<span class="code_data_type" data-v-7db67d9a>TodoHolder</span>&gt;() {

  <span class="code_keyword" data-v-7db67d9a>override fun</span> onCreateViewHolder(<span class="code_keyword" data-v-7db67d9a>parent</span>: <span class="code_data_type" data-v-7db67d9a>ViewGroup</span>, viewType: <span class="code_data_type" data-v-7db67d9a>Int</span>): <span class="code_data_type" data-v-7db67d9a>TodoHolder</span> {
    <span class="code_keyword" data-v-7db67d9a>val</span> layoutInflater = <span class="code_data_type" data-v-7db67d9a>LayoutInflater</span>.<span class="code_keyword" data-v-7db67d9a>from</span>(activity)
    <span class="code_keyword" data-v-7db67d9a>return</span> <span class="code_data_type" data-v-7db67d9a>TodoHolder</span>(layoutInflater, <span class="code_keyword" data-v-7db67d9a>parent</span>)
  }

  <span class="code_keyword" data-v-7db67d9a>override fun</span> onBindViewHolder(holder: <span class="code_data_type" data-v-7db67d9a>TodoHolder</span>, position: <span class="code_data_type" data-v-7db67d9a>Int</span>) {
    <span class="code_keyword" data-v-7db67d9a>val</span> todo = mTodos!![position]
    holder.bind(todo)
  }

  <span class="code_keyword" data-v-7db67d9a>override fun</span> getItemCount(): <span class="code_data_type" data-v-7db67d9a>Int</span> {
    <span class="code_keyword" data-v-7db67d9a>return</span> mTodos!!.size
  }
}</code></pre></details><details data-v-7db67d9a><summary data-v-7db67d9a>Bind List Items</summary><p data-v-7db67d9a> Separating creation and binding allows views to be (Recycled) reused </p><ul data-v-7db67d9a><li data-v-7db67d9a> The binding starts with the views in the <code class="prettyprint" data-v-7db67d9a>ViewHolder</code> constructor </li><li data-v-7db67d9a><code class="prettyprint" data-v-7db67d9a>ViewHolder</code> relies on a <code class="prettyprint" data-v-7db67d9a>bind(data)</code> method to set the values of views it holds. </li></ul></details></details></details><details class="panel" data-v-7db67d9a><summary data-v-7db67d9a>Tasks</summary><ol data-v-7db67d9a><li data-v-7db67d9a>Create the <em data-v-7db67d9a>todo component app</em></li><li data-v-7db67d9a> Edit the <code class="prettyprint" data-v-7db67d9a>TodoModel</code> constructor and increase the loop to 30 test todos. </li><li data-v-7db67d9a>Run and swipe vertically</li><li data-v-7db67d9a>Select a todo and swipe horizontally</li><li data-v-7db67d9a>Note + in the toolbar for adding a todo</li><li data-v-7db67d9a>Try adding delete</li><li data-v-7db67d9a>Improve navigation</li></ol></details>`,5),Oi=[Ei];function Vi(a,e,t,s,n,d){return sa(),oa("article",Ri,Oi)}const Fi=la(Li,[["render",Vi],["__scopeId","data-v-7db67d9a"]]);const Pi={name:"TodoPersistence"},Di={id:"todo-sqlite-persistence",class:"lab-sheet panel"},$i=ma(`<h2 data-v-dffc32a4>A <em data-v-dffc32a4>Todo Persistence</em> App</h2><header class="article-header" data-v-dffc32a4><p data-v-dffc32a4> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/todo-persistence-app/tree/kotlin" data-v-dffc32a4>https://github.com/comp-bkt/todo-persistence-app/tree/kotlin</a></p><ul data-v-dffc32a4><li data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>SQlite</code> — Create, Read, Update Todo </li><li data-v-dffc32a4> File store — Implicit intent for camera and picture stored in a file </li><li data-v-dffc32a4> Builds on <code class="prettyprint" data-v-dffc32a4>Todo Fragment App</code> and <code class="prettyprint" data-v-dffc32a4>Todo Component App</code> examples </li></ul></header><details class="panel" data-v-dffc32a4><summary data-v-dffc32a4>SQlite — <span class="caution" data-v-dffc32a4>deprecated</span></summary><div class="caution" data-v-dffc32a4><p data-v-dffc32a4> From Android Documentation on <a target="_blank" href="https://developer.android.com/training/data-storage/sqlite" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>android.database.sqlite</code></a></p><p data-v-dffc32a4><b data-v-dffc32a4>Caution:</b> Although these APIs are powerful, they are fairly low-level and require a great deal of time and effort to use: </p><ul data-v-dffc32a4><li data-v-dffc32a4> There is no compile-time verification of raw SQL queries. As your data graph changes, you need to update the affected SQL queries manually. This process can be time consuming and error prone. </li><li data-v-dffc32a4> You need to use lots of boilerplate code to convert between SQL queries and data objects. </li></ul><p data-v-dffc32a4> For these reasons, we <strong data-v-dffc32a4>highly recommend</strong> using the <a target="_blank" href="https://developer.android.com/training/data-storage/room" data-v-dffc32a4>Room Persistence Library</a> as an abstraction layer for accessing information in your app&#39;s SQLite databases. </p></div><ul data-v-dffc32a4><li data-v-dffc32a4>SQLite, open source flat file relational DB</li><li data-v-dffc32a4>Ideal for embedded applications; No DBMS or scalability</li><li data-v-dffc32a4>SQLite included in Android standard library</li><li data-v-dffc32a4> Android helper classes to open/read/write in device&#39;s <em data-v-dffc32a4>sandbox</em></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Schema, 3<sup data-v-dffc32a4>rd</sup> NF</summary><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>package</span> database

<span class="code_keyword" data-v-dffc32a4>class</span> TodoDbSchema {
    <span class="code_keyword" data-v-dffc32a4>object</span> TodoTable {
        <span class="code_keyword" data-v-dffc32a4>const val</span> NAME = &quot;todos&quot;

        <span class="code_keyword" data-v-dffc32a4>object</span> Cols {
            <span class="code_keyword" data-v-dffc32a4>const val</span> UUID = &quot;uuid&quot;
            <span class="code_keyword" data-v-dffc32a4>const val</span> TITLE = &quot;title&quot;
            <span class="code_keyword" data-v-dffc32a4>const val</span> DETAIL = &quot;detail&quot;
            <span class="code_keyword" data-v-dffc32a4>const val</span> DATE = &quot;date&quot;
            <span class="code_keyword" data-v-dffc32a4>const val</span> IS_COMPLETE = &quot;isComplete&quot;
        }
    }
}</code></pre></details></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Building a DB steps:</summary><ul data-v-dffc32a4><li data-v-dffc32a4>(!Exist DB) Create DB (and Seed data)</li><li data-v-dffc32a4>Else open DB (and check version)</li></ul><details data-v-dffc32a4><summary data-v-dffc32a4> Android <code class="prettyprint" data-v-dffc32a4>SQLiteOpenHelper</code> class handles building a DB </summary><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>package</span> database

<span class="code_keyword" data-v-dffc32a4>import</span> android.content.Context
<span class="code_keyword" data-v-dffc32a4>import</span> android.database.sqlite.SQLiteDatabase
<span class="code_keyword" data-v-dffc32a4>import</span> android.database.sqlite.SQLiteOpenHelper
<span class="code_keyword" data-v-dffc32a4>import</span> database.TodoDbSchema.TodoTable
<span class="code_keyword" data-v-dffc32a4>import</span> database.TodoDbSchema.TodoTable.Cols

<span class="code_keyword" data-v-dffc32a4>class</span> TodoBaseHelper(context: <span class="code_data_type" data-v-dffc32a4>Context?</span>) : <span class="code_data_type" data-v-dffc32a4>SQLiteOpenHelper</span>(context, DATABASE_NAME, <span class="code_keyword" data-v-dffc32a4>null</span>, VERSION) {
    <span class="code_keyword" data-v-dffc32a4>override fun</span> onCreate(db: <span class="code_data_type" data-v-dffc32a4>SQLiteDatabase</span>) {
        db.execSQL(&quot;create table &quot; + TodoTable.NAME + &quot;(&quot; +
                Cols.UUID + &quot; TEXT, &quot; +
                Cols.TITLE + &quot; TEXT, &quot; +
                Cols.DETAIL + &quot; TEXT, &quot; +
                Cols.DATE + &quot; DATE, &quot; +
                Cols.IS_COMPLETE + &quot; BOOLEAN)&quot;
        )
    }

    <span class="code_keyword" data-v-dffc32a4>override fun</span> onUpgrade(db: <span class="code_data_type" data-v-dffc32a4>SQLiteDatabase</span>, oldVersion: <span class="code_data_type" data-v-dffc32a4>Int</span>, newVersion: <span class="code_data_type" data-v-dffc32a4>Int</span>) {}

    <span class="code_keyword" data-v-dffc32a4>companion object</span> {
        <span class="code_keyword" data-v-dffc32a4>private const val</span> VERSION = 1
        <span class="code_keyword" data-v-dffc32a4>private const val</span> DATABASE_NAME = &quot;todo.db&quot;
    }
}</code></pre></details><details data-v-dffc32a4><summary data-v-dffc32a4> Example Model using <code class="prettyprint" data-v-dffc32a4>SQLiteOpenHelper</code> to create a DB </summary><p data-v-dffc32a4></p><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>internal class</span> TodoModel <span class="code_keyword" data-v-dffc32a4>private constructor</span>(context: <span class="code_data_type" data-v-dffc32a4>Context?</span>) {

    <span class="code_keyword" data-v-dffc32a4>private val</span> mDatabase: <span class="code_data_type" data-v-dffc32a4>SQLiteDatabase</span>

    <span class="code_keyword" data-v-dffc32a4>init</span> {
        mContext = context!!.applicationContext
        mDatabase = <span class="code_data_type" data-v-dffc32a4>TodoBaseHelper</span>(mContext)
                .writableDatabase
    }

    <span class="code_keyword" data-v-dffc32a4>companion object</span> {
        <span class="code_keyword" data-v-dffc32a4>private var</span> sTodoModel: <span class="code_data_type" data-v-dffc32a4>TodoModel?</span> = <span class="code_keyword" data-v-dffc32a4>null</span>
        <span class="code_keyword" data-v-dffc32a4>private lateinit var</span> mContext: <span class="code_data_type" data-v-dffc32a4>Context</span>
        <span class="code_keyword" data-v-dffc32a4>operator fun</span> get(context: <span class="code_data_type" data-v-dffc32a4>Context?</span>): <span class="code_data_type" data-v-dffc32a4>TodoModel?</span> {
            mContext = context!!.applicationContext
            <span class="code_keyword" data-v-dffc32a4>if</span> (sTodoModel == <span class="code_keyword" data-v-dffc32a4>null</span>) {
                sTodoModel = <span class="code_data_type" data-v-dffc32a4>TodoModel</span>(context)
            }
            <span class="code_keyword" data-v-dffc32a4>return</span> sTodoModel
        }
    }
}</code></pre></details><details data-v-dffc32a4><summary data-v-dffc32a4>CRUD Operations</summary><ul data-v-dffc32a4><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4> CRUD uses <code class="prettyprint" data-v-dffc32a4>ContentValues</code> class to store <em data-v-dffc32a4>key/value</em> maps </summary><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_comments" data-v-dffc32a4>/* Model static method for ContentValues - in Kotlin part of Companion Object */</span>
<span class="code_keyword" data-v-dffc32a4>private fun</span> getContentValues(todo: <span class="code_data_type" data-v-dffc32a4>Todo?</span>): <span class="code_data_type" data-v-dffc32a4>ContentValues</span> {
    <span class="code_keyword" data-v-dffc32a4>val</span> values = <span class="code_data_type" data-v-dffc32a4>ContentValues</span>()
    values.put(TodoDbSchema.TodoTable.Cols.UUID, todo!!.id.toString())
    values.put(TodoDbSchema.TodoTable.Cols.TITLE, todo.title)
    values.put(TodoDbSchema.TodoTable.Cols.DETAIL, todo.detail)
    values.put(TodoDbSchema.TodoTable.Cols.DATE, todo.date.time)
    values.put(TodoDbSchema.TodoTable.Cols.IS_COMPLETE, <span class="code_keyword" data-v-dffc32a4>if</span> (todo.isComplete == <span class="code_keyword" data-v-dffc32a4>true</span>) <span class="code_keyword" data-v-dffc32a4>true else false</span>)
    <span class="code_keyword" data-v-dffc32a4>return</span> values
}
</code></pre></details></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Create or Write to the DB</summary><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>private fun</span> addTodo(todo: <span class="code_data_type" data-v-dffc32a4>Todo</span>) {
  <span class="code_keyword" data-v-dffc32a4>val</span> values = getContentValues(todo)
  mDatabase.insert(<span class="code_data_type" data-v-dffc32a4>TodoDbSchema.TodoTable</span>.NAME, <span class="code_keyword" data-v-dffc32a4>null</span>, values)
}</code></pre></details></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Update a record</summary><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>fun</span> updateTodo(todo: <span class="code_data_type" data-v-dffc32a4>Todo?</span>) {
  <span class="code_keyword" data-v-dffc32a4>val</span> uuidString = todo!!.id.toString()
  <span class="code_keyword" data-v-dffc32a4>val</span> values = getContentValues(todo)

  <span class="code_comments" data-v-dffc32a4>/* stop sql injection, pass uuidString to new String
  so, it is treated as string rather than code */</span>
  mDatabase.update(<span class="code_data_type" data-v-dffc32a4>TodoDbSchema.TodoTable</span>.NAME, values,
  <span class="code_data_type" data-v-dffc32a4>TodoDbSchema.TodoTable.Cols.UUID</span> + &quot; = ?&quot;, arrayOf(uuidString))
}</code></pre></details></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Read a record</summary><ul data-v-dffc32a4><li data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>SQLiteDatabase.query()</code> has many <em data-v-dffc32a4>overloads</em> corresponding to a SQL query <br data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>SELECT columns FROM Table WHERE wherArgs GROUPBY, HAVING, ORDERBY, LIMIT </code>. </li><li data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>SQLiteDatabase.query()</code> returns a <code class="prettyprint" data-v-dffc32a4>cursor</code> object <br data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>val cursor:Cursor = mDatabase.query(TodoDbSchema.TodoTable.NAME, … )</code></li><li data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>Cursor</code> interface provides random read-write access to the result set returned by a database query.<br data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4>cursor.getColumnIndex(TodoDbSchema.TodoTable.Cols.TITLE));</code></li><li data-v-dffc32a4> DRY by using <code class="prettyprint" data-v-dffc32a4>CursorWrapper</code> to subclass <code class="prettyprint" data-v-dffc32a4>Cursor</code><br data-v-dffc32a4><aside class="small" data-v-dffc32a4> (CursorWrapper delegates all calls to the actual cursor object. The primary use for this class is to extend a cursor while overriding only a subset of its methods.) </aside><pre class="pretty slide-small" data-v-dffc32a4><code class="prettyprint" data-v-dffc32a4><span class="code_keyword" data-v-dffc32a4>class</span> <span class="code_data_type" data-v-dffc32a4>TodoCursorWrapper</span> (cursor: <span class="code_data_type" data-v-dffc32a4>Cursor?</span> ) : <span class="code_data_type" data-v-dffc32a4>CursorWrapper</span> (cursor) {
    <span class="code_keyword" data-v-dffc32a4>val</span> todo: <span class="code_data_type" data-v-dffc32a4>Todo</span>
        get() {
            <span class="code_keyword" data-v-dffc32a4></span>  uuidString = getString(getColumnIndex(Cols.UUID))
            <span class="code_keyword" data-v-dffc32a4>val</span>  title = getString(getColumnIndex(Cols.TITLE))
            <span class="code_keyword" data-v-dffc32a4>val</span>  detail = getString(getColumnIndex(Cols.DETAIL))
            <span class="code_keyword" data-v-dffc32a4>val</span>  date = getLong(getColumnIndex(Cols.DATE))
            <span class="code_keyword" data-v-dffc32a4>val</span>  isComplete = getInt(getColumnIndex(Cols.IS_COMPLETE))
            <span class="code_keyword" data-v-dffc32a4>val</span>  todo = <span class="code_data_type" data-v-dffc32a4>Todo</span> (UUID.fromString(uuidString))
            todo.title = title
            todo.detail = detail
            todo.date = <span class="code_data_type" data-v-dffc32a4>Date</span> (date)
            todo.isComplete = <span class="code_keyword" data-v-dffc32a4>if</span>  (isComplete == 1) <span class="code_keyword" data-v-dffc32a4>true else false</span>
            <span class="code_keyword" data-v-dffc32a4>return</span>  todo
        }
}</code></pre></li></ul></details></li></ul></details></details></li><li class="no-marker" data-v-dffc32a4><details data-v-dffc32a4><summary data-v-dffc32a4>Debugging</summary><ul data-v-dffc32a4><li data-v-dffc32a4> Changes in DDL should lead to the <code class="prettyprint" data-v-dffc32a4>SQLiteOpenHelper</code> change the version number and update the tables in the <code class="prettyprint" data-v-dffc32a4>onUpgrade</code> method </li><li data-v-dffc32a4> Or, destroy the database by deleting the app on the device and start again. <br data-v-dffc32a4><div class="small" data-v-dffc32a4> (For a new app, <code class="prettyprint" data-v-dffc32a4>SQLiteOpenHelper.onCreate()</code> is called and a new database instance is created). </div></li><li data-v-dffc32a4> Use a breakpoint and examine the detail of <code class="prettyprint" data-v-dffc32a4>SQL</code> statement for correct syntax. </li></ul></details></li></ul></details><h3 data-v-dffc32a4>Room Persistence Library</h3><p data-v-dffc32a4><q cite="https://developer.android.com/topic/libraries/architecture/room" data-v-dffc32a4>The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.</q></p><ul data-v-dffc32a4><li data-v-dffc32a4><a target="_blank" href="https://github.com/comp-bkt/TodoMVVM" data-v-dffc32a4>TodoMVVM lab exercise (currently java)</a></li><li data-v-dffc32a4><a target="_blank" href="https://developer.android.com/topic/libraries/architecture/room" data-v-dffc32a4>Room additional resources including Samples and Codelabs</a></li></ul>`,6),ji=[$i];function Ni(a,e,t,s,n,d){return sa(),oa("article",Di,ji)}const Bi=la(Pi,[["render",Ni],["__scopeId","data-v-dffc32a4"]]);const Hi={name:"TodoMVVM"},Ui={id:"todo-mvvm",class:"lab-sheet panel"},Wi=ma(`<h2 data-v-5ddc2fa4>A <em data-v-5ddc2fa4>Todo Persistence</em> App — MVVM</h2><p data-v-5ddc2fa4> The code for this exercise can be found at: <a target="_blank" href="https://github.com/comp-bkt/TodoMVVM" data-v-5ddc2fa4>https://github.com/comp-bkt/TodoMVVM</a></p><h3 data-v-5ddc2fa4>Model‐View‐View‐Model (MVVM)</h3><p data-v-5ddc2fa4> MVVM is the Android recommended architecture. This lab exercise is an MVVM implementation of the Todo app. </p><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4>MVVM overview</summary><p data-v-5ddc2fa4> MVVM is the Android recommended app architecture built arround a set of Architecture Components designed to work together. The components are lifecycle aware and make code design, implementation and maintenance much easier to manage. </p><div class="width-full panel" data-v-5ddc2fa4><span data-class="image width-three-quarter" data-image="todo app uml sequence diagram" data-local-src="assets/android-mvvm.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fandroid-mvvm.png?v=1573685057510" data-v-5ddc2fa4></span><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4> Overview of MVVM components implemented in this exercise </summary><dl data-v-5ddc2fa4><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>Entity</code></dt><dd data-v-5ddc2fa4> Annotated class that describes a db table used with <code class="prettyprint" data-v-5ddc2fa4>Room</code> ORM class </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>SQLite</code> database</dt><dd data-v-5ddc2fa4> Created and maintained with <code class="prettyprint" data-v-5ddc2fa4>Room</code> persistence library on its own thread </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>DAO</code></dt><dd data-v-5ddc2fa4> Data Access Object, provides object methods to <code class="prettyprint" data-v-5ddc2fa4>SQL</code> queries </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>Room</code> database</dt><dd data-v-5ddc2fa4> Uses the <code class="prettyprint" data-v-5ddc2fa4>DAO</code> to issue queries to the <code class="prettyprint" data-v-5ddc2fa4>SQLite</code> database ( and thankfully, hides <code class="prettyprint" data-v-5ddc2fa4>SQLiteOpenHelper</code>) </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>Repository</code></dt><dd data-v-5ddc2fa4> Provides APIs for UI to communicate with the data layer. Important, Single Source Of Truth (SSOT) pattern, i.e. every data element for the app is stored only once. <code class="prettyprint" data-v-5ddc2fa4>Repository</code> is also used to manage multiple data sources. </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>ViewModel</code></dt><dd data-v-5ddc2fa4> A communication object between the data <code class="prettyprint" data-v-5ddc2fa4>Repository</code> and the UI. <code class="prettyprint" data-v-5ddc2fa4>ViewModel</code> instances survive <code class="prettyprint" data-v-5ddc2fa4>Activity</code>/<code class="prettyprint" data-v-5ddc2fa4>Fragment</code> recreation. </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>LiveData</code></dt><dd data-v-5ddc2fa4> An observable data holder class, hence it always holds/caches the latest data and notifies its observers when data changes. UI components observe relevant data as <code class="prettyprint" data-v-5ddc2fa4>LiveData</code> is aware of the relevant lifecycle status changes while observing. </dd><dt data-v-5ddc2fa4>Fragments</dt><dd data-v-5ddc2fa4> UI is built dynamically with <code class="prettyprint" data-v-5ddc2fa4>Fragment</code> transactions and separation of concerns is achieved with <code class="prettyprint" data-v-5ddc2fa4>ViewModel</code> and <code class="prettyprint" data-v-5ddc2fa4>LiveData</code> implementing the observer pattern. </dd></dl></details></div><p data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>ViewModel</code> allows data to survive across process rather than <code class="prettyprint" data-v-5ddc2fa4>Activity</code> lifecycle, hence, configuration changes (such as screen rotations) are easier to manage. </p><p data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>LiveData</code> implements the observer pattern and is an observable data-holder class and a lifecycle aware component. UI Controllers can observe relevant data and <code class="prettyprint" data-v-5ddc2fa4>LiveData</code> can notify them of data changes. This allows for views to be built only when actual changes to data occurs. </p><p data-v-5ddc2fa4> The <code class="prettyprint" data-v-5ddc2fa4>Room</code> persistence library provides ORM and makes it easy to build a local cache layer, improving performance and the user experience with less reliance on data pulled from the network. </p></details><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4>MVVM lab sheet</summary><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4>Create a new project</summary><pre class="slide-small" data-v-5ddc2fa4>Create a new empty project named, TodoMVVM
API 33: Android 13
Virtual Device: Pixel 4a API 33</pre></details><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4>Gradle update for new component libraries</summary><p data-v-5ddc2fa4>Edit build.gradle (Project: TodoMVVM) and add (or later versions if available):</p><pre class="slide-small" data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>ext {
    roomVersion = &#39;2.4.2&#39;
    archLifecycleVersion = &#39;2.2.0&#39;
    coreTestingVersion = &#39;2.1.0&#39;
    materialVersion = &#39;1.5.0&#39;
}</code></pre><p data-v-5ddc2fa4> Edit build.gradle (Module: TodoMVVM) for dependencies<br data-v-5ddc2fa4> (insert at the end of the dependencies block, before the } ) </p><pre class="slide-small" data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>// Room components
    implementation &quot;androidx.room:room-runtime:$rootProject.roomVersion&quot;
    annotationProcessor &quot;androidx.room:room-compiler:$rootProject.roomVersion&quot;
    androidTestImplementation &quot;androidx.room:room-testing:$rootProject.roomVersion&quot;

// Lifecycle components
    implementation &quot;androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion&quot;
    implementation &quot;androidx.lifecycle:lifecycle-common-java8:2.4.1&quot;


// UI
    implementation &quot;com.google.android.material:material:$rootProject.materialVersion&quot;

// Testing
    androidTestImplementation &quot;androidx.arch.core:core-testing:$rootProject.coreTestingVersion&quot;
</code></pre></details><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4>Sync dependencies</summary><p data-v-5ddc2fa4> Sync Now (in Android Studio, top right corner)<br data-v-5ddc2fa4><span class="caution" data-v-5ddc2fa4>Do not proceed unless the Sync completes without errors!</span></p></details><details class="panel" data-v-5ddc2fa4><summary data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>Entity</code></summary><p data-v-5ddc2fa4> An <code class="prettyprint" data-v-5ddc2fa4>entity</code> is an annotated class that describes a database table. Room uses the properties of this entity class to create columns in the database table. The same <code class="prettyprint" data-v-5ddc2fa4>entity</code> is used to instantiate objects from rows of data in the database. </p><p data-v-5ddc2fa4> Create a new class file named <code class="prettyprint" data-v-5ddc2fa4>Todo</code> and insert the following code: </p><details data-v-5ddc2fa4><summary data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>Todo</code> entity</summary><pre class="slide-small" data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>import androidx.annotation.NonNull;
import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.PrimaryKey;
<span class="slide-small" data-v-5ddc2fa4>
/**
 * A basic class representing a two-column todo_database table.
 *
 * @ Entity - annotate the class as an entity and supply a table name if not class name.
 * @ PrimaryKey - identify the primary key.
 * @ ColumnInfo - supply the column name if it is different from the variable name.
 *
 * See the documentation for the full set of annotations.
 * https://developer.android.com/topic/libraries/architecture/room.html
 */
</span>
@Entity(tableName = &quot;todo_table&quot;)
public class Todo {

    @PrimaryKey
    @NonNull
    @ColumnInfo(name = &quot;title&quot;)
    private String mTitle;

    private String mDetail;

    public Todo(@NonNull String title) {
        this.mTitle = title;
    }
    public String getTitle() {
        return this.mTitle;
    }

    String getDetail() {
        return this.mDetail;
    }
    void setDetail(String mDetail) {
        this.mDetail = mDetail;
    }

}</code></pre></details><p data-v-5ddc2fa4> The class is a POJO with a set of attributes representing the database columns and getter, setter methods. Note the annotations identify how each part of this class relates to an entry in the database. <code class="prettyprint" data-v-5ddc2fa4>Room</code> uses this information to generate code. </p><details data-v-5ddc2fa4><summary data-v-5ddc2fa4> Here is a brief explanation of each of the annotations </summary><dl data-v-5ddc2fa4><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>@Entity(tableName = &quot;todo_table&quot;)</code></dt><dd data-v-5ddc2fa4> Each <code class="prettyprint" data-v-5ddc2fa4>@Entity</code> class represents a SQLite table. The parameter <code class="prettyprint" data-v-5ddc2fa4>tablename</code> can optionally set a different name than the default name of the class. </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>@PrimaryKey</code></dt><dd data-v-5ddc2fa4> Every entity has a primary key. In this case, simply each todo <code class="prettyprint" data-v-5ddc2fa4>tittle</code> is the primary key. </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>@NonNull</code></dt><dd data-v-5ddc2fa4> Denotes that a parameter, field, or method return value can never be null. </dd><dt data-v-5ddc2fa4><code class="prettyprint" data-v-5ddc2fa4>@ColumnInfo(name = &quot;title&quot;)</code></dt><dd data-v-5ddc2fa4> Specify the name of the column in the table if you want it to be different from the name of the member variable. </dd><dt data-v-5ddc2fa4>Other minimum constraints</dt><dd data-v-5ddc2fa4> Every field that is stored in the database needs to be either public or have a <em data-v-5ddc2fa4>getter</em> method. This example provides a <code class="prettyprint" data-v-5ddc2fa4>getTitle()</code> and <code class="prettyprint" data-v-5ddc2fa4>getDetail()</code> methods. </dd></dl></details><p data-v-5ddc2fa4> The complete list of annotations can be found in the <a target="_blank" href="https://developer.android.com/reference/androidx/room/package-summary.html" data-v-5ddc2fa4>Room package summary reference</a>. And see <a target="_blank" href="https://developer.android.com/training/data-storage/room/defining-data.html" data-v-5ddc2fa4>Defining data using Room entities</a> for further examples uses of annotations. </p></details><pre class="slide-small" data-v-5ddc2fa4>API and dependancies are now setup, Run to make sure there are no errors

Create a git branch, entity
add code for Todo
Git checkout master and merge entity branch

Create a git branch, dao
add code for TodoDao
Git checkout master and merge entity branch

Create a git branch, room
add code for TodoRoomDatabase
Git checkout master and merge room branch

            </pre></details><div class="width-three-quarter panel" data-v-5ddc2fa4><span data-class="image width-full" data-image="Android Room View Model" data-local-src="assets/loading_data_view_model.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Floading_data_view_model.png?v=1573685177028" data-v-5ddc2fa4></span></div><h3 data-v-5ddc2fa4>Room Persistence Library</h3><p data-v-5ddc2fa4><q cite="https://developer.android.com/topic/libraries/architecture/room" data-v-5ddc2fa4>The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.</q></p><ul data-v-5ddc2fa4><li data-v-5ddc2fa4><a target="_blank" href="https://github.com/comp-bkt/TodoMVVM" data-v-5ddc2fa4>TodoMVVM lab exercise</a></li><li data-v-5ddc2fa4><a target="_blank" href="https://developer.android.com/topic/libraries/architecture/room" data-v-5ddc2fa4>Room additional resouces including Samples and Codelabs</a></li></ul><div class="width-full panel" data-v-5ddc2fa4><span data-class="image width-three-quarter" data-image="Android MVVM architecture" data-local-src="assets/android-final-architecture.png" data-cdn-src="https://cdn.glitch.com/3943c32b-ac0d-4285-afbf-c67ee5a851ca%2Fandroid-final-architecture.png?v=1573684803675" data-v-5ddc2fa4></span></div>`,11),Ki=[Wi];function Ji(a,e,t,s,n,d){return sa(),oa("article",Ui,Ki)}const Qi=la(Hi,[["render",Ji],["__scopeId","data-v-5ddc2fa4"]]);const Xi={name:"AndroidOverview"},zi={id:"android-overview",class:"lab-sheet panel"},Gi=ma(`<h2 data-v-3b80ca9f>Mobile Apps — Android  </h2><details class="panel" data-v-3b80ca9f><summary data-v-3b80ca9f> Assumed programming knowledge. Start with a review. </summary><pre class="slide-small" data-v-3b80ca9f><code class="prettyprint" data-v-3b80ca9f><span class="code_comments" data-v-3b80ca9f>Can you explain static types and methods?</span>
<span class="code_keyword" data-v-3b80ca9f>if</span> (<span class="code_keyword" data-v-3b80ca9f>true</span> ) {
        <span class="code_comments" data-v-3b80ca9f>continue with the lab exercises</span>
} <span class="code_keyword" data-v-3b80ca9f>else</span>  {
        <span class="code_comments" data-v-3b80ca9f>Read</span> <a href="https://ocw.mit.edu/courses/6-092-introduction-to-programming-in-java-january-iap-2010/pages/lecture-notes/" target="_blank" data-v-3b80ca9f>Introduction to Programming in Java</a> ‐ <span class="code_comments" data-v-3b80ca9f>from MIT</span>
        <span class="code_comments" data-v-3b80ca9f>Watch</span> <a href="https://www.youtube.com/watch?v=ckYwv4_Qtmo" target="_blank" data-v-3b80ca9f>Java Memory Management</a>, <span class="code_comments" data-v-3b80ca9f>Video from Virtual Pair Programmers</span>
        <a href="https://www.greenteapress.com/thinkjava5/index.html" target="_blank" data-v-3b80ca9f>Think Java</a> <span class="code_comments" data-v-3b80ca9f>is useful as reference</span>
}</code></pre><p data-v-3b80ca9f> The Introduction to Programming in Java is a good concise reference. See the lecture notes and complete the exercises. This is a minimum needed before attempting to code in any framework such as Android. </p><p data-v-3b80ca9f>While Android has now shifted to a Kotlin first approach - your prior knowledge will be from a JAVA background. It is important that your understanding of JAVA is in sync with the links above.</p></details><details class="panel" data-v-3b80ca9f><summary data-v-3b80ca9f>Install Android Studio Development Environment</summary><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-install-android-studio" data-v-3b80ca9f>Install Android Studio</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-first-template-project#" data-v-3b80ca9f>Create your first Android App</a></li></ul><p data-v-3b80ca9f>During the installation, Select:</p><ul data-v-3b80ca9f><li data-v-3b80ca9f>SDK platform: Android 13.0 API 33</li><li data-v-3b80ca9f>Virtual Device: Pixel 4a API 33</li></ul><p data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-first-template-project#" data-v-3b80ca9f>Create your first Android App</a>. This is the same as the link above</p><p data-v-3b80ca9f>If you have an real Android device, this can be used instead of the emulator. <a target="_blank" href="https://developer.android.com/studio/debug/dev-options" data-v-3b80ca9f>For further information on configuring your device</a></p></details><details class="panel nav-section-end" data-v-3b80ca9f><summary data-v-3b80ca9f>Lab Exercises</summary><ul data-v-3b80ca9f><li data-v-3b80ca9f>For all exercises, select <strong data-v-3b80ca9f>Kotlin</strong> and use <strong data-v-3b80ca9f>API 33: Android 13.0 for Minimum SDK</strong></li></ul><ul class="list-style-type-none" data-v-3b80ca9f><li class="list-style-none" data-v-3b80ca9f><details open="" data-v-3b80ca9f><summary data-v-3b80ca9f>These are the 4 exercises that need to be completed for your first part of the assignment. They will be assessed via a <strong data-v-3b80ca9f>commit</strong> history showing a professional approach to development, and a <strong data-v-3b80ca9f>Q&amp;A</strong> showing your understanding of the code and concepts </summary><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-create-dice-roller-app-with-button" data-v-3b80ca9f>Your first interactive UI - Dice Roller</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-xml-layouts" data-v-3b80ca9f>XML Layouts for Android</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-activities-intents" data-v-3b80ca9f>Activities and intents</a></li><li class="nav-section-end" data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-activity-lifecycle" data-v-3b80ca9f>Activity lifecycle and state</a></li></ul></details></li></ul></details><details class="panel nav-section-end" data-v-3b80ca9f><summary data-v-3b80ca9f>Case Study — &quot;Todo App&quot;</summary><ul class="list-style-none" data-v-3b80ca9f><li data-v-3b80ca9f><details data-v-3b80ca9f><summary data-v-3b80ca9f>Todo App</summary><ul data-v-3b80ca9f><li data-article="todo-first" data-v-3b80ca9f>First todo app</li><li data-article="todo-detail" data-v-3b80ca9f>Todo detail app</li></ul></details></li><li data-v-3b80ca9f><details data-v-3b80ca9f><summary data-v-3b80ca9f>Navigation</summary><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://codelabs.developers.google.com/codelabs/android-training-clickable-images/index.html?index=..%2F..android-training#0" data-v-3b80ca9f>Clickable images (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://codelabs.developers.google.com/codelabs/android-training-provide-user-navigation/#0" data-v-3b80ca9f>User navigation (Java)</a></li><li class="nav-section-end" data-v-3b80ca9f><a target="_blank" href="https://codelabs.developers.google.com/codelabs/android-training-create-recycler-view/#0" data-v-3b80ca9f>RecyclerView (Java)</a></li></ul></details></li><li data-v-3b80ca9f><details data-v-3b80ca9f><summary data-v-3b80ca9f>Fragments</summary><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/advanced-android-training-fragments#0" data-v-3b80ca9f>Fragments (Java)</a></li></ul></details></li><li data-v-3b80ca9f><details data-v-3b80ca9f><summary data-v-3b80ca9f>Todo App — revisited</summary><ul data-v-3b80ca9f><li data-article="todo-fragment" data-v-3b80ca9f>Todo Fragment App</li><li data-article="todo-component" data-v-3b80ca9f>Todo Component App</li><li class="nav-section-end" data-article="todo-sqlite-persistence" data-v-3b80ca9f>Todo Persistence App</li><li data-article="todo-mvvm" data-v-3b80ca9f>Todo MVVM App</li></ul></details></li><li data-v-3b80ca9f><details data-v-3b80ca9f><summary data-v-3b80ca9f>Android Developer</summary><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://github.com/android/architecture-samples/tree/todo-mvvm-live-kotlin" data-v-3b80ca9f>Google blueprint Todo App </a>(Please view different branches and Readme.md files for architectural overviews) </li><li data-v-3b80ca9f><a target="_blank" href="https://codelabs.developers.google.com/android-training/" data-v-3b80ca9f>Fundamentals Course</a> (Java 2018) </li></ul></details></li></ul></details><details class="panel nav-section-end" data-v-3b80ca9f><summary data-v-3b80ca9f>Lecture Notes</summary><ul data-v-3b80ca9f><li data-article="java-review-slide" data-v-3b80ca9f>Java Review</li><li data-article="android-platform-slide" data-v-3b80ca9f>Android Platform</li><li data-article="activity-intent-slide" data-v-3b80ca9f>Activity &amp; Intent</li><li data-article="events-listeners-slide" data-v-3b80ca9f>Events &amp; Listeners</li><li data-article="fragments-slide" class="nav-section-end" data-v-3b80ca9f>Fragments</li><li data-article="architecture-slide" data-v-3b80ca9f>Architecture</li></ul></details><details class="panel" data-v-3b80ca9f><summary data-v-3b80ca9f> Reading &amp; Lab test preparation </summary><h3 data-v-3b80ca9f>Book</h3><ul data-v-3b80ca9f><li data-v-3b80ca9f> Android Programming, The Big Nerd Ranch Guide, Bill Phillips et. al. </li></ul><h3 data-v-3b80ca9f>Articles (Android Developer)</h3><ul class="external-link" data-v-3b80ca9f><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/guide/components/fundamentals/" data-v-3b80ca9f>Android application fundamentals</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/codelabs/basic-android-kotlin-training-first-template-project#" data-v-3b80ca9f>Build your first app</a></li><li data-v-3b80ca9f><a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-1-c-activities-and-intents/2-1-c-activities-and-intents.html" data-v-3b80ca9f>Activities and intents (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-2-c-activity-lifecycle-and-state/2-2-c-activity-lifecycle-and-state.html" data-v-3b80ca9f>Activity lifecycle and state (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-2-activities-and-intents/2-3-c-implicit-intents/2-3-c-implicit-intents.html" data-v-3b80ca9f>Implicit intents (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-2-user-experience/lesson-4-user-interaction/4-4-c-user-navigation/4-4-c-user-navigation.html" data-v-3b80ca9f>User navigation (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-2-user-experience/lesson-4-user-interaction/4-5-c-recyclerview/4-5-c-recyclerview.html" data-v-3b80ca9f>RecyclerView (Java)</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/guide/components/activities/" data-v-3b80ca9f>Activity and life cycle</a></li><li data-v-3b80ca9f><a target="_blank" href="https://developer.android.com/guide/components/activities/activity-lifecycle" data-v-3b80ca9f>Understand the Activity Life cycle</a></li></ul></details>`,7),Yi=[Gi];function Zi(a,e,t,s,n,d){return sa(),oa("article",zi,Yi)}const ar=la(Xi,[["render",Zi],["__scopeId","data-v-3b80ca9f"]]);Dl("panel",{state:()=>({currentPanel:"Lecture_And_Labs"}),getters:{getCurrentPanel:a=>a.currentPanel},actions:{setPanel(a){this.currentPanel=a,console.log(a+" store")}}});const er={id:"home-page"},tr={class:"panel"},sr={name:"MainPanel",components:{Lecture_And_Labs:yc,JavaReview:kc,AndroidPlatform:Sc,ActivityIntent:Dc,EventsListeners:Uc,Fragments:Gc,Threads:si,Architecture:ii,TodoFirst:hi,TodoDetail:ki,TodoFragment:Mi,TodoComponent:Fi,TodoPersistence:Bi,TodoMVVM:Qi,AndroidOverview:ar},data(){return{currentPanel:Ve.currentPanel,store:Ve}}},nr=Object.assign(sr,{setup(a){return(e,t)=>(sa(),oa("article",er,[R("div",tr,[(sa(),Ms(go,null,[(sa(),Ms(Mo(fn(Ve).currentPanel)))],1024))])]))}}),dr=la(nr,[["__scopeId","data-v-f34570cf"]]);const or={class:"header flexbox"},lr={id:"mainContainer",class:"flexbox"},cr={name:"App"},ir=Object.assign(cr,{setup(a){return(e,t)=>(sa(),oa(qa,null,[R("header",or,[N(pc)]),R("main",lr,[N(dr)])],64))}}),rr=la(ir,[["__scopeId","data-v-c5830894"]]);const pr=El(),Zn=Ml(rr);Zn.use(pr);Zn.mount("#app");
